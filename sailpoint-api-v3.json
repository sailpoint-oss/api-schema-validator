{
  "openapi": "3.0.1",
  "info": {
    "contact": {
      "email": "developers@sailpoint.com",
      "name": "Developer Relations",
      "url": "https://developer.sailpoint.com/discuss"
    },
    "description": "These are the public APIs for SailPoint's SaaS services. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "title": "SailPoint - SaaS API",
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "https://{tenant}.api.identitynow.com/v3",
      "description": "This is the production API server.",
      "variables": {
        "tenant": {
          "default": "sailpoint",
          "description": "This is the name of your tenant, typically your company's name."
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Access Requests"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Account Activities"
    },
    {
      "name": "Certifications"
    },
    {
      "name": "Certification Summaries"
    },
    {
      "name": "Lifecycle States"
    },
    {
      "name": "Identity Profiles"
    },
    {
      "name": "Non-Employee Lifecycle Management"
    },
    {
      "name": "OAuth Clients"
    },
    {
      "name": "Personal Access Tokens"
    },
    {
      "name": "Public Identities"
    },
    {
      "name": "Public Identities Config"
    },
    {
      "name": "Requestable Objects"
    },
    {
      "name": "Saved Search"
    },
    {
      "name": "Scheduled Search"
    },
    {
      "name": "Search"
    },
    {
      "name": "Service Desk Integration",
      "description": "Operations for creating and accessing service desk integrations"
    },
    {
      "name": "Sources"
    },
    {
      "name": "Transforms",
      "description": "The purpose of this API is to expose functionality for manipulation of Transform objects.\nTransforms are a form of configurable objects which define an easy way to manipulate attribute data without having\nto write code. These endpoints don't require API calls to other resources, audit service is used for keeping track\nof which users have made changes to the Transforms.\n",
      "externalDocs": {
        "description": "Find more info here",
        "url": "https://community.sailpoint.com/t5/IdentityNow-Wiki/Building-Transforms-in-IdentityNow/ta-p/73398"
      }
    },
    {
      "name": "Work Items"
    }
  ],
  "paths": {
    "/access-requests": {
      "post": {
        "operationId": "createAccessRequest",
        "summary": "Submit an Access Request",
        "tags": [
          "Access Requests"
        ],
        "description": "This submits the access request into IdentityNow, where it will follow any IdentityNow approval processes. This\ndoesn't return a result because the request has been submitted/accepted by the system.\n\nThere are two types of access request:\n\n__GRANT_ACCESS__\n* Can be requested for multiple identities in a single request.\n* Supports self request and request on behalf of other users, see '/beta/access-request-config' endpoint for request configuration options.  \n* Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others.\n* Roles, Access Profiles and Entitlements can be requested.\n* While requesting entitlements, maximum of 5 entitlements and 10 recipients are allowed in a request.\n \n__REVOKE_ACCESS__\n* Can only be requested for a single identity at a time.\n* Does not support self request. Only manager can request to revoke access for their directly managed employees.\n* If removeDate is specified, then the access will be removed on that date and time.\n* Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.\n* Roles and Access Profiles can be requested for revocation. Revoke request for entitlements are not supported currently.\n\nNOTE: There is no indication to the approver in the IdentityNow UI that the approval request is for a revoke action. Take this into consideration when calling this API.\n\nA token with API authority cannot be used to call this endpoint. \n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "operationId": "listAccounts",
        "tags": [
          "Accounts"
        ],
        "summary": "Accounts List",
        "description": "This returns a list of accounts.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account-list:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**identityId**: *eq*\n\n**name**: *eq, in*\n\n**nativeIdentity**: *eq, in*\n\n**sourceId**: *eq, in*\n\n**uncorrelated**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "List of account objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Create Account",
        "description": "This API submits an account creation task and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:create"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAttributes"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "getAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Account Details",
        "description": "This API returns the details for a single account based on the ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An account object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account",
        "description": "This updates account details.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/identityId",
                  "value": "2c9180845d1edece015d27a975983e21"
                }
              ]
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. Update request accepted and is in progress.",
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account",
        "description": "This API submits an account update task and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAttributes"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Delete Account",
        "description": "This API submits an account delete task and returns the task ID. This operation can only be used on Flat File Sources. Any attempt to execute this request on the source of other type will result in an error response with a status code of 400.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/entitlements": {
      "get": {
        "operationId": "getAccountEntitlements",
        "tags": [
          "Accounts"
        ],
        "summary": "Account Entitlements",
        "description": "This API returns entitlements of the account.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account-entitlement:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of account entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Account/allOf/0"
                      },
                      {
                        "type": "object",
                        "description": "Entitlement object that represents entitlement",
                        "properties": {
                          "attribute": {
                            "description": "Name of the entitlement attribute",
                            "type": "string",
                            "example": "authorizationType"
                          },
                          "value": {
                            "description": "Raw value of the entitlement",
                            "type": "string",
                            "example": "CN=Users,dc=sailpoint,dc=com"
                          },
                          "description": {
                            "description": "Entitlment description",
                            "type": "string"
                          },
                          "attributes": {
                            "description": "Entitlement attributes",
                            "type": "object"
                          },
                          "sourceSchemaObjectType": {
                            "description": "Schema objectType on the given application that maps to an Account Group",
                            "type": "string",
                            "example": "group"
                          },
                          "privileged": {
                            "description": "Determines if this Entitlement is privileged.",
                            "type": "boolean"
                          },
                          "cloudGoverned": {
                            "description": "Determines if this Entitlement is goverened in the cloud.",
                            "type": "boolean"
                          },
                          "source": {
                            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                            "description": "Reference to the source this entitlment belongs to.",
                            "example": [
                              {
                                "type": "SOURCE",
                                "id": "2c9180835d191a86015d28455b4b232a",
                                "name": "HR Active Directory"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/reload": {
      "post": {
        "operationId": "reloadAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Reload Account",
        "description": "This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:reload"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/enable": {
      "post": {
        "operationId": "enableAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Enable Account",
        "description": "This API submits a task to enable account and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:enable"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountToggleRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/disable": {
      "post": {
        "operationId": "disableAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Disable Account",
        "description": "This API submits a task to disable the account and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:disable"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountToggleRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/unlock": {
      "post": {
        "operationId": "unlockAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Unlock Account",
        "description": "This API submits a task to unlock an account and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:unlock"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUnlockRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/account-activities": {
      "get": {
        "operationId": "listAccountActivities",
        "tags": [
          "Account Activities"
        ],
        "summary": "Get a list of Account Activities",
        "description": "This gets a collection of account activities that satisfy the given query parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "requested-by",
            "schema": {
              "type": "string"
            },
            "description": "The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "regarding-identity",
            "schema": {
              "type": "string"
            },
            "description": "The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of account activity.",
            "required": false
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n**type**: *eq, in*\n**created**: *gt, lt, ge, le*\n**modified**: *gt, lt, ge, le*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nSorting is supported for the following fields: **type, created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of account activities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountActivity"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/account-activities/{id}": {
      "get": {
        "operationId": "getAccountActivity",
        "tags": [
          "Account Activities"
        ],
        "summary": "Get an Account Activity",
        "description": "This gets a single account activity by its id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account activity id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An account activity object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountActivity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications": {
      "get": {
        "operationId": "listIdentityCertifications",
        "tags": [
          "Certifications"
        ],
        "summary": "Identity Campaign Certifications by IDs",
        "description": "This API returns a list of identity campaign certifications that satisfy the given query parameters. Any authenticated token can call this API, but only certifications you are authorized to review will be returned. This API does not support requests for certifications assigned to Governance Groups.",
        "parameters": [
          {
            "in": "query",
            "name": "reviewer-identity",
            "schema": {
              "type": "string"
            },
            "description": "The ID of reviewer identity. *me* indicates the current user.",
            "required": false
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n**id**: *eq, in*\n**campaign.id**: *eq, in*\n**phase**: *eq*\n**completed**: *eq, ne*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nSorting is supported for the following fields: **name, due, signed**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identity campaign certifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certification"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}": {
      "get": {
        "operationId": "getIdentityCertification",
        "tags": [
          "Certifications"
        ],
        "summary": "Identity Certification by ID",
        "description": "This API returns a single identity campaign certification by its ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An identity campaign certification object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certification"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/access-review-items": {
      "get": {
        "operationId": "listIdentityAccessReviewItems",
        "tags": [
          "Certifications"
        ],
        "summary": "List of Access Review Items",
        "description": "This API returns a list of access review items for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**type / access.type**: *eq*\n\n**completed**: *eq, ne*\n\n**identitySummary.id**: *eq, in*\n\n**identitySummary.name**: *eq, sw*\n\n**access.id**: *eq, in*\n\n**access.name**: *eq, sw*\n\n**entitlement.sourceName**: *eq, sw*\n\n**accessProfile.sourceName**: *eq, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName**"
          },
          {
            "in": "query",
            "name": "entitlements",
            "schema": {
              "type": "string"
            },
            "description": "Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.\n\nAn error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time."
          },
          {
            "in": "query",
            "name": "access-profiles",
            "schema": {
              "type": "string"
            },
            "description": "Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.\n\nAn error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time."
          },
          {
            "in": "query",
            "name": "roles",
            "schema": {
              "type": "string"
            },
            "description": "Filter results to view access review items that pertain to any of the specified comma-separated role IDs.\n\nAn error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of access review items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accessSummary": {
                        "$ref": "#/paths/~1certifications~1%7Bid%7D~1access-summaries~1%7Btype%7D/get/responses/200/content/application~1json/schema/items"
                      },
                      "identitySummary": {
                        "$ref": "#/paths/~1certifications~1%7Bid%7D~1identity-summary~1%7BidentitySummaryId%7D/get/responses/200/content/application~1json/schema"
                      },
                      "id": {
                        "type": "string",
                        "description": "The review item's id",
                        "example": "ef38f94347e94562b5bb8424a56397d8"
                      },
                      "completed": {
                        "type": "boolean",
                        "description": "Whether the review item is complete",
                        "example": false
                      },
                      "newAccess": {
                        "type": "boolean",
                        "description": "Indicates whether the review item is for new access to a source"
                      },
                      "decision": {
                        "$ref": "#/paths/~1certifications~1%7Bid%7D~1decide/post/requestBody/content/application~1json/schema/items/properties/decision"
                      },
                      "comments": {
                        "nullable": true,
                        "type": "string",
                        "description": "Comments for this review item",
                        "example": "This user still needs access to this source"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/decide": {
      "post": {
        "operationId": "makeIdentityDecision",
        "tags": [
          "Certifications"
        ],
        "summary": "Decide on a Certification Item",
        "description": "The API makes a decision to approve or revoke one or more identity campaign certification items. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the identity campaign certification on which to make decisions",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A non-empty array of decisions to be made.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "ef38f94347e94562b5bb8424a56397d8"
                    },
                    "decision": {
                      "type": "string",
                      "description": "The decision to approve or revoke the review item",
                      "enum": [
                        "APPROVE",
                        "REVOKE"
                      ],
                      "example": "APPROVE"
                    },
                    "proposedEndDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date at which a user's access should be taken away. Should only be set for `REVOKE` decisions."
                    },
                    "bulk": {
                      "type": "boolean",
                      "description": "Indicates whether decision should be marked as part of a larger bulk decision",
                      "example": true
                    },
                    "recommendation": {
                      "nullable": true,
                      "type": "object",
                      "properties": {
                        "recommendation": {
                          "type": "string",
                          "description": "The recommendation from IAI at the time of the decision. This field will be null if no recommendation was made."
                        },
                        "reasons": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of reasons for the recommendation."
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time at which the recommendation was recorded.",
                          "example": "2020-06-01T13:49:37.385Z"
                        }
                      }
                    },
                    "comments": {
                      "type": "string",
                      "description": "Comments recorded when the decision was made",
                      "example": "This user no longer needs access to this source"
                    }
                  },
                  "required": [
                    "id",
                    "decision",
                    "bulk"
                  ]
                },
                "minItems": 1,
                "maxItems": 250
              },
              "example": [
                {
                  "id": "ef38f94347e94562b5bb8424a56396b5",
                  "decision": "APPROVE",
                  "bulk": true,
                  "comments": "This user still needs access to this source."
                },
                {
                  "id": "ef38f94347e94562b5bb8424a56397d8",
                  "decision": "APPROVE",
                  "bulk": true,
                  "comments": "This user still needs access to this source too."
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "An identity campaign certification object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certification"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/reassign": {
      "post": {
        "operationId": "reassignIdentityCertifications",
        "tags": [
          "Certifications"
        ],
        "summary": "Reassign Identities or Items",
        "description": "This API reassigns up to 50 identities or items in an identity campaign certification to another reviewer. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessReviewReassignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An identity campaign certification details after completing the reassignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certification"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/sign-off": {
      "post": {
        "operationId": "signOffIdentityCertification",
        "tags": [
          "Certifications"
        ],
        "summary": "Finalize Identity Certification Decisions",
        "description": "This API finalizes all decisions made on an identity campaign certification and initiates any remediations required. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An identity campaign certification object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certification"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/decision-summary": {
      "get": {
        "operationId": "getIdentityDecisionSummary",
        "tags": [
          "Certification Summaries"
        ],
        "summary": "Summary of Certification Decisions",
        "description": "This API returns a summary of the decisions made on an identity campaign certification. The decisions are summarized by type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**identitySummary.id**: *eq, in*"
          }
        ],
        "responses": {
          "200": {
            "description": "Summary of the decisions made",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entitlementDecisionsMade": {
                      "type": "integer",
                      "description": "Number of entitlement decisions that have been made",
                      "example": 3
                    },
                    "accessProfileDecisionsMade": {
                      "type": "integer",
                      "description": "Number of access profile decisions that have been made",
                      "example": 5
                    },
                    "roleDecisionsMade": {
                      "type": "integer",
                      "description": "Number of role decisions that have been made",
                      "example": 2
                    },
                    "accountDecisionsMade": {
                      "type": "integer",
                      "description": "Number of account decisions that have been made",
                      "example": 4
                    },
                    "entitlementDecisionsTotal": {
                      "type": "integer",
                      "description": "The total number of entitlement decisions on the certification, both complete and incomplete",
                      "example": 6
                    },
                    "accessProfileDecisionsTotal": {
                      "type": "integer",
                      "description": "The total number of access profile decisions on the certification, both complete and incomplete",
                      "example": 10
                    },
                    "roleDecisionsTotal": {
                      "type": "integer",
                      "description": "The total number of role decisions on the certification, both complete and incomplete",
                      "example": 4
                    },
                    "accountDecisionsTotal": {
                      "type": "integer",
                      "description": "The total number of account decisions on the certification, both complete and incomplete",
                      "example": 8
                    },
                    "entitlementsApproved": {
                      "type": "integer",
                      "description": "The number of entitlement decisions that have been made which were approved",
                      "example": 2
                    },
                    "entitlementsRevoked": {
                      "type": "integer",
                      "description": "The number of entitlement decisions that have been made which were revoked",
                      "example": 1
                    },
                    "accessProfilesApproved": {
                      "type": "integer",
                      "description": "The number of access profile decisions that have been made which were approved",
                      "example": 3
                    },
                    "accessProfilesRevoked": {
                      "type": "integer",
                      "description": "The number of access profile decisions that have been made which were revoked",
                      "example": 2
                    },
                    "rolesApproved": {
                      "type": "integer",
                      "description": "The number of role decisions that have been made which were approved",
                      "example": 2
                    },
                    "rolesRevoked": {
                      "type": "integer",
                      "description": "The number of role decisions that have been made which were revoked",
                      "example": 0
                    },
                    "accountsApproved": {
                      "type": "integer",
                      "description": "The number of account decisions that have been made which were approved",
                      "example": 1
                    },
                    "accountsRevoked": {
                      "type": "integer",
                      "description": "The number of account decisions that have been made which were revoked",
                      "example": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/identity-summaries": {
      "get": {
        "operationId": "getIdentitySummaries",
        "tags": [
          "Certification Summaries"
        ],
        "summary": "Identity Summaries for Identity Campaign Certification",
        "description": "This API returns a list of the identity summaries for a specific identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**completed**: *eq, ne*\n\n**name**: *eq, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identity summaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1certifications~1%7Bid%7D~1identity-summary~1%7BidentitySummaryId%7D/get/responses/200/content/application~1json/schema"
                  }
                },
                "example": [
                  {
                    "id": "2c91808772a504f50172a9540e501ba7",
                    "name": "Aaron Grey",
                    "identityId": "2c9180857182306001719937379633e4",
                    "completed": false
                  },
                  {
                    "id": "2c91808772a504f50172a9540e501ba8",
                    "name": "Aglae Wilson",
                    "identityId": "2c9180857182306001719937377a33de",
                    "completed": true
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/access-summaries/{type}": {
      "get": {
        "operationId": "getIdentityAccessSummaries",
        "tags": [
          "Certification Summaries"
        ],
        "summary": "Access Summaries",
        "description": "This API returns a list of access summaries for the specified identity campaign certification and type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ROLE",
                "ACCESS_PROFILE",
                "ENTITLEMENT"
              ]
            },
            "required": true,
            "description": "The type of access review item to retrieve summaries for",
            "example": "ACCESS_PROFILE"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**completed**: *eq, ne*\n\n**access.id**: *eq, in*\n\n**access.name**: *eq, sw*\n\n**entitlement.sourceName**: *eq, sw*\n\n**accessProfile.sourceName**: *eq, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **access.name**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of access summaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "An object holding the access that is being reviewed",
                    "properties": {
                      "access": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "The type of item being certified",
                            "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type"
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the item being certified",
                            "example": "2c9180867160846801719932c5153fb7"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the item being certified",
                            "example": "Entitlement for Company Database"
                          }
                        }
                      },
                      "entitlement": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id for the entitlement",
                            "example": "2c918085718230600171993742c63558"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the entitlement",
                            "example": "CN=entitlement.bbb7c650"
                          },
                          "description": {
                            "nullable": true,
                            "type": "string",
                            "description": "Information about the entitlement",
                            "example": "Gives read/write access to the company database"
                          },
                          "privileged": {
                            "type": "boolean",
                            "example": false,
                            "description": "Indicates if the entitlement is a privileged entitlement"
                          },
                          "owner": {
                            "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail"
                          },
                          "attributeName": {
                            "type": "string",
                            "description": "The name of the attribute on the source",
                            "example": "memberOf"
                          },
                          "attributeValue": {
                            "type": "string",
                            "description": "The value of the attribute on the source",
                            "example": "CN=entitlement.bbb7c650"
                          },
                          "sourceSchemaObjectType": {
                            "type": "string",
                            "description": "The schema object type on the source used to represent the entitlement and its attributes",
                            "example": "groups"
                          },
                          "sourceName": {
                            "type": "string",
                            "description": "The name of the source for which this entitlement belongs",
                            "example": "ODS-AD-Source"
                          },
                          "sourceType": {
                            "type": "string",
                            "description": "The type of the source for which the entitlement belongs",
                            "example": "Active Directory - Direct"
                          },
                          "hasPermissions": {
                            "type": "boolean",
                            "description": "Indicates if the entitlement has permissions",
                            "example": false
                          },
                          "isPermission": {
                            "type": "boolean",
                            "description": "Indicates if the entitlement is a representation of an account permission",
                            "example": false
                          },
                          "revocable": {
                            "type": "boolean",
                            "description": "Indicates whether the entitlement can be revoked",
                            "example": true
                          },
                          "cloudGoverned": {
                            "type": "boolean",
                            "description": "True if the entitlement is cloud governed"
                          },
                          "account": {
                            "type": "object",
                            "nullable": true,
                            "description": "Information about the status of the entitlement",
                            "properties": {
                              "nativeIdentity": {
                                "type": "string",
                                "description": "The native identity for this account",
                                "example": "CN=Alison Ferguso"
                              },
                              "disabled": {
                                "type": "boolean",
                                "example": false,
                                "description": "Indicates whether this account is currently disabled"
                              },
                              "locked": {
                                "type": "boolean",
                                "example": false,
                                "description": "Indicates whether this account is currently locked"
                              },
                              "type": {
                                "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type"
                              },
                              "id": {
                                "nullable": true,
                                "type": "string",
                                "description": "The id associated with the account",
                                "example": "2c9180857182305e0171993737eb29e6"
                              },
                              "name": {
                                "nullable": true,
                                "type": "string"
                              },
                              "created": {
                                "nullable": true,
                                "type": "string",
                                "format": "date-time",
                                "description": "When the account was created",
                                "example": "2020-04-20T20:11:05.067Z"
                              },
                              "modified": {
                                "nullable": true,
                                "type": "string",
                                "format": "date-time",
                                "description": "When the account was last modified",
                                "example": "2020-05-20T18:57:16.987Z"
                              }
                            }
                          }
                        }
                      },
                      "accessProfile": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the Access Profile",
                            "example": "2c91808a7190d06e01719938fcd20792"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the Access Profile",
                            "example": "Employee-database-read-write"
                          },
                          "description": {
                            "type": "string",
                            "description": "Information about the Access Profile",
                            "example": "Collection of entitlements to read/write the employee database"
                          },
                          "privileged": {
                            "type": "boolean",
                            "description": "Indicates if the entitlement is a privileged entitlement"
                          },
                          "cloudGoverned": {
                            "type": "boolean",
                            "description": "True if the entitlement is cloud governed"
                          },
                          "endDate": {
                            "nullable": true,
                            "type": "string",
                            "format": "date-time",
                            "description": "The date at which a user's access expires",
                            "example": "2021-12-25T00:00:00.000Z"
                          },
                          "owner": {
                            "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail",
                            "description": "Owner of the Access Profile"
                          },
                          "entitlements": {
                            "type": "array",
                            "description": "A list of entitlements associated with this Access Profile",
                            "items": {
                              "$ref": "#/paths/~1certifications~1%7Bid%7D~1access-summaries~1%7Btype%7D/get/responses/200/content/application~1json/schema/items/properties/entitlement"
                            }
                          },
                          "created": {
                            "type": "string",
                            "description": "Date the Access Profile was created.",
                            "format": "date-time",
                            "example": "2021-01-01T22:32:58.104Z"
                          },
                          "modified": {
                            "type": "string",
                            "description": "Date the Access Profile was last modified.",
                            "format": "date-time",
                            "example": "2021-02-01T22:32:58.104Z"
                          }
                        }
                      },
                      "role": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id for the Role",
                            "example": "2c91808a7190d06e0171993907fd0794"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the Role",
                            "example": "Accounting-Employees"
                          },
                          "description": {
                            "type": "string",
                            "description": "Information about the Role",
                            "example": "Role for members of the accounting department with the necessary Access Profiles"
                          },
                          "privileged": {
                            "type": "boolean",
                            "description": "Indicates if the entitlement is a privileged entitlement"
                          },
                          "owner": {
                            "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail"
                          },
                          "revocable": {
                            "type": "boolean",
                            "description": "Indicates whether the Role can be revoked or requested"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date when a user's access expires.",
                            "example": "2021-12-25T00:00:00.000Z"
                          },
                          "accessProfiles": {
                            "type": "array",
                            "description": "The list of Access Profiles associated with this Role",
                            "items": {
                              "$ref": "#/paths/~1certifications~1%7Bid%7D~1access-summaries~1%7Btype%7D/get/responses/200/content/application~1json/schema/items/properties/accessProfile"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "access": {
                      "type": "ENTITLEMENT",
                      "id": "2c9180857182305e01719937429e2bad",
                      "name": "CN=Engineering"
                    },
                    "entitlement": {
                      "id": "2c9180857182305e01719937429e2bad",
                      "name": "CN=Engineering",
                      "description": "Access to the engineering database",
                      "privileged": false,
                      "owner": {
                        "email": "brandon.gray@acme-solar.com",
                        "type": "IDENTITY",
                        "id": "2c9180867160846801719932c5153fb7",
                        "name": "Brandon Gray"
                      },
                      "attributeName": "memberOf",
                      "attributeValue": "CN=Engineering",
                      "sourceName": "ODS-AD-Source",
                      "hasPermissions": true,
                      "revocable": true
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/identity-summary/{identitySummaryId}": {
      "get": {
        "operationId": "getIdentitySummary",
        "tags": [
          "Certification Summaries"
        ],
        "summary": "Summary for Identity",
        "description": "This API returns the summary for an identity on a specified identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "identitySummaryId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity summary ID",
            "example": "2c91808772a504f50172a9540e501ba8"
          }
        ],
        "responses": {
          "200": {
            "description": "An identity summary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the identity summary",
                      "example": "2c91808772a504f50172a9540e501ba7"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the linked identity",
                      "example": "Alison Ferguso"
                    },
                    "identityId": {
                      "type": "string",
                      "description": "The ID of the identity being certified",
                      "example": "2c9180857182306001719937377a33de"
                    },
                    "completed": {
                      "type": "boolean",
                      "description": "Indicates whether the review items for the linked identity's certification have been completed"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/identities/{identity-id}/set-lifecycle-state": {
      "post": {
        "operationId": "setLifecycleState",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Set Lifecycle State",
        "description": "This endpoint will set/update an identity's lifecycle state to the one provided and updates the corresponding Identity Profile.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:identity-lifecycle-state:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identity-id",
            "description": "The ID of the identity to update",
            "required": true,
            "example": "2c9180857893f1290178944561990364",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lifecycleStateId": {
                    "type": "string",
                    "description": "The ID of the lifecycle state to set",
                    "example": "2c9180877a86e408017a8c19fefe046c"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accountActivityId": {
                      "type": "string",
                      "example": "2c9180837ab5b716017ab7c6c9ef1e20",
                      "description": "The ID of the IdentityRequest object that was generated when the workflow launches"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/identity-profiles/{identity-profile-id}/lifecycle-states": {
      "get": {
        "operationId": "listLifecycleStates",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Lists LifecycleStates",
        "description": "This end-point lists all the LifecycleStates associated with IdentityProfiles.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-lifecycle-state:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "The IdentityProfile id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of LifecycleState objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1identity-profiles~1%7Bidentity-profile-id%7D~1lifecycle-states/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createLifecycleState",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Create Lifecycle State",
        "description": "This API creates a new Lifecycle State.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-lifecycle-state:create"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Lifecycle State",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Account/allOf/0"
                  },
                  {
                    "type": "object",
                    "required": [
                      "technicalName"
                    ],
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether the lifecycle state is enabled or disabled."
                      },
                      "technicalName": {
                        "type": "string",
                        "description": "The technical name for lifecycle state. This is for internal use."
                      },
                      "description": {
                        "type": "string",
                        "description": "Lifecycle state description."
                      },
                      "identityCount": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of identities that have the lifecycle state."
                      },
                      "emailNotificationOption": {
                        "type": "object",
                        "description": "This is used for representing email configuration for a lifecycle state",
                        "properties": {
                          "notifyManagers": {
                            "type": "boolean",
                            "description": "If true, then the manager is notified of the lifecycle state change."
                          },
                          "notifyAllAdmins": {
                            "type": "boolean",
                            "description": "If true, then all the admins are notified of the lifecycle state change."
                          },
                          "notifySpecificUsers": {
                            "type": "boolean",
                            "description": "If true, then the users specified in \"emailAddressList\" below are notified of lifecycle state change."
                          },
                          "emailAddressList": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of user email addresses. If \"notifySpecificUsers\" option is true, then these users are notified of lifecycle state change."
                          }
                        }
                      },
                      "accountActions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "Object for specifying Actions to be performed on a specified list of sources' account.",
                          "properties": {
                            "action": {
                              "type": "string",
                              "enum": [
                                "ENABLE",
                                "DISABLE"
                              ]
                            },
                            "sourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "uniqueItems": true,
                              "example": [
                                "2c918084660f45d6016617daa9210584",
                                "2c918084660f45d6016617daa9210500"
                              ],
                              "description": "List of unique source IDs. The sources must have the ENABLE feature or flat file source. See \"/sources\" endpoint for source features."
                            }
                          }
                        }
                      },
                      "accessProfileIds": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "uniqueItems": true,
                        "example": [
                          "2c918084660f45d6016617daa9210584",
                          "2c918084660f45d6016617daa9210500"
                        ],
                        "description": "List of unique access-profile IDs that are associated with the lifecycle state."
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created LifecycleState object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1identity-profiles~1%7Bidentity-profile-id%7D~1lifecycle-states/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}": {
      "get": {
        "operationId": "getLifecycleState",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Retrieves Lifecycle State",
        "description": "This endpoint retrieves a Lifecycle State.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-lifecycle-state:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested LifecycleState was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1identity-profiles~1%7Bidentity-profile-id%7D~1lifecycle-states/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateLifecycleStates",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Update Lifecycle State",
        "description": "This endpoint updates individual Lifecycle State fields using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-lifecycle-state:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields can be updated:\n* enabled\n* description\n* accountActions\n* accessProfileIds\n* emailNotificationOption\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Updated description!"
                },
                {
                  "op": "replace",
                  "path": "/accessProfileIds",
                  "value": [
                    "2c918087742bab150174407a80f3125e",
                    "2c918087742bab150174407a80f3124f"
                  ]
                },
                {
                  "op": "replace",
                  "path": "/accountActions",
                  "value": [
                    {
                      "action": "ENABLE",
                      "sourceIds": [
                        "2c9180846a2f82fb016a481c1b1560c5",
                        "2c9180846a2f82fb016a481c1b1560cc"
                      ]
                    },
                    {
                      "action": "DISABLE",
                      "sourceIds": [
                        "2c91808869a0c9980169a207258513fb"
                      ]
                    }
                  ]
                },
                {
                  "op": "replace",
                  "path": "/emailNotificationOption",
                  "value": {
                    "notifyManagers": true,
                    "notifyAllAdmins": false,
                    "notifySpecificUsers": false,
                    "emailAddressList": []
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The LifecycleState was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1identity-profiles~1%7Bidentity-profile-id%7D~1lifecycle-states/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteLifecycleState",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Delete Lifecycle State by ID",
        "description": "This endpoint deletes the Lifecycle State using it's ID.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-lifecycle-state:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/identity-profiles": {
      "get": {
        "operationId": "listIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Identity Profiles List",
        "description": "This returns a list of Identity Profiles based on the specified query parameters.\nA token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ne*\n\n**name**: *eq, ne*\n\n**priority**: *eq, ne*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **id**, **name**, **priority**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identityProfiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProfile"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:read"
            ]
          }
        ]
      }
    },
    "/identity-profiles/export": {
      "get": {
        "operationId": "exportIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Export Identity Profiles",
        "description": "This exports existing identity profiles in the format specified by the sp-config service.",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ne*\n\n**name**: *eq, ne*\n\n**priority**: *eq, ne*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **id**, **name**, **priority**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of export objects with identity profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1identity-profiles~1import/post/requestBody/content/application~1json/schema/items"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:read"
            ]
          }
        ]
      }
    },
    "/identity-profiles/import": {
      "post": {
        "operationId": "importIdentityProfiles",
        "summary": "Import Identity Profiles",
        "description": "This imports previously exported identity profiles.",
        "tags": [
          "Identity Profiles"
        ],
        "requestBody": {
          "description": "Previously exported Identity Profiles.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Identity Profile exported object",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "example": 1,
                      "description": "Version or object from the target service."
                    },
                    "self": {
                      "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                    },
                    "object": {
                      "$ref": "#/components/schemas/IdentityProfile"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The result of importing Identity Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Import Object Response Body",
                  "description": "Response model for import of a single object.",
                  "properties": {
                    "infos": {
                      "description": "Informational messages returned from the target service on import.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Config Import/Export Message",
                        "description": "Message model for Config Import/Export.",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Message key.",
                            "example": "UNKNOWN_REFERENCE_RESOLVER"
                          },
                          "text": {
                            "type": "string",
                            "description": "Message text.",
                            "example": "Unable to resolve reference for object [type: IDENTITY, id: 2c91808c746e9c9601747d6507332ecz, name: random identity]"
                          },
                          "details": {
                            "type": "object",
                            "description": "Message details if any, in key:value pairs.",
                            "additionalProperties": {
                              "type": "object"
                            },
                            "example": {
                              "details": "message details"
                            }
                          }
                        },
                        "required": [
                          "key",
                          "text",
                          "details"
                        ]
                      }
                    },
                    "warnings": {
                      "description": "Warning messages returned from the target service on import.",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1identity-profiles~1import/post/responses/200/content/application~1json/schema/properties/infos/items"
                      }
                    },
                    "errors": {
                      "description": "Error messages returned from the target service on import.",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1identity-profiles~1import/post/responses/200/content/application~1json/schema/properties/infos/items"
                      }
                    },
                    "importedObjects": {
                      "description": "References to objects that were created or updated by the import.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                      }
                    }
                  },
                  "required": [
                    "infos",
                    "warnings",
                    "errors",
                    "importedObjects"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:create"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}": {
      "get": {
        "operationId": "getIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Get single Identity Profile",
        "description": "This returns a single Identity Profile based on ID.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An Identity Profile object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:read"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/default-identity-attribute-config": {
      "get": {
        "operationId": "getDefaultIdentityAttributeConfig",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Get default Identity Attribute Config",
        "description": "This returns the default identity attribute config.\nA token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An Identity Attribute Config object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile/allOf/1/properties/identityAttributeConfig"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-default-mapping:read"
            ]
          }
        ]
      }
    },
    "/non-employee-records": {
      "post": {
        "operationId": "nonEmployeeRecordCreation",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create Non-Employee Record",
        "description": "This request will create a non-employee record.<br><br>\nRequires role context of `idn:nesr:create` ",
        "requestBody": {
          "description": "Non-Employee record creation request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "type": "string",
                    "description": "Requested identity account name.",
                    "example": "william.smith"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "Non-Employee's first name.",
                    "example": "William"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Non-Employee's last name.",
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "description": "Non-Employee's email.",
                    "example": "william.smith@example.com"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Non-Employee's phone.",
                    "example": "5555555555"
                  },
                  "manager": {
                    "type": "string",
                    "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                    "example": "jane.doe"
                  },
                  "sourceId": {
                    "type": "string",
                    "description": "Non-Employee's source id.",
                    "example": "2c91808568c529c60168cca6f90c1313"
                  },
                  "data": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Attribute blob/bag for a non-employee, 10 attributes is the maximum size supported."
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Non-Employee employment start date.",
                    "example": "2020-03-24T00:00:00-05:00"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Non-Employee employment end date.",
                    "example": "2021-03-25T00:00:00-05:00"
                  }
                },
                "required": [
                  "accountName",
                  "firstName",
                  "lastName",
                  "email",
                  "phone",
                  "manager",
                  "sourceId",
                  "startDate",
                  "endDate"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "UUID",
                      "description": "Non-Employee record id."
                    },
                    "accountName": {
                      "type": "string",
                      "description": "Requested identity account name."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Non-Employee's first name.",
                      "example": "William"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Non-Employee's last name.",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "description": "Non-Employee's email.",
                      "example": "william.smith@example.com"
                    },
                    "phone": {
                      "type": "string",
                      "description": "Non-Employee's phone.",
                      "example": "5555555555"
                    },
                    "manager": {
                      "type": "string",
                      "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                      "example": "jane.doe"
                    },
                    "sourceId": {
                      "type": "string",
                      "description": "Non-Employee's source id.",
                      "example": "2c91808568c529c60168cca6f90c1313"
                    },
                    "data": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Attribute blob/bag for a non-employee."
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Non-Employee employment start date.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Non-Employee employment end date.",
                      "example": "2020-08-23T18:52:59.162Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the request was last modified.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the request was created.",
                      "example": "2019-08-23T18:40:35.772Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "nonEmployeeRecordList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Non-Employee Records",
        "description": "This gets a list of non-employee records.<br><br> There are two contextual uses for this endpoint:<br>\n  1. The user has the role context of `idn:nesr:read`, in which case they can get a list of all of the non-employees.<br>\n  2. The user is an account manager, in which case they can get a list of the non-employees that they manage.",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407)<br/><br/> Filtering is supported for the following fields and operators:<br/><br/> **sourceId**: *eq* <br/><br/> *Example:* sourceId eq \"2c91808568c529c60168cca6f90c1313\""
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee record objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-records/{id}": {
      "get": {
        "operationId": "nonEmployeeRecordGet",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a Non-Employee Record",
        "description": "This gets a non-employee record.<br><br>\nRequires role context of `idn:nesr:read`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee record object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "nonEmployeeRecordUpdate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Update Non-Employee Record",
        "description": "This request will update a non-employee record.<br><br> There are two contextual uses for this endpoint:<br>\n  1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.<br>\n  2. The user is owner of the source, in this case they can only update the end date. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1non-employee-records/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An updated non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "nonEmployeeRecordPatch",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch Non-Employee Record",
        "description": "This request will patch a non-employee record.<br><br> There are two contextual uses for this endpoint:<br>\n  1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.<br>\n  2. The user is owner of the source, in this case they can only update the end date. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/endDate",
                  "value": "2019-08-23T18:40:35.772Z"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "A patched non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "nonEmployeeRecordDelete",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Non-Employee Record",
        "description": "This request will delete a non-employee record.<br><br>\nRequires role context of `idn:nesr:delete`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-records/bulk-delete": {
      "post": {
        "operationId": "nonEmployeeRecordBulkDelete",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Multiple Non-Employee Records",
        "description": "This request will delete multiple non-employee records based on the non-employee ids provided.<br><br> Requires role context of `idn:nesr:delete`",
        "requestBody": {
          "description": "Non-Employee bulk delete request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "List of non-employee ids.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-requests": {
      "post": {
        "operationId": "nonEmployeeRequestCreation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create Non-Employee Request",
        "description": "This request will create a non-employee request and notify the approver.<br><br> Requires role context of `idn:nesr:create` or the user must own the source.",
        "requestBody": {
          "description": "Non-Employee creation request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1non-employee-records/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee request creation object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "Non-Employee source id.",
                          "example": "a0303682-5e4a-44f7-bdc2-6ce6112549c1"
                        },
                        "sourceId": {
                          "type": "string",
                          "description": "Source Id associated with this non-employee source.",
                          "example": "2c91808568c529c60168cca6f90c1313"
                        },
                        "name": {
                          "type": "string",
                          "description": "Source name associated with this non-employee source.",
                          "example": "Retail"
                        },
                        "description": {
                          "type": "string",
                          "description": "Source description associated with this non-employee source.",
                          "example": "Source description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "accountName": {
                          "type": "string",
                          "description": "Requested identity account name.",
                          "example": "william.smith"
                        },
                        "firstName": {
                          "type": "string",
                          "description": "Non-Employee's first name.",
                          "example": "William"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Non-Employee's last name.",
                          "example": "Smith"
                        },
                        "email": {
                          "type": "string",
                          "description": "Non-Employee's email.",
                          "example": "william.smith@example.com"
                        },
                        "phone": {
                          "type": "string",
                          "description": "Non-Employee's phone.",
                          "example": "5555555555"
                        },
                        "manager": {
                          "type": "string",
                          "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                          "example": "jane.doe"
                        },
                        "nonEmployeeSource": {
                          "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/0"
                        },
                        "data": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Attribute blob/bag for a non-employee."
                        },
                        "approvalItems": {
                          "description": "List of approval item for the request",
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/0"
                          }
                        },
                        "approvalStatus": {
                          "type": "string",
                          "enum": [
                            "APPROVED",
                            "REJECTED",
                            "PENDING",
                            "NOT_READY",
                            "CANCELLED"
                          ],
                          "description": "Enum representing the non-employee request approval status"
                        },
                        "comment": {
                          "type": "string",
                          "description": "comment of requester"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was completely approved.",
                          "example": "2020-03-24T11:11:41.139-05:00"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Non-Employee employment start date.",
                          "example": "2020-03-24T00:00:00-05:00"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Non-Employee employment end date.",
                          "example": "2021-03-25T00:00:00-05:00"
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was last modified.",
                          "example": "2020-03-24T11:11:41.139-05:00"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was created.",
                          "example": "2020-03-24T11:11:41.139-05:00"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7Bid%7D~1non-employee-bulk-upload/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "400.1 Bad Request Content": {
                    "description": "Response for bad request content",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "e7eab60924f64aa284175b9fa3309599",
                      "messages": [
                        {
                          "local": "en",
                          "localeOrigin": "REQUEST",
                          "text": "firstName is required; accountName is required;"
                        }
                      ]
                    }
                  },
                  "400.1.409 Reference conflict": {
                    "description": "Response for reference conflict",
                    "value": {
                      "detailCode": "400.1.409 Reference conflict",
                      "trackingId": "e7eab60924f64aa284175b9fa3309599",
                      "messages": [
                        {
                          "local": "en",
                          "localeOrigin": "REQUEST",
                          "text": "Unable to create Non-Employee because the accountName \"existed\" is already being used."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "nonEmployeeRequestList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Non-Employee Requests",
        "description": "This gets a list of non-employee requests.<br><br> There are two contextual uses for the `requested-for` path parameter:<br>\n  1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list non-employee requests assigned to a particular account manager by passing in that manager's id.<br>\n  2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the non-employee requests in the source(s) he or she manages.",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user."
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407)<br/><br/> Filtering is supported for the following fields and operators:<br/><br/> **sourceId**: *eq* <br/><br/> *Example:* sourceId eq \"2c91808568c529c60168cca6f90c1313\""
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-employee request objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-requests/{id}": {
      "get": {
        "operationId": "nonEmployeeRequestGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a Non-Employee Request",
        "description": "This gets a non-employee request.<br><br>\nThere are two contextual uses for this endpoint:<br>\n  1. The user has the role context of `idn:nesr:read`, in this case the user can get the non-employee request for any user.<br>\n  2. The user must be the owner of the non-employee request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee request id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee request object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "nonEmployeeRequestDeletion",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Non-Employee Request",
        "description": "This request will delete a non-employee request.<br><br> \nRequires role context of `idn:nesr:delete`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee request id in the UUID format",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-requests/summary/{requested-for}": {
      "get": {
        "operationId": "nonEmployeeRequestSummaryGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get Summary of Non-Employee Requests",
        "description": "This request will retrieve a summary of non-employee requests.<br><br> There are two contextual uses for the `requested-for` path parameter:<br>\n  1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager's id.<br>\n  2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.",
        "parameters": [
          {
            "in": "path",
            "name": "requested-for",
            "description": "The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid (if user is Org Admin)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee request summary object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "approved": {
                      "type": "number",
                      "description": "The number of approved non-employee requests on all sources that *requested-for* user manages."
                    },
                    "rejected": {
                      "type": "number",
                      "description": "The number of rejected non-employee requests on all sources that *requested-for* user manages."
                    },
                    "pending": {
                      "type": "number",
                      "description": "The number of pending non-employee requests on all sources that *requested-for* user manages."
                    },
                    "nonEmployeeCount": {
                      "type": "number",
                      "description": "The number of non-employee records on all sources that *requested-for* user manages."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources": {
      "post": {
        "operationId": "nonEmployeeSourcesCreation",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create Non-Employee Source",
        "description": "This request will create a non-employee source.<br><br> Requires role context of `idn:nesr:create`",
        "requestBody": {
          "description": "Non-Employee source creation request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of non-employee source.",
                    "example": "Retail"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of non-employee source.",
                    "example": "Source description"
                  },
                  "owner": {
                    "description": "Owner of non-employee source.",
                    "$ref": "#/paths/~1non-employee-sources/post/requestBody/content/application~1json/schema/properties/approvers/items"
                  },
                  "managementWorkgroup": {
                    "type": "string",
                    "description": "The ID for the management workgroup that contains source sub-admins",
                    "example": "123299"
                  },
                  "approvers": {
                    "description": "List of approvers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "Identity id.",
                          "example": "2c91808570313110017040b06f344ec9"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    "maxItems": 3
                  },
                  "accountManagers": {
                    "description": "List of account managers.",
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1non-employee-sources/post/requestBody/content/application~1json/schema/properties/approvers/items"
                    },
                    "maxItems": 10
                  }
                },
                "required": [
                  "owner",
                  "name",
                  "description"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created non-employee source.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "cloudExternalId": {
                          "type": "string",
                          "description": "Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.",
                          "example": "99999"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "nonEmployeeSourcesList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Non-Employee Sources",
        "description": "This gets a list of non-employee sources.<br><br> There are two contextual uses for the requested-for path parameter: <br>\n  1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list sources assigned to a particular account manager by passing in that manager's id.<br>\n  2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the sources that he or she owns.",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user."
          },
          {
            "in": "query",
            "name": "non-employee-count",
            "schema": {
              "type": "boolean"
            },
            "description": "The flag to determine whether return a non-employee count associate with source."
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **name, created**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-employee sources objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "nonEmployeeCount": {
                            "type": "number",
                            "description": "Number of non-employee records associated with this source."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}": {
      "get": {
        "operationId": "nonEmployeeSourceGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a Non-Employee Source",
        "description": "This gets a non-employee source.<br><br> There are two contextual uses for the requested-for path parameter: <br>\n  1. The user has the role context of `idn:nesr:read`, in which case he or she may request any source.<br>\n  2. The current user is an account manager, in which case the user can only request sources that they own.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee source object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "approvers": {
                          "description": "List of approvers",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "GOVERNANCE_GROUP",
                                  "IDENTITY"
                                ],
                                "example": "IDENTITY"
                              },
                              "id": {
                                "type": "string",
                                "description": "Identity id",
                                "example": "5168015d32f890ca15812c9180835d2e"
                              }
                            }
                          }
                        },
                        "accountManagers": {
                          "description": "List of account managers",
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema/allOf/1/properties/approvers/items"
                          }
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was last modified.",
                          "example": "2019-08-23T18:52:59.162Z"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was created.",
                          "example": "2019-08-23T18:40:35.772Z"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "nonEmployeeSourcePatch",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch a Non-Employee Source (Partial Update)",
        "description": "patch a non-employee source. <br/> Patchable field: **name, description, approvers, accountManagers**<br><br> Requires role context of `idn:nesr:update`.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": {
                    "new name": null
                  }
                },
                {
                  "op": "replace",
                  "path": "/approvers",
                  "value": [
                    "2c91809f703bb37a017040a2fe8748c7",
                    "48b1f463c9e8427db5a5071bd81914b8"
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "A patched non-employee source object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "nonEmployeeSourceDelete",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Non-Employee Source",
        "description": "This request will delete a non-employee source.<br><br> Requires role context of `idn:nesr:delete`.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employees/download": {
      "get": {
        "operationId": "nonEmployeeRecordsExport",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Exports Non-Employee Records to CSV",
        "description": "This requests a CSV download for all non-employees from a provided source.<br><br> Requires role context of `idn:nesr:read`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported CSV",
            "content": {
              "text/csv": {
                "example": "accountName,firstName,lastName,phone,email,manager,startDate,endDate\nJon.Smith, Jon, Smith, 555-555-5555, jon@jon.doe.nope.com, Jim Smith, 2020-04-05T08:00:00-10:00,2020-08-07T19:00:00-10:00\nWilliam.Chaffin, William, Chaffin, 555-555-5555, william@chaffins.nope.com, Bertram Chaffin, 2020-04-05T08:00:00-10:00,2020-08-07T19:00:00-10:00\n"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employee-bulk-upload": {
      "post": {
        "operationId": "nonEmployeeRecordsBulkUpload",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Imports, or Updates, Non-Employee Records",
        "description": "This post will import, or update, Non-Employee records found in the CSV.<br><br> Requires role context of `idn:nesr:create`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The form-data \"name\" attribute for the file content must be \"data\". See the schema specification.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "base64"
                  }
                },
                "required": [
                  "data"
                ]
              },
              "example": {
                "data": "accountName,firstName,lastName,phone,email,manager,startDate,endDate Jon.Smith, Jon, Smith, 555-555-5555, jon@jon.doe.nope.com, Jim Smith, 2020-04-05T08:00:00-10:00, 2020-08-07T19:00:00-10:00 William.Chaffin, William, Chaffin, 555-555-5555, william@chaffins.nope.com, Bertram Chaffin, 2020-04-05T08:00:00-10:00, 2020-08-07T19:00:00-10:00"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The CSV was accepted to be bulk inserted now or at a later time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The bulk upload job's ID. (UUID)",
                      "example": "2c91808568c529c60168cca6f90cffff"
                    },
                    "sourceId": {
                      "type": "string",
                      "description": "The ID of the source to bulk-upload non-employees to. (UUID)",
                      "example": "2c91808568c529c60168cca6f90c1313"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time the job was submitted.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time that the job was last updated.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "ERROR"
                      ],
                      "description": "Returns the following values indicating the progress or result of the bulk upload job.\n\"PENDING\" means the job is queued and waiting to be processed.\n\"IN_PROGRESS\" means the job is currently being processed.\n\"COMPLETED\" means the job has been completed without any errors.\n\"ERROR\" means the job failed to process with errors.\n",
                      "example": "PENDING"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\nThe response body will contain the list of specific errors with one on each line.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "description": "Fine-grained error code providing more detail of the error.",
                      "example": "400.1 Bad Request Content"
                    },
                    "trackingId": {
                      "type": "string",
                      "description": "Unique tracking id for the error.",
                      "example": "e7eab60924f64aa284175b9fa3309599"
                    },
                    "messages": {
                      "type": "array",
                      "description": "Generic localized reason for error",
                      "items": {
                        "$ref": "#/paths/~1non-employee-sources~1%7Bid%7D~1non-employee-bulk-upload/post/responses/400/content/application~1json/schema/properties/causes/items"
                      }
                    },
                    "causes": {
                      "type": "array",
                      "description": "Plain-text descriptive reasons to provide additional detail to the text provided in the messages field",
                      "items": {
                        "type": "object",
                        "properties": {
                          "locale": {
                            "type": "string",
                            "description": "The locale for the message text, a BCP 47 language tag.",
                            "example": "en-US"
                          },
                          "localeOrigin": {
                            "type": "string",
                            "enum": [
                              "DEFAULT",
                              "REQUEST"
                            ],
                            "description": "An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.",
                            "example": "DEFAULT"
                          },
                          "text": {
                            "type": "string",
                            "description": "Actual text of the error message in the indicated locale.",
                            "example": "The request was syntactically correct but its content is semantically invalid."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employee-bulk-upload/status": {
      "get": {
        "operationId": "nonEmployeeBulkUploadStatus",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Obtain the status of bulk upload on the source",
        "description": "The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.<br><br>\nRequires role context of `idn:nesr:read`\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source ID (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the newest bulk-upload job, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "ERROR"
                      ],
                      "description": "Returns the following values indicating the progress or result of the bulk upload job.\n\"PENDING\" means the job is queued and waiting to be processed.\n\"IN_PROGRESS\" means the job is currently being processed.\n\"COMPLETED\" means the job has been completed without any errors.\n\"ERROR\" means the job failed to process with errors.\nnull means job has been submitted to the source.\n",
                      "example": "PENDING"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/schema-attributes-template/download": {
      "get": {
        "operationId": "nonEmployeeExportSourceSchemaTemplate",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Exports Source Schema Template",
        "description": "This requests a download for the Source Schema Template for a provided source.<br><br> Requires role context of `idn:nesr:read`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported Source Schema Template",
            "content": {
              "text/csv": {
                "example": "accountName,firstName,lastName,phone,email,manager,startDate,endDate\n"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals": {
      "get": {
        "operationId": "nonEmployeeApprovalList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get List of Non-Employee Approval Requests",
        "description": "This gets a list of non-employee approval requests.<br><br>\nThere are two contextual uses for this endpoint:<br>\n  1. The user has the role context of `idn:nesr:read`, in which case they can list the approvals for any approver.<br>\n  2. The user owns the requested approval. ",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user.",
            "required": false
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407)<br/><br/> Filtering is supported for the following fields and operators:<br/><br/> **approvalStatus**: *eq* <br/><br/> *Example:* approvalStatus eq \"PENDING\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of approval items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D~1reject/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}": {
      "get": {
        "operationId": "nonEmployeeApprovalGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a non-employee approval item detail",
        "description": "Gets a non-employee approval item detail.<br><br> There are two contextual uses for this endpoint:<br>\n  1. The user has the role context of `idn:nesr:read`, in which case they can get any approval.<br>\n  2. The user owns the requested approval. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include-detail",
            "description": "The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "Non-Employee approval item id",
                          "example": "2c1e388b-1e55-4b0a-ab5c-897f1204159c"
                        },
                        "approver": {
                          "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema/allOf/1/properties/approvers/items",
                          "description": "Reference to the associated Identity"
                        },
                        "accountName": {
                          "type": "string",
                          "description": "Requested identity account name",
                          "example": "test.account"
                        },
                        "approvalStatus": {
                          "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/1/properties/approvalStatus"
                        },
                        "approvalOrder": {
                          "type": "number",
                          "description": "Approval order",
                          "example": 1
                        },
                        "comment": {
                          "type": "string",
                          "description": "comment of approver"
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was last modified.",
                          "example": "2019-08-23T18:52:59.162Z"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was created.",
                          "example": "2019-08-23T18:40:35.772Z"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmployeeRequest": {
                          "description": "Non-Employee request associated to this approval",
                          "allOf": [
                            {
                              "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D~1reject/post/responses/200/content/application~1json/schema/allOf/1/properties/nonEmployeeRequest"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "accountName": {
                                  "type": "string",
                                  "description": "Requested identity account name.",
                                  "example": "william.smith"
                                },
                                "firstName": {
                                  "type": "string",
                                  "description": "Non-Employee's first name.",
                                  "example": "William"
                                },
                                "lastName": {
                                  "type": "string",
                                  "description": "Non-Employee's last name.",
                                  "example": "Smith"
                                },
                                "email": {
                                  "type": "string",
                                  "description": "Non-Employee's email.",
                                  "example": "william.smith@example.com"
                                },
                                "phone": {
                                  "type": "string",
                                  "description": "Non-Employee's phone.",
                                  "example": "5555555555"
                                },
                                "manager": {
                                  "type": "string",
                                  "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                                  "example": "jane.doe"
                                },
                                "nonEmployeeSource": {
                                  "allOf": [
                                    {
                                      "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/0"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "schemaAttributes": {
                                          "description": "List of schema attributes associated with this non-employee source.",
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "data": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Attribute blob/bag for a non-employee."
                                },
                                "approvalStatus": {
                                  "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/1/properties/approvalStatus"
                                },
                                "comment": {
                                  "type": "string",
                                  "description": "comment of requester"
                                },
                                "completionDate": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "When the request was completely approved.",
                                  "example": "2020-03-24T11:11:41.139-05:00"
                                },
                                "startDate": {
                                  "type": "string",
                                  "format": "date",
                                  "description": "Non-Employee employment start date.",
                                  "example": "2020-03-24"
                                },
                                "endDate": {
                                  "type": "string",
                                  "format": "date",
                                  "description": "Non-Employee employment end date.",
                                  "example": "2021-03-25"
                                },
                                "modified": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "When the request was last modified.",
                                  "example": "2020-03-24T11:11:41.139-05:00"
                                },
                                "created": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "When the request was created.",
                                  "example": "2020-03-24T11:11:41.139-05:00"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}/approve": {
      "post": {
        "operationId": "nonEmployeeApproveRequest",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Approve a Non-Employee Request",
        "description": "Approves a non-employee approval request and notifies the next approver.<br><br> The current user must be the requested approver.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment on the approval item.",
                    "maxLength": 4000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D~1reject/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}/reject": {
      "post": {
        "operationId": "nonEmployeeRejectRequest",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Reject a Non-Employee Request",
        "description": "This endpoint will reject an approval item request and notify user.<br><br> The current user must be the requested approver.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment on the approval item.",
                    "maxLength": 4000
                  }
                },
                "required": [
                  "comment"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmployeeRequest": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "UUID",
                              "description": "Non-Employee request id."
                            },
                            "requester": {
                              "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema/allOf/1/properties/approvers/items",
                              "example": {
                                "type": "IDENTITY",
                                "id": "2c9180866166b5b0016167c32ef31a66",
                                "name": "William Smith"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/summary/{requested-for}": {
      "get": {
        "operationId": "nonEmployeeApprovalSummary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get Summary of Non-Employee Approval Requests",
        "description": "This request will retrieve a summary of non-employee approval requests.<br><br> There are two contextual uses for the `requested-for` path parameter:<br>\n  1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver's id.<br>\n  2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.",
        "parameters": [
          {
            "in": "path",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "summary of non-employee approval requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "approved": {
                      "type": "number",
                      "description": "The number of approved non-employee approval requests."
                    },
                    "pending": {
                      "type": "number",
                      "description": "The number of pending non-employee approval requests."
                    },
                    "rejected": {
                      "type": "number",
                      "description": "The number of rejected non-employee approval requests."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}/schema-attributes": {
      "get": {
        "operationId": "getSchemaAttributes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Schema Attributes Non-Employee Source",
        "description": "This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.<br><br>\nRequires role context of `idn:nesr:read` or the user must be an account manager of the source.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Schema Attributes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                  },
                  "maxItems": 18
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSchemaAttribute",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create a new Schema Attribute for Non-Employee Source",
        "description": "This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.<br><br>\nRequires role context of `idn:nesr:create`",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the attribute. Only type 'TEXT' is supported for custom attributes.",
                    "example": "TEXT"
                  },
                  "label": {
                    "type": "string",
                    "description": "Label displayed on the UI for this schema attribute.",
                    "example": "Account Name"
                  },
                  "technicalName": {
                    "type": "string",
                    "description": "The technical name of the attribute. Must be unique per source.",
                    "example": "account.name"
                  },
                  "helpText": {
                    "type": "string",
                    "description": "help text displayed by UI.",
                    "example": "The unique identifier for the account"
                  },
                  "placeholder": {
                    "type": "string",
                    "description": "Hint text that fills UI box.",
                    "example": "Enter a unique user name for this account."
                  },
                  "required": {
                    "type": "boolean",
                    "description": "If true, the schema attribute is required for all non-employees in the source",
                    "example": true
                  }
                },
                "required": [
                  "type",
                  "technicalName",
                  "label"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema Attribute created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "UUID",
                      "example": "ac110005-7156-1150-8171-5b292e3e0084",
                      "description": "Schema Attribute Id"
                    },
                    "system": {
                      "type": "boolean",
                      "description": "True if this schema attribute is mandatory on all non-employees sources.",
                      "example": true
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the schema attribute was last modified.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the schema attribute was created.",
                      "example": "2019-08-23T18:40:35.772Z"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "TEXT",
                        "DATE",
                        "IDENTITY"
                      ],
                      "description": "Enum representing the type of data a schema attribute accepts."
                    },
                    "label": {
                      "type": "string",
                      "description": "Label displayed on the UI for this schema attribute.",
                      "example": "Account Name"
                    },
                    "technicalName": {
                      "type": "string",
                      "description": "The technical name of the attribute. Must be unique per source.",
                      "example": "account.name"
                    },
                    "helpText": {
                      "type": "string",
                      "description": "help text displayed by UI.",
                      "example": "The unique identifier for the account"
                    },
                    "placeholder": {
                      "type": "string",
                      "description": "Hint text that fills UI box.",
                      "example": "Enter a unique user name for this account."
                    },
                    "required": {
                      "type": "boolean",
                      "description": "If true, the schema attribute is required for all non-employees in the source",
                      "example": true
                    }
                  },
                  "required": [
                    "type",
                    "technicalName",
                    "label"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaAttributes",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete all custom schema attributes for Non-Employee Source",
        "description": "This end-point deletes all custom schema attributes for a non-employee source.<br><br> Requires role context of `idn:nesr:delete`",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204",
            "description": "All custon Schema Attributes were successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}/schema-attributes/{attributeId}": {
      "get": {
        "operationId": "getSchemaAttribute",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get Schema Attribute Non-Employee Source",
        "description": "This API gets a schema attribute by Id for the specified Non-Employee SourceId.<br><br> Requires role context of `idn:nesr:read` or the user must be an account manager of the source.",
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "The Schema Attribute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSchemaAttribute",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch a Schema Attribute for Non-Employee Source",
        "description": "This end-point patches a specific schema attribute for a non-employee SourceId.<br><br>\nRequires role context of `idn:nesr:update`\n",
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "description": "A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update ':' 'label', 'helpText', 'placeholder', 'required'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/label",
                  "value": {
                    "new attribute label": null
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Schema Attribute was successfully patched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaAttribute",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete a Schema Attribute for Non-Employee Source",
        "description": "This end-point deletes a specific schema attribute for a non-employee source.<br><br>\nRequires role context of `idn:nesr:delete`\n",
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204",
            "description": "The Schema Attribute was successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/oauth-clients": {
      "get": {
        "operationId": "listOauthClients",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "List OAuth Clients",
        "description": "This gets a list of OAuth clients.\nRequest will require the following security scope:\n- 'idn:oathkeeper-client-list:read'",
        "responses": {
          "200": {
            "description": "List of OAuth clients.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Create OAuth Client",
        "description": "This creates an OAuth client.\nRequest will require the following security scope:\n- 'idn:oathkeeper-client:create' - 'idn:oathkeeper-internal-client:create'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "description": "The name of the business the API Client should belong to",
                    "example": "Acme-Solar"
                  },
                  "homepageUrl": {
                    "type": "string",
                    "description": "The homepage URL associated with the owner of the API Client",
                    "example": "http://localhost:12345"
                  },
                  "name": {
                    "type": "string",
                    "description": "A human-readable name for the API Client",
                    "example": "Demo API Client"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the API Client",
                    "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
                  },
                  "accessTokenValiditySeconds": {
                    "type": "string",
                    "description": "The number of seconds an access token generated for this API Client is valid for",
                    "example": 750
                  },
                  "refreshTokenValiditySeconds": {
                    "type": "string",
                    "description": "The number of seconds a refresh token generated for this API Client is valid for",
                    "example": 86400
                  },
                  "redirectUris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of the approved redirect URIs. Provide one or more URIs when assigning the AUTHORIZATION_CODE grant type to a new OAuth Client.",
                    "example": [
                      "http://localhost:12345"
                    ]
                  },
                  "grantTypes": {
                    "type": "array",
                    "items": {
                      "description": "OAuth2 Grant Type",
                      "type": "string",
                      "example": "CLIENT_CREDENTIALS",
                      "enum": [
                        "CLIENT_CREDENTIALS",
                        "AUTHORIZATION_CODE",
                        "REFRESH_TOKEN"
                      ]
                    },
                    "description": "A list of OAuth 2.0 grant types this API Client can be used with",
                    "example": [
                      "AUTHORIZATION_CODE",
                      "CLIENT_CREDENTIALS",
                      "REFRESH_TOKEN"
                    ]
                  },
                  "accessType": {
                    "description": "The access type (online or offline) of this API Client",
                    "example": "OFFLINE",
                    "type": "string",
                    "enum": [
                      "ONLINE",
                      "OFFLINE"
                    ]
                  },
                  "type": {
                    "description": "The type of the API Client (public or confidential)",
                    "example": "CONFIDENTIAL",
                    "type": "string",
                    "enum": [
                      "CONFIDENTIAL",
                      "PUBLIC"
                    ]
                  },
                  "internal": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client can be used for requests internal within the product.",
                    "example": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client is enabled for use",
                    "example": true
                  },
                  "strongAuthSupported": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client supports strong authentication",
                    "example": false
                  },
                  "claimsSupported": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
                    "example": false
                  }
                },
                "required": [
                  "name",
                  "description",
                  "accessTokenValiditySeconds",
                  "grantTypes",
                  "accessType",
                  "enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the OAuth client",
                      "example": "2c9180835d2e5168015d32f890ca1581"
                    },
                    "secret": {
                      "type": "string",
                      "description": "Secret of the OAuth client (This field is only returned on the intial create call.)",
                      "example": "5c32dd9b21adb51c77794d46e71de117a1d0ddb36a7ff941fa28014ab7de2cf3"
                    },
                    "businessName": {
                      "type": "string",
                      "description": "The name of the business the API Client should belong to",
                      "example": "Acme-Solar"
                    },
                    "homepageUrl": {
                      "type": "string",
                      "description": "The homepage URL associated with the owner of the API Client",
                      "example": "http://localhost:12345"
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable name for the API Client",
                      "example": "Demo API Client"
                    },
                    "description": {
                      "type": "string",
                      "description": "A description of the API Client",
                      "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
                    },
                    "accessTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds an access token generated for this API Client is valid for",
                      "example": 750
                    },
                    "refreshTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds a refresh token generated for this API Client is valid for",
                      "example": 86400
                    },
                    "redirectUris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of the approved redirect URIs used with the authorization_code flow",
                      "example": [
                        "http://localhost:12345"
                      ]
                    },
                    "grantTypes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/grantTypes/items"
                      },
                      "description": "A list of OAuth 2.0 grant types this API Client can be used with",
                      "example": [
                        "AUTHORIZATION_CODE",
                        "CLIENT_CREDENTIALS",
                        "REFRESH_TOKEN"
                      ]
                    },
                    "accessType": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/accessType",
                      "description": "The access type (online or offline) of this API Client",
                      "example": "OFFLINE"
                    },
                    "type": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/type",
                      "description": "The type of the API Client (public or confidential)",
                      "example": "CONFIDENTIAL"
                    },
                    "internal": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client can be used for requests internal to IDN",
                      "example": false
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client is enabled for use",
                      "example": true
                    },
                    "strongAuthSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports strong authentication",
                      "example": false
                    },
                    "claimsSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
                      "example": false
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was created",
                      "example": "2017-07-11T18:45:37.098Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was last updated",
                      "example": "2018-06-25T20:22:28.104Z"
                    }
                  },
                  "required": [
                    "id",
                    "secret",
                    "businessName",
                    "homepageUrl",
                    "name",
                    "description",
                    "accessTokenValiditySeconds",
                    "refreshTokenValiditySeconds",
                    "redirectUris",
                    "grantTypes",
                    "accessType",
                    "type",
                    "internal",
                    "enabled",
                    "strongAuthSupported",
                    "claimsSupported",
                    "created",
                    "modified"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/oauth-clients/{id}": {
      "get": {
        "operationId": "getOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Get OAuth Client",
        "description": "This gets details of an OAuth client.\nRequest will require the following security scope:\n- 'idn:oathkeeper-client:read'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the OAuth client",
                      "example": "2c9180835d2e5168015d32f890ca1581"
                    },
                    "businessName": {
                      "type": "string",
                      "description": "The name of the business the API Client should belong to",
                      "example": "Acme-Solar"
                    },
                    "homepageUrl": {
                      "type": "string",
                      "description": "The homepage URL associated with the owner of the API Client",
                      "example": "http://localhost:12345"
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable name for the API Client",
                      "example": "Demo API Client"
                    },
                    "description": {
                      "type": "string",
                      "description": "A description of the API Client",
                      "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
                    },
                    "accessTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds an access token generated for this API Client is valid for",
                      "example": 750
                    },
                    "refreshTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds a refresh token generated for this API Client is valid for",
                      "example": 86400
                    },
                    "redirectUris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of the approved redirect URIs used with the authorization_code flow",
                      "example": [
                        "http://localhost:12345"
                      ]
                    },
                    "grantTypes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/grantTypes/items"
                      },
                      "description": "A list of OAuth 2.0 grant types this API Client can be used with",
                      "example": [
                        "AUTHORIZATION_CODE",
                        "CLIENT_CREDENTIALS",
                        "REFRESH_TOKEN"
                      ]
                    },
                    "accessType": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/accessType",
                      "description": "The access type (online or offline) of this API Client",
                      "example": "OFFLINE"
                    },
                    "type": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/type",
                      "description": "The type of the API Client (public or confidential)",
                      "example": "CONFIDENTIAL"
                    },
                    "internal": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client can be used for requests internal to IDN",
                      "example": false
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client is enabled for use",
                      "example": true
                    },
                    "strongAuthSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports strong authentication",
                      "example": false
                    },
                    "claimsSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
                      "example": false
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was created",
                      "example": "2017-07-11T18:45:37.098Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was last updated",
                      "example": "2018-06-25T20:22:28.104Z"
                    }
                  },
                  "required": [
                    "id",
                    "businessName",
                    "homepageUrl",
                    "name",
                    "description",
                    "accessTokenValiditySeconds",
                    "refreshTokenValiditySeconds",
                    "redirectUris",
                    "grantTypes",
                    "accessType",
                    "type",
                    "internal",
                    "enabled",
                    "strongAuthSupported",
                    "claimsSupported",
                    "created",
                    "modified"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Delete OAuth Client",
        "description": "This deletes an OAuth client.\nRequest will require the following security scopes:\n- 'idn:oathkeeper-client:delete' - 'idn:oathkeeper-internal-client:delete'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Patch OAuth Client",
        "description": "This performs a targeted update to the field(s) of an OAuth client.\nRequest will require a security scope of\n'idn:oathkeeper-client:update'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* tenant\n* businessName\n* homepageUrl\n* name\n* description\n* accessTokenValiditySeconds\n* refreshTokenValiditySeconds\n* redirectUris\n* grantTypes\n* accessType\n* enabled\n* strongAuthSupported\n* claimsSupported\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                  "required": [
                    "op",
                    "path"
                  ],
                  "properties": {
                    "op": {
                      "type": "string",
                      "description": "The operation to be performed",
                      "enum": [
                        "add",
                        "remove",
                        "replace",
                        "move",
                        "copy",
                        "test"
                      ],
                      "example": "replace"
                    },
                    "path": {
                      "type": "string",
                      "description": "A string JSON Pointer representing the target path to an element to be affected by the operation",
                      "example": "/description"
                    },
                    "value": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "object"
                              }
                            ]
                          }
                        }
                      ],
                      "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
                      "example": "New description"
                    }
                  }
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/strongAuthSupported",
                  "value": true
                },
                {
                  "op": "replace",
                  "path": "/businessName",
                  "value": "acme-solar"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the OAuth client's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens": {
      "get": {
        "operationId": "listPersonalAccessTokens",
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "List Personal Access Tokens",
        "description": "This gets a collection of personal access tokens associated with the optional <code>owner-id</code>. </br> query parameter. If the <code>owner-id</code> query parameter is omitted, all personal access tokens </br> for a tenant will be retrieved, but the caller must have the 'idn:all-personal-access-tokens:read' right. </br> </br> Any of the following rights are required to access this resource: <ul>\n  <li>idn:my-personal-access-tokens:read</li>\n  <li>idn:all-personal-access-tokens:read</li>\n  <li>idn:managed-personal-access-tokens:read</li>\n</ul>",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "description": "The identity ID of the owner whose personal access tokens should be listed. </br> If \"me\", the caller should have the following right: 'idn:my-personal-access-tokens:read'</br> </br> If an actual owner ID or if the <code>owner-id</code> parameter is omitted in the request, </br> the caller should have the following right: 'idn:all-personal-access-tokens:read'. </br> </br> If the caller has the following right, then managed personal access tokens associated with <code>owner-id</code> </br> will be retrieved: 'idn:managed-personal-access-tokens:read'",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "example": "2c9180867b50d088017b554662fb281e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of personal access tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the personal access token (to be used as the username for Basic Auth).",
                        "example": "86f1dc6fe8f54414950454cbb11278fa"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.",
                        "example": "NodeJS Integration"
                      },
                      "owner": {
                        "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                        "description": "Details about the owner of the personal access token."
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time, down to the millisecond, when this personal access token was created.",
                        "example": "2017-07-11T18:45:37.098Z"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "owner",
                      "created"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPersonalAccessToken",
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Create Personal Access Token",
        "description": "This creates a personal access token. </br> </br> Any of the following rights are required to access this resource: <ul>\n  <li>idn:my-personal-access-tokens:create</li>\n  <li>idn:all-personal-access-tokens:create</li>\n  <li>idn:managed-personal-access-tokens:create</li>\n</ul>",
        "requestBody": {
          "description": "Name and scope of personal access token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Object for specifying the name of a personal access token to create",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the personal access token (PAT) to be created. Cannot be the same as another PAT owned by the user for whom this PAT is being created.",
                    "example": "NodeJS Integration"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created. Note - this is the only time Personal Access Tokens' secret attribute will be displayed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the personal access token (to be used as the username for Basic Auth).",
                      "example": "86f1dc6fe8f54414950454cbb11278fa"
                    },
                    "secret": {
                      "type": "string",
                      "description": "The secret of the personal access token (to be used as the password for Basic Auth).",
                      "example": "1d1bef2b9f426383447f64f69349fc7cac176042578d205c256ba3f37c59adb9"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.",
                      "example": "NodeJS Integration"
                    },
                    "owner": {
                      "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                      "description": "Details about the owner of the personal access token."
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when this personal access token was created.",
                      "example": "2017-07-11T18:45:37.098Z"
                    }
                  },
                  "required": [
                    "id",
                    "secret",
                    "name",
                    "owner",
                    "created"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}": {
      "delete": {
        "operationId": "deletePersonalAccessToken",
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Delete Personal Access Token",
        "description": "This deletes a personal access token </br> </br> Any of the following rights are required to access this resource: <ul>\n  <li>idn:my-personal-access-tokens:delete</li>\n  <li>idn:all-personal-access-tokens:delete</li>\n  <li>idn:managed-personal-access-tokens:delete</li>\n</ul>",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The personal access token id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/public-identities": {
      "get": {
        "operationId": "getPublicIdentities",
        "tags": [
          "Public Identities"
        ],
        "summary": "Get a list of public identities",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**alias**: *eq, sw*\n\n**email**: *eq, sw*\n\n**firstname**: *eq, sw*\n\n**lastname**: *eq, sw*"
          },
          {
            "in": "query",
            "name": "add-core-filters",
            "description": "If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:\n  - Should be either correlated or protected.\n  - Should not be \"spadmin\" or \"cloudadmin\".\n  - uid should not be null.\n  - lastname should not be null.\n  - email should not be null.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name**"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of public identity objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Public Identity",
                    "description": "Details about a public identity",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identity id",
                        "example": "2c9180857182305e0171993735622948"
                      },
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of identity.",
                        "example": "Alison Ferguso"
                      },
                      "alias": {
                        "type": "string",
                        "description": "Alternate unique identifier for the identity.",
                        "example": "alison.ferguso"
                      },
                      "email": {
                        "nullable": true,
                        "type": "string",
                        "description": "Email address of identity.",
                        "example": "alison.ferguso@acme-solar.com"
                      },
                      "status": {
                        "nullable": true,
                        "type": "string",
                        "description": "The lifecycle status for the identity",
                        "example": "Active"
                      },
                      "manager": {
                        "$ref": "#/paths/~1public-identities-config/put/requestBody/content/application~1json/schema/properties/modifiedBy",
                        "description": "An identity reference to the manager of this identity"
                      },
                      "attributes": {
                        "type": "array",
                        "description": "The public identity attributes of the identity",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "The attribute key",
                              "example": "country"
                            },
                            "name": {
                              "type": "string",
                              "description": "Human-readable display name of the attribute",
                              "example": "Country"
                            },
                            "value": {
                              "type": "string",
                              "description": "The attribute value",
                              "example": "US"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "2c9180857182305e0171993735622948",
                    "name": "Alison Ferguso",
                    "alias": "alison.ferguso",
                    "email": "alison.ferguso@acme-solar.com",
                    "status": "Active",
                    "manager": {
                      "type": "IDENTITY",
                      "id": "2c9180a46faadee4016fb4e018c20639",
                      "name": "Thomas Edison"
                    },
                    "attributes": [
                      {
                        "key": "phone",
                        "name": "Phone",
                        "value": "5125551234"
                      },
                      {
                        "key": "country",
                        "name": "Country",
                        "value": "US"
                      }
                    ]
                  },
                  {
                    "id": "2c9180a46faadee4016fb4e018c20639",
                    "name": "Thomas Edison",
                    "alias": "thomas.edison",
                    "email": "thomas.edison@acme-solar.com",
                    "status": "Active",
                    "manager": {
                      "type": "IDENTITY",
                      "id": "2c918086676d3e0601677611dbde220f",
                      "name": "Mister Manager"
                    },
                    "attributes": [
                      {
                        "key": "phone",
                        "name": "Phone",
                        "value": "5125554321"
                      },
                      {
                        "key": "country",
                        "name": "Country",
                        "value": "US"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/public-identities-config": {
      "get": {
        "operationId": "getPublicIdentityConfig",
        "tags": [
          "Public Identities Config"
        ],
        "summary": "Get the Public Identities Configuration",
        "description": "This API returns details of the public identities configuration. A token with ORG ADMIN authority is required to call this API.",
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1public-identities-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePublicIdentityConfig",
        "tags": [
          "Public Identities Config"
        ],
        "summary": "Update the Public Identities Configuration",
        "description": "This API updates the details of the public identities configuration. A token with ORG ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Details of up to 5 Identity attributes that will be publicly accessible for all Identities to anyone in the org.",
                "properties": {
                  "attributes": {
                    "type": "array",
                    "description": "Up to 5 identity attributes that will be available to everyone in the org for all users in the org.",
                    "items": {
                      "type": "object",
                      "description": "Used to map an attribute key for an Identity to its display name.",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The attribute key",
                          "example": "country"
                        },
                        "name": {
                          "type": "string",
                          "description": "The attribute display name",
                          "example": "Country"
                        }
                      }
                    }
                  },
                  "modified": {
                    "nullable": true,
                    "type": "string",
                    "description": "When this config was last modified.",
                    "format": "date-time",
                    "example": "2018-06-25T20:22:28.104Z"
                  },
                  "modifiedBy": {
                    "type": "object",
                    "description": "The identity who last modified this config.",
                    "nullable": true,
                    "properties": {
                      "type": {
                        "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type",
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "Identity id",
                        "example": "2c9180a46faadee4016fb4e018c20639"
                      },
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of identity.",
                        "example": "Thomas Edison"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1public-identities-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/requestable-objects": {
      "get": {
        "operationId": "listRequestableObjects",
        "tags": [
          "Requestable Objects"
        ],
        "summary": "Requestable Objects List",
        "description": "This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param.\nAny authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.",
        "parameters": [
          {
            "in": "query",
            "name": "identity-id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "e7eab60924f64aa284175b9fa3309599",
            "description": "If present, the value returns only requestable objects for the specified identity.\n * Admin users can call this with any identity ID value.\n * Non-admin users can only specify *me* or pass their own identity ID value.\n * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result."
          },
          {
            "in": "query",
            "name": "types",
            "description": "Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestableObjectType"
              }
            },
            "explode": false
          },
          {
            "in": "query",
            "name": "term",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Finance Role",
            "description": "It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored."
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestableObjectRequestStatus"
              }
            },
            "explode": false,
            "example": [
              "ASSIGNED",
              "PENDING"
            ]
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n**id**: *eq, in*\n**name**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nSorting is supported for the following fields: **name**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of requestable objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestableObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/saved-searches": {
      "post": {
        "tags": [
          "Saved Search"
        ],
        "description": "Creates a new saved search.\n",
        "summary": "Create a saved search",
        "operationId": "savedSearchCreate",
        "requestBody": {
          "description": "The saved search to persist.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SavedSearch/allOf/1"
                  },
                  {
                    "$ref": "#/components/schemas/SavedSearch/allOf/2"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The persisted saved search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearch"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      },
      "get": {
        "tags": [
          "Saved Search"
        ],
        "description": "Returns a list of saved searches.\n",
        "summary": "Return a list of Saved Searches",
        "operationId": "savedSearchList",
        "parameters": [
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "An expression used to constrain the result set using the filtering syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html).\n\nAllowed filter properties: *owner.id*, *public*\n\nAllowed filter operator: *eq*\n\n**Example filters**:\n\n```owner.id eq \"0de46054-fe90-434a-b84e-c6b3359d0c64\"``` -- returns saved searches for the specified owner ID\n\n```public eq true``` -- returns all public saved searches\n\n```owner.id eq me or public eq true``` -- returns all of the current user's saved searches as well as all public saved searches belonging to other users in the current org\n"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of requested saved searches.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavedSearch"
                  }
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "The total result count (returned only if the *count* parameter is specified as *true*).",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      }
    },
    "/saved-searches/{id}": {
      "put": {
        "tags": [
          "Saved Search"
        ],
        "description": "Updates an existing saved search.\n",
        "summary": "Updates an existing saved search\n",
        "operationId": "savedSearchUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the requested document.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "The saved search to persist.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The persisted saved search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearch"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      },
      "get": {
        "tags": [
          "Saved Search"
        ],
        "description": "Returns the specified saved search.\n",
        "summary": "Return a saved search by ID",
        "operationId": "savedSearchGet",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested saved search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearch"
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Saved Search"
        ],
        "description": "Deletes the specified saved search.\n",
        "summary": "Delete a document by ID",
        "operationId": "savedSearchDelete",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Indicates the request was successful but there is no content to be returned in the response."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/saved-searches/{id}/execute": {
      "post": {
        "tags": [
          "Saved Search"
        ],
        "description": "Executes the specified saved search.\n",
        "summary": "Execute a saved search by ID",
        "operationId": "savedSearchExecute",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "requestBody": {
          "description": "When saved search execution is triggered by a scheduled search, *scheduleId* will specify the ID of the triggering scheduled search.\n\nIf *scheduleId* is not specified (when execution is triggered by a UI test), the *owner* and *recipients* arguments must be provided.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scheduleId": {
                    "description": "The ID of the scheduled search that triggered the saved search execution.\n",
                    "type": "string",
                    "example": "7a724640-0c17-4ce9-a8c3-4a89738459c8"
                  },
                  "owner": {
                    "description": "The owner of the scheduled search being tested.\n",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1scheduled-searches~1%7Bid%7D~1unsubscribe/post/requestBody/content/application~1json/schema"
                      }
                    ]
                  },
                  "recipients": {
                    "description": "The email recipients of the scheduled search being tested.\n",
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1scheduled-searches~1%7Bid%7D~1unsubscribe/post/requestBody/content/application~1json/schema"
                    }
                  }
                }
              },
              "examples": {
                "scheduled": {
                  "summary": "Triggered by Scheduled Search",
                  "value": {
                    "scheduleId": "7a724640-0c17-4ce9-a8c3-4a89738459c8"
                  }
                },
                "test": {
                  "summary": "Triggered by UI Test",
                  "value": {
                    "owner": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313"
                    },
                    "recipients": [
                      {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system."
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/scheduled-searches": {
      "post": {
        "tags": [
          "Scheduled Search"
        ],
        "description": "Creates a new scheduled search.\n",
        "summary": "Create a new scheduled search",
        "operationId": "scheduledSearchCreate",
        "requestBody": {
          "description": "The scheduled search to persist.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ScheduledSearch/allOf/0"
                  },
                  {
                    "$ref": "#/components/schemas/ScheduledSearch/allOf/1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The persisted scheduled search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledSearch"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      },
      "get": {
        "tags": [
          "Scheduled Search"
        ],
        "description": "Returns a list of scheduled searches.\n",
        "summary": "Return a list of scheduled searches",
        "operationId": "scheduledSearchList",
        "parameters": [
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "An expression used to constrain the result set using the filtering syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html).\n\nAllowed filter properties: *owner.id*, *savedSearchId*\n\nAllowed filter operator: *eq*\n\n**Example filters**:\n\n```owner.id eq \"0de46054-fe90-434a-b84e-c6b3359d0c64\"``` -- returns scheduled searches for the specified owner ID\n\n```savedSearchId eq \"6cc0945d-9eeb-4948-9033-72d066e1153e\"``` -- returns scheduled searches that reference the specified saved search\n\n```owner.id eq me or savedSearchId eq \"6cc0945d-9eeb-4948-9033-72d066e1153e\"``` -- returns all of the current user's scheduled searches as well as all scheduled searches that reference the specified saved search\n"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of requested scheduled searches.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledSearch"
                  }
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "The total result count (returned only if the *count* parameter is specified as *true*).",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      }
    },
    "/scheduled-searches/{id}": {
      "put": {
        "tags": [
          "Scheduled Search"
        ],
        "description": "Updates an existing scheduled search.\n",
        "summary": "Update an existing Scheduled Search",
        "operationId": "scheduledSearchUpdate",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "requestBody": {
          "description": "The scheduled search to persist.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduledSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The persisted scheduled search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledSearch"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      },
      "get": {
        "tags": [
          "Scheduled Search"
        ],
        "description": "Returns the specified scheduled search.\n",
        "summary": "Return a Scheduled Search by ID",
        "operationId": "scheduledSearchGet",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested scheduled search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledSearch"
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Scheduled Search"
        ],
        "description": "Deletes the specified scheduled search.\n",
        "operationId": "scheduledSearchDelete",
        "summary": "Delete a Scheduled Search by ID",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Indicates the request was successful but there is no content to be returned in the response."
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/scheduled-searches/{id}/unsubscribe": {
      "post": {
        "tags": [
          "Scheduled Search"
        ],
        "description": "Unsubscribes a recipient from the specified scheduled search.\n",
        "operationId": "scheduledSearchUnsubscribe",
        "summary": "Unsubscribe a recipient from Scheduled Search",
        "parameters": [
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "requestBody": {
          "description": "The recipient to be removed from the scheduled search.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type"
                  },
                  "id": {
                    "type": "string",
                    "example": "2c91808568c529c60168cca6f90c1313"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - Indicates the request was successful but there is no content to be returned in the response."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Performs a search with provided query and returns matching result collection.",
        "operationId": "search",
        "summary": "Get a list of Documents",
        "parameters": [
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": 250,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 250,
              "default": 250
            }
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "indices": {
                    "description": "The names of the Elasticsearch indices in which to search.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SavedSearch/allOf/2/properties/indices/items"
                    },
                    "example": [
                      "identities"
                    ]
                  },
                  "queryType": {
                    "description": "Enum representing the currently supported query types.\nAdditional values may be added in the future without notice.",
                    "type": "string",
                    "enum": [
                      "DSL",
                      "SAILPOINT",
                      "TYPEAHEAD"
                    ],
                    "default": "SAILPOINT"
                  },
                  "queryVersion": {
                    "allOf": [
                      {
                        "description": "The current Elasticserver version.",
                        "type": "string",
                        "default": "5.2"
                      },
                      {
                        "type": "string",
                        "description": "The version of the query object.\nThis version number will map to the version of Elasticsearch for the query strings and objects being used."
                      }
                    ]
                  },
                  "query": {
                    "type": "object",
                    "description": "Query parameters used to construct an Elasticsearch query object.",
                    "properties": {
                      "query": {
                        "description": "The query using the Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL extended by SailPoint to support Nested queries.",
                        "type": "string",
                        "example": "name:a*"
                      },
                      "fields": {
                        "description": "The fields to which the specified query will be applied.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "name",
                          "displayName"
                        ]
                      },
                      "timeZone": {
                        "description": "The time zone to be applied to any range query related to dates.",
                        "type": "string",
                        "example": "America/Chicago"
                      },
                      "innerHit": {
                        "description": "Inner Hit query object that will cause the specified nested type to be returned as the result matching the supplied query.",
                        "type": "object",
                        "required": [
                          "query",
                          "type"
                        ],
                        "properties": {
                          "query": {
                            "description": "The search query using the Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL extended by SailPoint to support Nested queries.",
                            "type": "string",
                            "example": "source.name:\\\"Active Directory\\\""
                          },
                          "type": {
                            "description": "The nested type to use in the inner hits query.",
                            "type": "string",
                            "example": "access"
                          }
                        }
                      }
                    }
                  },
                  "queryDsl": {
                    "description": "The search query using the Elasticsearch [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl.html) syntax.",
                    "type": "object"
                  },
                  "typeAheadQuery": {
                    "type": "object",
                    "description": "Query parameters used to construct an Elasticsearch type ahead query object.",
                    "required": [
                      "query",
                      "field"
                    ],
                    "properties": {
                      "query": {
                        "description": "The type ahead query string used to construct a phrase prefix match query.",
                        "type": "string",
                        "example": "Work"
                      },
                      "field": {
                        "description": "The field on which to perform the type ahead search.",
                        "type": "string",
                        "example": "source.name"
                      },
                      "nestedType": {
                        "description": "The nested type.",
                        "type": "string",
                        "example": "access"
                      },
                      "maxExpansions": {
                        "description": "The number of suffixes the last term will be expanded into.\nInfluences the performance of the query and the number results returned.\nValid values: 1 to 1000.",
                        "type": "integer",
                        "default": 10
                      }
                    }
                  },
                  "includeNested": {
                    "description": "Indicates if nested objects from returned search results should be included.",
                    "type": "boolean",
                    "default": true
                  },
                  "queryResultFilter": {
                    "type": "object",
                    "description": "Allows the query results to be filtered by specifying a list of fields to include and/or exclude from the result documents.",
                    "properties": {
                      "includes": {
                        "description": "The list of field names to include in the result documents.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "name",
                          "displayName"
                        ]
                      },
                      "excludes": {
                        "description": "The list of field names to exclude from the result documents.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "stacktrace"
                        ]
                      }
                    }
                  },
                  "aggregationType": {
                    "description": "Enum representing the currently available query languages for aggregations, which are used to perform calculations or groupings on search results.\n\nAdditional values may be added in the future without notice.\n",
                    "type": "string",
                    "enum": [
                      "DSL",
                      "SAILPOINT"
                    ],
                    "default": "DSL"
                  },
                  "aggregationsVersion": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1search/post/requestBody/content/application~1json/schema/properties/queryVersion/allOf/0"
                      },
                      {
                        "type": "string",
                        "description": "The version of the language being used for aggregation queries.\nThis version number will map to the version of Elasticsearch for the aggregation query object."
                      }
                    ]
                  },
                  "aggregationsDsl": {
                    "description": "The aggregation search query using Elasticsearch [Aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations.html) syntax.",
                    "type": "object"
                  },
                  "aggregations": {
                    "description": "The aggregation’s specifications, such as the groupings and calculations to be performed.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "nested": {
                            "type": "object",
                            "description": "The nested aggregation object.",
                            "required": [
                              "name",
                              "type"
                            ],
                            "properties": {
                              "name": {
                                "description": "The name of the nested aggregate to be included in the result.",
                                "type": "string",
                                "example": "id"
                              },
                              "type": {
                                "description": "The type of the nested object.",
                                "type": "string",
                                "example": "access"
                              }
                            }
                          },
                          "metric": {
                            "type": "object",
                            "description": "The calculation done on the results of the query",
                            "required": [
                              "name",
                              "field"
                            ],
                            "properties": {
                              "name": {
                                "description": "The name of the metric aggregate to be included in the result.\nIf the metric aggregation is omitted, the resulting aggregation will be a count of the documents in the search results.",
                                "type": "string",
                                "example": "Access Name Count"
                              },
                              "type": {
                                "description": "Enum representing the currently supported metric aggregation types.\nAdditional values may be added in the future without notice.",
                                "type": "string",
                                "enum": [
                                  "COUNT",
                                  "UNIQUE_COUNT",
                                  "AVG",
                                  "SUM",
                                  "MEDIAN",
                                  "MIN",
                                  "MAX"
                                ],
                                "default": "UNIQUE_COUNT"
                              },
                              "field": {
                                "description": "The field the calculation is performed on.\n\nPrefix the field name with '@' to reference a nested object.\n",
                                "type": "string",
                                "example": "@access.name"
                              }
                            }
                          },
                          "filter": {
                            "type": "object",
                            "description": "An additional filter to constrain the results of the search query.",
                            "required": [
                              "name",
                              "field",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "description": "The name of the filter aggregate to be included in the result.",
                                "type": "string",
                                "example": "Entitlements"
                              },
                              "type": {
                                "description": "Enum representing the currently supported filter aggregation types.\nAdditional values may be added in the future without notice.",
                                "type": "string",
                                "enum": [
                                  "TERM"
                                ],
                                "default": "TERM"
                              },
                              "field": {
                                "description": "The search field to apply the filter to.\n\nPrefix the field name with '@' to reference a nested object.\n",
                                "type": "string",
                                "example": "access.type"
                              },
                              "value": {
                                "description": "The value to filter on.",
                                "type": "string",
                                "example": "ENTITLEMENT"
                              }
                            }
                          },
                          "bucket": {
                            "type": "object",
                            "description": "The bucket to group the results of the aggregation query by.",
                            "required": [
                              "name",
                              "field"
                            ],
                            "properties": {
                              "name": {
                                "description": "The name of the bucket aggregate to be included in the result.",
                                "type": "string",
                                "example": "Identity Locations"
                              },
                              "type": {
                                "description": "Enum representing the currently supported bucket aggregation types.\nAdditional values may be added in the future without notice.",
                                "type": "string",
                                "enum": [
                                  "TERMS"
                                ],
                                "default": "TERMS"
                              },
                              "field": {
                                "description": "The field to bucket on.\nPrefix the field name with '@' to reference a nested object.",
                                "type": "string",
                                "example": "attributes.city"
                              },
                              "size": {
                                "description": "Maximum number of buckets to include.",
                                "type": "integer"
                              },
                              "minDocCount": {
                                "description": "Minimum number of documents a bucket should have.",
                                "type": "integer"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "subAggregation": {
                            "description": "Aggregation to be performed on the result of the parent bucket aggregation.",
                            "allOf": [
                              {
                                "$ref": "#/paths/~1search/post/requestBody/content/application~1json/schema/properties/aggregations/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "subAggregation": {
                                    "description": "Aggregation to be performed on the result of the parent bucket aggregation.",
                                    "$ref": "#/paths/~1search/post/requestBody/content/application~1json/schema/properties/aggregations/allOf/0"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "sort": {
                    "description": "The fields to be used to sort the search results. Use + or - to specify the sort direction.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "searchAfter": {
                    "description": "Used to begin the search window at the values specified.\nThis parameter consists of the last values of the sorted fields in the current record set.\nThis is used to expand the Elasticsearch limit of 10K records by shifting the 10K window to begin at this value.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "filters": {
                    "description": "The filters to be applied for each filtered field name.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/SavedSearch/allOf/2/properties/filters/allOf/1"
                    }
                  }
                },
                "required": [
                  "indices"
                ]
              },
              "examples": {
                "query-fields": {
                  "summary": "Query with Fields",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "query": {
                      "query": "\"John Doe\"",
                      "fields": [
                        "name",
                        "description"
                      ]
                    }
                  }
                },
                "query-timeZone": {
                  "summary": "Query with TimeZone",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "query": {
                      "query": "created:>2019-08-05T20:54:00",
                      "timeZone": "America/Los_Angeles"
                    }
                  }
                },
                "query-innerHit": {
                  "summary": "Query with InnerHit",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "query": {
                      "query": "\"John Doe\"",
                      "innerHit": {
                        "type": "access",
                        "query": "source.name:\\\"Active Directory\\\""
                      }
                    }
                  }
                },
                "typeAheadQuery": {
                  "summary": "TypeAheadQuery",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "queryType": "TYPEAHEAD",
                    "typeAheadQuery": {
                      "field": "name",
                      "query": "Jo",
                      "maxExpansions": 50
                    }
                  }
                },
                "typeAheadQuery-nestedType": {
                  "summary": "TypeAheadQuery with NestedType",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "queryType": "TYPEAHEAD",
                    "typeAheadQuery": {
                      "field": "source.name",
                      "nestedType": "access",
                      "query": "Work",
                      "maxExpansions": 50
                    }
                  }
                },
                "filter-exists": {
                  "summary": "Filter with Exists",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "query": {
                      "query": "attributes.city:London"
                    },
                    "filters": {
                      "attributes.cloudAuthoritativeSource": {
                        "type": "EXISTS",
                        "exclude": true
                      }
                    }
                  }
                },
                "filter-range": {
                  "summary": "Filter with Range",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "query": {
                      "query": "attributes.city:London",
                      "timeZone": "Europe/London"
                    },
                    "filters": {
                      "accessCount": {
                        "type": "RANGE",
                        "range": {
                          "lower": {
                            "value": "3"
                          }
                        }
                      },
                      "created": {
                        "type": "RANGE",
                        "range": {
                          "lower": {
                            "value": "2019-12-01",
                            "inclusive": true
                          },
                          "upper": {
                            "value": "2020-01-01"
                          }
                        }
                      }
                    }
                  }
                },
                "filter-terms": {
                  "summary": "Filter with Terms",
                  "value": {
                    "indices": [
                      "identities"
                    ],
                    "query": {
                      "query": "attributes.city:London"
                    },
                    "filters": {
                      "source.name": {
                        "type": "TERMS",
                        "terms": [
                          "HR Employees",
                          "Corporate Active Directory"
                        ],
                        "exclude": true
                      },
                      "protected": {
                        "type": "TERMS",
                        "terms": [
                          "true"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of matching documents.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchDocument"
                  }
                },
                "examples": {
                  "accessProfiles": {
                    "summary": "A collection of AccessProfiles",
                    "value": [
                      {
                        "id": "2c9180825a6c1adc015a71c9023f0818",
                        "name": "Cloud Eng",
                        "_type": "accessprofile",
                        "description": "Cloud Eng",
                        "created": "2017-02-24T20:21:23.145Z",
                        "modified": "2019-05-24T20:36:04.312Z",
                        "synced": "2020-02-18T05:30:20.414Z",
                        "enabled": true,
                        "requestable": true,
                        "requestCommentsRequired": false,
                        "owner": {
                          "id": "ff8081815757d36a015757d42e56031e",
                          "name": "SailPoint Support",
                          "type": "IDENTITY",
                          "email": "cloud-support@sailpoint.com"
                        },
                        "source": {
                          "id": "ff8081815757d4fb0157588f3d9d008f",
                          "name": "Employees"
                        },
                        "entitlements": [
                          {
                            "id": "2c918084575812550157589064f33b89",
                            "name": "CN=Cloud Engineering,DC=sailpoint,DC=COM",
                            "description": "mull",
                            "attribute": "memberOf",
                            "value": "CN=Cloud Engineering,DC=sailpoint,DC=COM"
                          }
                        ],
                        "entitlementCount": 1,
                        "tags": [
                          "TAG_1",
                          "TAG_2"
                        ]
                      }
                    ]
                  },
                  "entitlements": {
                    "summary": "A collection of Entitlements",
                    "value": [
                      {
                        "id": "2c9180946ed0c43d016eec1a80892fbd",
                        "name": "entitlement.aa415ae7",
                        "_type": "entitlement",
                        "description": "null",
                        "attribute": "groups",
                        "value": "entitlement.aa415ae7",
                        "modified": "2019-12-09T19:19:50.154Z",
                        "synced": "2020-02-19T04:30:32.906Z",
                        "displayName": "entitlement.aa415ae7",
                        "source": {
                          "id": "2c91808b6e9e6fb8016eec1a2b6f7b5f",
                          "name": "ODS-HR-Employees"
                        },
                        "privileged": false,
                        "identityCount": 68,
                        "tags": [
                          "TAG_1",
                          "TAG_2"
                        ]
                      }
                    ]
                  },
                  "events": {
                    "summary": "A collection of Events",
                    "value": [
                      {
                        "id": "e092842f-c904-4b59-aac8-2544abeeef4b",
                        "name": "Update Task Schedule Passed",
                        "_type": "event",
                        "created": "2020-02-17T16:23:18.327Z",
                        "synced": "2020-02-17T16:23:18.388Z",
                        "action": "TASK_SCHEDULE_UPDATE_PASSED",
                        "type": "SYSTEM_CONFIG",
                        "actor": {
                          "name": "MantisTaskScheduler"
                        },
                        "target": {
                          "name": "Perform provisioning activity search delete synchronization"
                        },
                        "stack": "tpe",
                        "trackingNumber": "c6b98bc39ece48b080826d16c76b166c",
                        "ipAddress": "207.189.160.158",
                        "details": "null",
                        "attributes": {
                          "sourceName": "SailPoint"
                        },
                        "objects": [
                          "TASK",
                          "SCHEDULE"
                        ],
                        "operation": "UPDATE",
                        "status": "PASSED",
                        "technicalName": "TASK_SCHEDULE_UPDATE_PASSED"
                      }
                    ]
                  },
                  "identities": {
                    "summary": "A collection of Identities",
                    "value": [
                      {
                        "id": "2c9180865c45e7e3015c46c434a80622",
                        "name": "ad.admin",
                        "_type": "identity",
                        "firstName": "AD",
                        "lastName": "Admin",
                        "displayName": "AD Admin",
                        "email": "SLPT.CLOUD.SAILPOINT.TEST+AD-ADMIN@GMAIL.COM",
                        "created": "2018-08-22T19:54:54.302Z",
                        "modified": "2018-08-22T19:54:54.302Z",
                        "synced": "2018-08-22T19:54:54.302Z",
                        "phone": "512-942-7578",
                        "inactive": false,
                        "protected": false,
                        "status": "UNREGISTERED",
                        "employeeNumber": "O349804",
                        "manager": null,
                        "isManager": false,
                        "identityProfile": {
                          "id": "2c918085605c8d0601606f357cb231e6",
                          "name": "E2E AD"
                        },
                        "source": {
                          "id": "2c9180855c45b230015c46c19b9c0202",
                          "name": "EndToEnd-ADSource"
                        },
                        "attributes": {
                          "uid": "ad.admin",
                          "firstname": "AD",
                          "cloudAuthoritativeSource": "2c9180855c45b230015c46c19b9c0202",
                          "cloudStatus": "UNREGISTERED",
                          "iplanet-am-user-alias-list": null,
                          "displayName": "AD Admin",
                          "internalCloudStatus": "UNREGISTERED",
                          "workPhone": "512-942-7578",
                          "email": "SLPT.CLOUD.SAILPOINT.TEST+AD-ADMIN@GMAIL.COM",
                          "lastname": "Admin"
                        },
                        "processingState": null,
                        "processingDetails": null,
                        "accounts": [
                          {
                            "id": "2c9180865c45e7e3015c46c434a80623",
                            "name": "ad.admin",
                            "accountId": "CN=AD Admin,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                            "source": {
                              "id": "2c9180855c45b230015c46c19b9c0202",
                              "name": "EndToEnd-ADSource",
                              "type": "Active Directory - Direct"
                            },
                            "disabled": false,
                            "locked": false,
                            "privileged": false,
                            "manuallyCorrelated": false,
                            "passwordLastSet": "2018-08-22T19:54:54.302Z",
                            "entitlementAttributes": {
                              "memberOf": [
                                "CN=Group Policy Creator Owners,CN=Users,DC=TestAutomationAD,DC=local",
                                "CN=Domain Guests,CN=Users,DC=TestAutomationAD,DC=local",
                                "CN=Domain Admins,CN=Users,DC=TestAutomationAD,DC=local",
                                "CN=Enterprise Admins,CN=Users,DC=TestAutomationAD,DC=local",
                                "CN=Schema Admins,CN=Users,DC=TestAutomationAD,DC=local",
                                "CN=Guests,CN=Builtin,DC=TestAutomationAD,DC=local",
                                "CN=Administrators,CN=Builtin,DC=TestAutomationAD,DC=local"
                              ]
                            },
                            "created": "2018-08-22T19:54:54.302Z"
                          },
                          {
                            "id": "2c918083606d670c01606f35a30a0349",
                            "name": "ad.admin",
                            "accountId": "ad.admin",
                            "source": {
                              "id": "ff8081815c46b85b015c46b90c7c02a6",
                              "name": "IdentityNow",
                              "type": "IdentityNowConnector"
                            },
                            "disabled": false,
                            "locked": false,
                            "privileged": false,
                            "manuallyCorrelated": false,
                            "passwordLastSet": null,
                            "entitlementAttributes": null,
                            "created": "2018-08-22T19:54:54.302Z"
                          }
                        ],
                        "accountCount": 2,
                        "apps": [
                          {
                            "id": "22751",
                            "name": "ADP Workforce Now",
                            "source": {
                              "id": "2c9180855c45b230015c46e2f6a8026a",
                              "name": "Corporate Active Directory"
                            },
                            "account": {
                              "id": "2c9180865c45efa4015c470be0de1606",
                              "accountId": "CN=Bob Wilson,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
                            }
                          }
                        ],
                        "appCount": 1,
                        "access": [
                          {
                            "id": "2c918083634bc6cb01639808d40270ba",
                            "name": "test [AccessProfile-1527264105448]",
                            "displayName": "test",
                            "type": "ACCESS_PROFILE",
                            "description": "test",
                            "source": {
                              "id": "2c9180855c45b230015c46c19b9c0202",
                              "name": "EndToEnd-ADSource"
                            },
                            "owner": {
                              "id": "2c9180865c45e7e3015c46c434a80622",
                              "name": "ad.admin",
                              "displayName": "AD Admin"
                            }
                          },
                          {
                            "id": "2c9180865c45e7e3015c46c457c50755",
                            "name": "Administrators",
                            "displayName": "Administrators",
                            "type": "ENTITLEMENT",
                            "description": null,
                            "source": {
                              "id": "2c9180855c45b230015c46c19b9c0202",
                              "name": "EndToEnd-ADSource"
                            },
                            "privileged": false,
                            "attribute": "memberOf",
                            "value": "CN=Administrators,CN=Builtin,DC=TestAutomationAD,DC=local",
                            "standalone": false
                          },
                          {
                            "id": "2c9180865decdaa5015e06598b293108",
                            "name": "test [cloudRole-1503345085223]",
                            "displayName": "test",
                            "type": "ROLE",
                            "description": "test",
                            "owner": {
                              "id": "2c9180865c45e7e3015c46c5030707a0",
                              "name": "will.albin",
                              "displayName": "Albin Will"
                            },
                            "disabled": false
                          }
                        ],
                        "accessCount": 3,
                        "accessProfileCount": 1,
                        "entitlementCount": 1,
                        "roleCount": 1,
                        "tags": [
                          "TAG_1",
                          "TAG_2"
                        ]
                      }
                    ]
                  },
                  "roles": {
                    "summary": "A collection of Roles",
                    "value": [
                      {
                        "id": "2c91808c6faadea6016fb4f2bc69077b",
                        "name": "IT Role",
                        "_type": "role",
                        "description": "IT role",
                        "created": "2020-01-17T19:20:15.040Z",
                        "modified": null,
                        "synced": "2020-02-18T05:30:20.145Z",
                        "enabled": true,
                        "requestable": false,
                        "requestCommentsRequired": false,
                        "owner": {
                          "id": "2c9180a46faadee4016fb4e018c20639",
                          "name": "Cloud Support",
                          "type": "IDENTITY",
                          "email": "thomas.edison@acme-solar.com"
                        },
                        "accessProfiles": [
                          {
                            "id": "2c91809c6faade77016fb4f0b63407ae",
                            "name": "Admin Access"
                          }
                        ],
                        "accessProfileCount": 1,
                        "tags": [
                          "TAG_1",
                          "TAG_2"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "schema": {
                  "type": "integer"
                },
                "description": "The total result count (returned only if the *count* parameter is specified as *true*)."
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7Bid%7D~1non-employee-bulk-upload/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      }
    },
    "/search/count": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Performs a search with provided query and returns count of results in the X-Total-Count header.",
        "operationId": "searchCount",
        "summary": "Count the number of Documents satisfying a Query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1search/post/requestBody/content/application~1json/schema"
              },
              "examples": {
                "query-timeZone": {
                  "$ref": "#/paths/~1search/post/requestBody/content/application~1json/examples/query-timeZone"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content - indicates the request was successful but there is no content to be returned in the response.",
            "headers": {
              "X-Total-Count": {
                "description": "The total result count.",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      }
    },
    "/search/aggregate": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Performs a search query aggregation and returns aggregation result.",
        "operationId": "searchAggregate",
        "summary": "Perform a Search Query Aggregation",
        "parameters": [
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1search/post/requestBody/content/application~1json/schema"
              },
              "examples": {
                "metricAggregation": {
                  "summary": "MetricAggregation",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "SAILPOINT",
                    "aggregations": {
                      "metric": {
                        "name": "How Many Locations",
                        "type": "UNIQUE_COUNT",
                        "field": "attributes.city"
                      }
                    }
                  }
                },
                "metricAggregation-dsl": {
                  "summary": "MetricAggregation using DSL",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "DSL",
                    "aggregationsDsl": {
                      "How Many Locations": {
                        "cardinality": {
                          "field": "attributes.city.exact"
                        }
                      }
                    }
                  }
                },
                "bucketAggregation": {
                  "summary": "BucketAggregation",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "SAILPOINT",
                    "aggregations": {
                      "bucket": {
                        "name": "Identity Locations",
                        "type": "TERMS",
                        "field": "attributes.city"
                      }
                    }
                  }
                },
                "bucketAggregation-dsl": {
                  "summary": "BucketAggregation using DSL",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "DSL",
                    "aggregationsDsl": {
                      "Identity Locations": {
                        "terms": {
                          "field": "attributes.city.exact"
                        }
                      }
                    }
                  }
                },
                "nestedAggregation-bucketAggregation": {
                  "summary": "NestedAggregation with BucketAggregation",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "SAILPOINT",
                    "aggregations": {
                      "nested": {
                        "name": "Access",
                        "field": "access",
                        "type": "TERMS"
                      },
                      "bucket": {
                        "name": "Access Source Name",
                        "type": "TERMS",
                        "field": "access.source.name"
                      }
                    }
                  }
                },
                "nestedAggregation-bucketAggregation-dsl": {
                  "summary": "NestedAggregation with BucketAggregation using DSL",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "DSL",
                    "aggregationsDsl": {
                      "access": {
                        "nested": {
                          "path": "access"
                        },
                        "aggs": {
                          "Access Source Name": {
                            "terms": {
                              "field": "access.source.name.exact"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "nestedAggregation-filterAggregation-bucketAggregation": {
                  "summary": "NestedAggregation with FilterAggregation and BucketAggregation",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "SAILPOINT",
                    "aggregations": {
                      "nested": {
                        "name": "Access",
                        "field": "access",
                        "type": "TERMS"
                      },
                      "filter": {
                        "name": "Entitlements",
                        "field": "access.type",
                        "value": "ENTITLEMENT"
                      },
                      "bucket": {
                        "name": "Access Name",
                        "type": "TERMS",
                        "field": "access.name"
                      }
                    }
                  }
                },
                "nestedAggregation-filterAggregation-bucketAggregation-dsl": {
                  "summary": "NestedAggregation with FilterAggregation and BucketAggregation using DSL",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "DSL",
                    "aggregationsDsl": {
                      "access": {
                        "nested": {
                          "path": "access"
                        },
                        "aggs": {
                          "Entitlements": {
                            "filter": {
                              "term": {
                                "access.type": "ENTITLEMENT"
                              }
                            },
                            "aggs": {
                              "Access Name": {
                                "terms": {
                                  "field": "access.name.exact"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "bucketAggregation-subAggregation": {
                  "summary": "BucketAggregation with SubAggregation",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "SAILPOINT",
                    "aggregations": {
                      "bucket": {
                        "name": "Identity Department",
                        "type": "TERMS",
                        "field": "attributes.department"
                      },
                      "subAggregation": {
                        "bucket": {
                          "name": "Identity Locations",
                          "type": "TERMS",
                          "field": "attributes.city"
                        }
                      }
                    }
                  }
                },
                "bucketAggregation-subAggregation-dsl": {
                  "summary": "BucketAggregation with SubAggregation using DSL",
                  "value": {
                    "indices": [
                      "aggregations"
                    ],
                    "aggregationType": "DSL",
                    "aggregationsDsl": {
                      "Identity Department": {
                        "terms": {
                          "field": "attributes.department.exact"
                        },
                        "aggs": {
                          "Identity Locations": {
                            "terms": {
                              "field": "attributes.city.exact"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Aggregation results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aggregations": {
                      "type": "object",
                      "description": "The document containing the results of the aggregation. This document is controlled by Elasticsearch and depends on the type of aggregation query that is run.\n\nSee Elasticsearch [Aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations.html) documentation for information.\n",
                      "example": {
                        "Identity Locations": {
                          "buckets": [
                            {
                              "key": "Austin",
                              "doc_count": 109
                            },
                            {
                              "key": "London",
                              "doc_count": 64
                            },
                            {
                              "key": "San Jose",
                              "doc_count": 27
                            },
                            {
                              "key": "Brussels",
                              "doc_count": 26
                            },
                            {
                              "key": "Sao Paulo",
                              "doc_count": 24
                            },
                            {
                              "key": "Munich",
                              "doc_count": 23
                            },
                            {
                              "key": "Singapore",
                              "doc_count": 22
                            },
                            {
                              "key": "Tokyo",
                              "doc_count": 20
                            },
                            {
                              "key": "Taipei",
                              "doc_count": 16
                            }
                          ]
                        }
                      }
                    },
                    "hits": {
                      "description": "The results of the aggregation search query.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchDocument"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "description": "If the *Accept:text/csv* header is specified and the *aggregationType* parameter in the request body is *SAILPOINT*,\n\nthe aggregation result will be returned as a CSV document.\n",
                  "type": "string",
                  "example": [
                    "Identity Locations,Count",
                    "Munich,23",
                    "Brussels,26",
                    "Singapore,22",
                    "Tokyo,20",
                    "Taipei,16",
                    "London,64",
                    "Austin,109",
                    "Sao Paulo,24",
                    "San Jose,27"
                  ]
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "The total result count (returned only if the *count* parameter is specified as *true*).",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          }
        }
      }
    },
    "/search/{index}/{id}": {
      "get": {
        "tags": [
          "Search"
        ],
        "description": "Fetches a single document from the specified index using the specified document ID.",
        "operationId": "searchGet",
        "summary": "Get a Document by ID",
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "description": "The index from which to fetch the specified document.\n\nThe currently supported index names are: *accessprofiles*, *accountactivities*, *accounts*, *aggregations*, *entitlements*, *events*, *identities*, and *roles*.\n",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "$ref": "#/paths/~1saved-searches~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDocument"
                },
                "examples": {
                  "accessProfile": {
                    "summary": "AccessProfile",
                    "value": {
                      "id": "2c9180825a6c1adc015a71c9023f0818",
                      "name": "Cloud Eng",
                      "_type": "accessprofile",
                      "description": "Cloud Eng",
                      "created": "2017-02-24T20:21:23.145Z",
                      "modified": "2019-05-24T20:36:04.312Z",
                      "synced": "2020-02-18T05:30:20.414Z",
                      "enabled": true,
                      "requestable": true,
                      "requestCommentsRequired": false,
                      "owner": {
                        "id": "ff8081815757d36a015757d42e56031e",
                        "name": "SailPoint Support",
                        "type": "IDENTITY",
                        "email": "cloud-support@sailpoint.com"
                      },
                      "source": {
                        "id": "ff8081815757d4fb0157588f3d9d008f",
                        "name": "Employees"
                      },
                      "entitlements": [
                        {
                          "id": "2c918084575812550157589064f33b89",
                          "name": "CN=Cloud Engineering,DC=sailpoint,DC=COM",
                          "description": "mull",
                          "attribute": "memberOf",
                          "value": "CN=Cloud Engineering,DC=sailpoint,DC=COM"
                        }
                      ],
                      "entitlementCount": 1,
                      "tags": [
                        "TAG_1",
                        "TAG_2"
                      ]
                    }
                  },
                  "entitlement": {
                    "summary": "Entitlement",
                    "value": {
                      "id": "2c9180946ed0c43d016eec1a80892fbd",
                      "name": "entitlement.aa415ae7",
                      "_type": "entitlement",
                      "description": "null",
                      "attribute": "groups",
                      "value": "entitlement.aa415ae7",
                      "modified": "2019-12-09T19:19:50.154Z",
                      "synced": "2020-02-19T04:30:32.906Z",
                      "displayName": "entitlement.aa415ae7",
                      "source": {
                        "id": "2c91808b6e9e6fb8016eec1a2b6f7b5f",
                        "name": "ODS-HR-Employees"
                      },
                      "privileged": false,
                      "identityCount": 68,
                      "tags": [
                        "TAG_1",
                        "TAG_2"
                      ]
                    }
                  },
                  "event": {
                    "summary": "Event",
                    "value": {
                      "id": "e092842f-c904-4b59-aac8-2544abeeef4b",
                      "name": "Update Task Schedule Passed",
                      "_type": "event",
                      "created": "2020-02-17T16:23:18.327Z",
                      "synced": "2020-02-17T16:23:18.388Z",
                      "action": "TASK_SCHEDULE_UPDATE_PASSED",
                      "type": "SYSTEM_CONFIG",
                      "actor": {
                        "name": "MantisTaskScheduler"
                      },
                      "target": {
                        "name": "Perform provisioning activity search delete synchronization"
                      },
                      "stack": "tpe",
                      "trackingNumber": "c6b98bc39ece48b080826d16c76b166c",
                      "ipAddress": "207.189.160.158",
                      "details": "null",
                      "attributes": {
                        "sourceName": "SailPoint"
                      },
                      "objects": [
                        "TASK",
                        "SCHEDULE"
                      ],
                      "operation": "UPDATE",
                      "status": "PASSED",
                      "technicalName": "TASK_SCHEDULE_UPDATE_PASSED"
                    }
                  },
                  "identity": {
                    "summary": "Identity",
                    "value": {
                      "id": "2c9180865c45e7e3015c46c434a80622",
                      "name": "ad.admin",
                      "_type": "identity",
                      "firstName": "AD",
                      "lastName": "Admin",
                      "displayName": "AD Admin",
                      "email": "SLPT.CLOUD.SAILPOINT.TEST+AD-ADMIN@GMAIL.COM",
                      "created": "2018-08-22T19:54:54.302Z",
                      "modified": "2018-08-22T19:54:54.302Z",
                      "synced": "2018-08-22T19:54:54.302Z",
                      "phone": "512-942-7578",
                      "inactive": false,
                      "protected": false,
                      "status": "UNREGISTERED",
                      "employeeNumber": "O349804",
                      "manager": null,
                      "isManager": false,
                      "identityProfile": {
                        "id": "2c918085605c8d0601606f357cb231e6",
                        "name": "E2E AD"
                      },
                      "source": {
                        "id": "2c9180855c45b230015c46c19b9c0202",
                        "name": "EndToEnd-ADSource"
                      },
                      "attributes": {
                        "uid": "ad.admin",
                        "firstname": "AD",
                        "cloudAuthoritativeSource": "2c9180855c45b230015c46c19b9c0202",
                        "cloudStatus": "UNREGISTERED",
                        "iplanet-am-user-alias-list": null,
                        "displayName": "AD Admin",
                        "internalCloudStatus": "UNREGISTERED",
                        "workPhone": "512-942-7578",
                        "email": "SLPT.CLOUD.SAILPOINT.TEST+AD-ADMIN@GMAIL.COM",
                        "lastname": "Admin"
                      },
                      "processingState": null,
                      "processingDetails": null,
                      "accounts": [
                        {
                          "id": "2c9180865c45e7e3015c46c434a80623",
                          "name": "ad.admin",
                          "accountId": "CN=AD Admin,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                          "source": {
                            "id": "2c9180855c45b230015c46c19b9c0202",
                            "name": "EndToEnd-ADSource",
                            "type": "Active Directory - Direct"
                          },
                          "disabled": false,
                          "locked": false,
                          "privileged": false,
                          "manuallyCorrelated": false,
                          "passwordLastSet": "2018-08-22T19:54:54.302Z",
                          "entitlementAttributes": {
                            "memberOf": [
                              "CN=Group Policy Creator Owners,CN=Users,DC=TestAutomationAD,DC=local",
                              "CN=Domain Guests,CN=Users,DC=TestAutomationAD,DC=local",
                              "CN=Domain Admins,CN=Users,DC=TestAutomationAD,DC=local",
                              "CN=Enterprise Admins,CN=Users,DC=TestAutomationAD,DC=local",
                              "CN=Schema Admins,CN=Users,DC=TestAutomationAD,DC=local",
                              "CN=Guests,CN=Builtin,DC=TestAutomationAD,DC=local",
                              "CN=Administrators,CN=Builtin,DC=TestAutomationAD,DC=local"
                            ]
                          },
                          "created": "2018-08-22T19:54:54.302Z"
                        },
                        {
                          "id": "2c918083606d670c01606f35a30a0349",
                          "name": "ad.admin",
                          "accountId": "ad.admin",
                          "source": {
                            "id": "ff8081815c46b85b015c46b90c7c02a6",
                            "name": "IdentityNow",
                            "type": "IdentityNowConnector"
                          },
                          "disabled": false,
                          "locked": false,
                          "privileged": false,
                          "manuallyCorrelated": false,
                          "passwordLastSet": null,
                          "entitlementAttributes": null,
                          "created": "2018-08-22T19:54:54.302Z"
                        }
                      ],
                      "accountCount": 2,
                      "apps": [
                        {
                          "id": "22751",
                          "name": "ADP Workforce Now",
                          "source": {
                            "id": "2c9180855c45b230015c46e2f6a8026a",
                            "name": "Corporate Active Directory"
                          },
                          "account": {
                            "id": "2c9180865c45efa4015c470be0de1606",
                            "accountId": "CN=Bob Wilson,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
                          }
                        }
                      ],
                      "appCount": 1,
                      "access": [
                        {
                          "id": "2c918083634bc6cb01639808d40270ba",
                          "name": "test [AccessProfile-1527264105448]",
                          "displayName": "test",
                          "type": "ACCESS_PROFILE",
                          "description": "test",
                          "source": {
                            "id": "2c9180855c45b230015c46c19b9c0202",
                            "name": "EndToEnd-ADSource"
                          },
                          "owner": {
                            "id": "2c9180865c45e7e3015c46c434a80622",
                            "name": "ad.admin",
                            "displayName": "AD Admin"
                          }
                        },
                        {
                          "id": "2c9180865c45e7e3015c46c457c50755",
                          "name": "Administrators",
                          "displayName": "Administrators",
                          "type": "ENTITLEMENT",
                          "description": null,
                          "source": {
                            "id": "2c9180855c45b230015c46c19b9c0202",
                            "name": "EndToEnd-ADSource"
                          },
                          "privileged": false,
                          "attribute": "memberOf",
                          "value": "CN=Administrators,CN=Builtin,DC=TestAutomationAD,DC=local",
                          "standalone": false
                        },
                        {
                          "id": "2c9180865decdaa5015e06598b293108",
                          "name": "test [cloudRole-1503345085223]",
                          "displayName": "test",
                          "type": "ROLE",
                          "description": "test",
                          "owner": {
                            "id": "2c9180865c45e7e3015c46c5030707a0",
                            "name": "will.albin",
                            "displayName": "Albin Will"
                          },
                          "disabled": false
                        }
                      ],
                      "accessCount": 3,
                      "accessProfileCount": 1,
                      "entitlementCount": 1,
                      "roleCount": 1,
                      "tags": [
                        "TAG_1",
                        "TAG_2"
                      ]
                    }
                  },
                  "role": {
                    "summary": "Role",
                    "value": {
                      "id": "2c91808c6faadea6016fb4f2bc69077b",
                      "name": "IT Role",
                      "_type": "role",
                      "description": "IT role",
                      "created": "2020-01-17T19:20:15.040Z",
                      "modified": null,
                      "synced": "2020-02-18T05:30:20.145Z",
                      "enabled": true,
                      "requestable": false,
                      "requestCommentsRequired": false,
                      "owner": {
                        "id": "2c9180a46faadee4016fb4e018c20639",
                        "name": "Cloud Support",
                        "type": "IDENTITY",
                        "email": "thomas.edison@acme-solar.com"
                      },
                      "accessProfiles": [
                        {
                          "id": "2c91809c6faade77016fb4f0b63407ae",
                          "name": "Admin Access"
                        }
                      ],
                      "accessProfileCount": 1,
                      "tags": [
                        "TAG_1",
                        "TAG_2"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/service-desk-integrations": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "List existing Service Desk Integrations",
        "description": "Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegrationList",
        "parameters": [
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "name": "sorters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name**"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq*\n\n**type**: *eq, in*\n\n**cluster**: *eq, in*"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ServiceDeskIntegrationDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Create a new Service Desk integration",
        "description": "Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "createServiceDeskIntegration",
        "requestBody": {
          "description": "The specifics of a new integration to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "details of the created integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/{id}": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Get a Service Desk integration by ID",
        "description": "Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to get",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Update a Service Desk integration by ID",
        "description": "Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "updateServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "description": "The specifics of the integration to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Delete a Service Desk integration by ID",
        "description": "Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "deleteServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Service Desk integration to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service Desk integration with the given ID successfully deleted"
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchServiceDeskIntegration",
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service Desk Integration Update - PATCH",
        "description": "Update an existing ServiceDeskIntegration by ID with a PATCH request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nPATCH can only be applied to the following fields:\n  *   \"beforeProvisioningRule\"\n\nA 403 Forbidden Error indicates that you attempted to PATCH a field that is not allowed.\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/types": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service Desk Integration Types List.",
        "description": "This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegrationTypes",
        "responses": {
          "200": {
            "description": "Responds with an array of the currently supported Service Desk integration types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDeskIntegrationTemplateType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/templates/{scriptName}": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service Desk integration template by scriptName.",
        "description": "This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegrationTemplate",
        "parameters": [
          {
            "name": "scriptName",
            "in": "path",
            "description": "The scriptName value of the Service Desk integration template to get",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aScriptName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the ServiceDeskIntegrationTemplateDto with the specified scriptName.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationTemplateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/status-check-configuration": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Get the time check configuration of queued SDIM tickets",
        "description": "Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getStatusCheckDetails",
        "responses": {
          "200": {
            "description": "QueuedCheckConfigDetails containing the configured values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuedCheckConfigDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Update the time check configuration of queued SDIM tickets",
        "description": "Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "updateStatusCheckDetails",
        "requestBody": {
          "description": "the modified time check configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueuedCheckConfigDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "QueuedCheckConfigDetails as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuedCheckConfigDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      }
    },
    "/sources": {
      "get": {
        "operationId": "listSources",
        "tags": [
          "Sources"
        ],
        "summary": "This API lists all sources in IdentityNow.",
        "description": "This end-point lists all the sources in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": 50,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 50,
              "default": 50
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": 0,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "count",
            "description": "If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.\n\nSince requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.\n\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *co, eq, in, sw*\n\n**type**: *eq, in*\n\n**owner.id**: *eq, in*\n\n**features**: *ca, co*\n\n**created**: *eq*\n\n**modified**: *eq*\n\n**managementWorkgroup.id**: *eq*\n\n**description**: *eq*\n\n**authoritative**: *eq*\n\n**healthy**: *eq*\n\n**status**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status**"
          },
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "description": "Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user.\nSubadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "List of Source objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "description": "Unauthorized - Returned if there is no authorization header, or if the JWT token is expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "A message describing the error",
                      "example": "JWT validation failed: JWT is expired"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Returned if the user you are running as, doesn't have access to this end-point.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7Bid%7D~1non-employee-bulk-upload/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "403": {
                    "summary": "An example of a 403 response object",
                    "value": {
                      "detailCode": "403 Forbidden",
                      "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The server understood the request but refuses to authorize it."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - returned if the request URL refers to a resource or object that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7Bid%7D~1non-employee-bulk-upload/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "404": {
                    "summary": "An example of a 404 response object",
                    "value": {
                      "detailCode": "404 Not found",
                      "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The server did not find a current representation for the target resource."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Returned in response to too many requests in a given period of time - rate limited. The Retry-After header in the response includes how long to wait before trying again.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "A message describing the error",
                      "example": " Rate Limit Exceeded "
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Returned if there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7Bid%7D~1non-employee-bulk-upload/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "500": {
                    "summary": "An example of a 500 response object",
                    "value": {
                      "detailCode": "500.0 Internal Fault",
                      "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "An internal fault occurred."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSource",
        "tags": [
          "Sources"
        ],
        "summary": "This API creates a source in IdentityNow.",
        "description": "This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "provisionAsCsv",
            "description": "Configures the source as a DelimitedFile type of source.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{id}": {
      "get": {
        "operationId": "getSource",
        "tags": [
          "Sources"
        ],
        "summary": "This API gets a specific source from IdentityNow.",
        "description": "This end-point gets a specific source in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Source object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "replaceSource",
        "tags": [
          "Sources"
        ],
        "summary": "Update Source (Full)",
        "description": "This API updates a source in IdentityNow, using a full object representation. In other words, the existing Source configuration is completely replaced.\nSome fields are immutable and cannot be changed, such as:\n* id * type * authoritative * connector * connectorClass * passwordPolicies\nAttempts to modify these fields will result in a 400 error.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateSource",
        "tags": [
          "Sources"
        ],
        "summary": "Update Source (Partial)",
        "description": "This API partially updates a source in IdentityNow, using a list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nSome fields are immutable and cannot be changed, such as:\n* id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies\nAttempts to modify these fields will result in a 400 error.\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in IdentityNow.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "description": "A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                "example": "{\n\t\"op\": \"replace\",\n\t\"path\": \"/description\",\n\t\"value\": \"A new description\"\n}",
                "items": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSource",
        "tags": [
          "Sources"
        ],
        "summary": "This API deletes a source in IdentityNow.",
        "description": "This end-point deletes a specific source in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.\nAll of accounts on the source will be removed first, then the source will be deleted. Actual status of task execution can be retrieved via method GET `/task-status/{id}`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                },
                "examples": {
                  "deleteSource": {
                    "summary": "Response returned when deleting a source",
                    "value": {
                      "type": "TASK_RESULT",
                      "id": "2c91808779ecf55b0179f720942f181a",
                      "name": null
                    }
                  }
                }
              }
            },
            "links": {
              "GetTaskStatusById": {
                "operationId": "getTaskStatus",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /task-status/{id}`.\n"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies": {
      "get": {
        "operationId": "listProvisioningPolicies",
        "tags": [
          "Sources"
        ],
        "summary": "Lists ProvisioningPolicies",
        "description": "This end-point lists all the ProvisioningPolicies in IdentityNow.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy-list:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ProvisioningPolicyDto objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisioningPolicy"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Create Provisioning Policy",
        "description": "This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:create"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningPolicy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created ProvisioningPolicyDto object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies/{usageType}": {
      "get": {
        "operationId": "getProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Retrieves Provisioning Policy by Use Type",
        "description": "This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow.\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProvisioningPolicy/properties/usageType"
            },
            "description": "The type of ProvisioningPolicy usage.",
            "example": "REGISTER"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ProvisioningPolicyDto was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "replaceProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Update Provisioning Policy by Use Type",
        "description": "This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow.\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProvisioningPolicy/properties/usageType"
            },
            "description": "The type of ProvisioningPolicy usage."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningPolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ProvisioningPolicyDto was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Partial update of Provisioning Policy",
        "description": "This API selectively updates an existing Provisioning Policy using a JSONPatch payload.\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProvisioningPolicy/properties/usageType"
            },
            "description": "The type of ProvisioningPolicy usage."
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the schema.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ProvisioningPolicyDto was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Delete Provisioning Policy by Usage Type",
        "description": "Deletes the provisioning policy with the specified usage on an application.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProvisioningPolicy/properties/usageType"
            },
            "description": "The type of ProvisioningPolicy usage."
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204",
            "description": "The ProvisioningPolicyDto was successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies/bulk-update": {
      "post": {
        "operationId": "bulkUpdateProvisioningPolicies",
        "tags": [
          "Sources"
        ],
        "summary": "Bulk Update Provisioning Policies",
        "description": "This end-point updates a list of provisioning policies on the specified source in IdentityNow.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy-bulk:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProvisioningPolicy"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of the ProvisioningPolicyDto was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisioningPolicy"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/schemas": {
      "get": {
        "operationId": "listSchemas",
        "tags": [
          "Sources"
        ],
        "summary": "Lists the Schemas that exist on the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "query",
            "name": "include-types",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized.",
            "example": "group"
          }
        ],
        "responses": {
          "200": {
            "description": "The Schemas were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Creates a new Schema on the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the Schema.",
                    "example": "2c9180835d191a86015d28455b4a2329"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Schema.",
                    "example": "account"
                  },
                  "nativeObjectType": {
                    "type": "string",
                    "description": "The name of the object type on the native system that the schema represents.",
                    "example": "User"
                  },
                  "identityAttribute": {
                    "type": "string",
                    "description": "The name of the attribute used to calculate the unique identifier for an object in the schema.",
                    "example": "sAMAccountName"
                  },
                  "displayAttribute": {
                    "type": "string",
                    "description": "The name of the attribute used to calculate the display value for an object in the schema.",
                    "example": "distinguishedName"
                  },
                  "hierarchyAttribute": {
                    "type": "string",
                    "description": "The name of the attribute whose values represent other objects in a hierarchy. Only relevant to group schemas.",
                    "example": "memberOf"
                  },
                  "includePermissions": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the include permissions with the object data when aggregating the schema.",
                    "example": false
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Source/properties/features/items"
                    },
                    "description": "The features that the schema supports.",
                    "example": [
                      "PROVISIONING",
                      "NO_PERMISSIONS_PROVISIONING",
                      "GROUPS_HAVE_MEMBERS"
                    ]
                  },
                  "configuration": {
                    "type": "object",
                    "description": "Holds any extra configuration data that the schema may require.",
                    "example": {
                      "groupMemberAttribute": "member"
                    }
                  },
                  "attributes": {
                    "type": "array",
                    "description": "The attribute definitions which form the schema.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the attribute.",
                          "example": "sAMAccountName"
                        },
                        "type": {
                          "description": "The type of the attribute.",
                          "example": "string",
                          "type": "string",
                          "enum": [
                            "STRING",
                            "LONG",
                            "INT",
                            "BOOLEAN"
                          ]
                        },
                        "schema": {
                          "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                          "description": "A reference to the schema on the source to which the values of the attribute map.",
                          "example": {
                            "type": "CONNECTOR_SCHEMA",
                            "id": "2c9180866166b5b0016167c32ef31a66",
                            "name": "group"
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "A human-readable description of the attribute."
                        },
                        "isMultiValued": {
                          "type": "boolean",
                          "description": "Flag indicating whether or not the attribute is multi-valued.",
                          "example": false
                        },
                        "isEntitlement": {
                          "type": "boolean",
                          "description": "Flag indicating whether or not the attribute is an entitlement.",
                          "example": false
                        },
                        "isGroup": {
                          "type": "boolean",
                          "description": "Flag indicating whether or not the attribute represents a group.",
                          "example": false,
                          "readOnly": true
                        }
                      }
                    },
                    "example": [
                      {
                        "name": "sAMAccountName",
                        "type": "string",
                        "isMultiValued": false,
                        "isEntitlement": false,
                        "isGroup": false
                      },
                      {
                        "name": "memberOf",
                        "type": "string",
                        "description": "Group membership",
                        "isMultiValued": true,
                        "isEntitlement": true,
                        "isGroup": true
                      }
                    ]
                  },
                  "created": {
                    "type": "string",
                    "description": "The date the Schema was created.",
                    "format": "date-time",
                    "example": "2019-12-24T22:32:58.104Z"
                  },
                  "modified": {
                    "type": "string",
                    "description": "The date the Schema was last modified.",
                    "format": "date-time",
                    "example": "2019-12-31T20:22:28.104Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Schema was successfully created on the specified Source.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/schemas/{schemaId}": {
      "get": {
        "operationId": "getSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Retrieves the Schema by id from the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Schema was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "replaceSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Performs a full update on a Schema on the specified Source.",
        "description": "This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.\n* id\n* name\n* created\n* modified\nAny attempt to modify these fields will result in an error response with a status code of 400.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Schema was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Performs a partial update to the Schema on the specified Source using the JSONPatch specification.",
        "description": "This API can be used to selectively update an existing Schema using a JSONPatch payload. Some fields of the Schema cannot be updated. These fields are listed below.\n* id\n* name\n* created\n* modified",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the schema.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Schema was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Deletes a Schema by id on the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1transforms~1%7Bid%7D/delete/responses/204",
            "description": "The Schema was successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/source-health": {
      "get": {
        "operationId": "getSourceHealth",
        "tags": [
          "Sources"
        ],
        "summary": "This API fetches source health by source's id",
        "description": "This endpoint fetches source health by source's id",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched source health successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceHealthDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/transforms": {
      "get": {
        "tags": [
          "Transforms"
        ],
        "summary": "List transforms",
        "description": "Gets a list of all saved transform objects.\nA token with transforms-list read authority is required to call this API.",
        "operationId": "getTransformsList",
        "parameters": [
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the transform to retrieve from the list.",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "example": "ExampleTransformName123"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n**internal**: *eq*\n**name**: *eq*, *sw*",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transforms matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transform"
                  }
                },
                "example": [
                  {
                    "id": "2cd78adghjkja34jh2b1hkjhasuecd",
                    "name": "Timestamp To Date",
                    "type": "dateFormat",
                    "attributes": {
                      "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                      "outputFormat": "yyyy/dd/MM"
                    },
                    "internal": false
                  },
                  {
                    "id": "2lkas8dhj4bkuakja77giih7l4ashh",
                    "name": "PrefixSubstring",
                    "type": "substring",
                    "attributes": {
                      "begin": 0,
                      "end": 3
                    },
                    "internal": true
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms-list:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Transforms"
        ],
        "summary": "Create transform",
        "description": "Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.",
        "operationId": "createTransform",
        "requestBody": {
          "required": true,
          "description": "The transform to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transform"
              },
              "example": {
                "name": "Timestamp To Date",
                "type": "dateFormat",
                "attributes": {
                  "inputFormat": "MMM dd yyyy, HH:mm:ss.SSS",
                  "outputFormat": "yyyy/dd/MM"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates the transform was successfully created and returns its representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transform"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:write"
            ]
          }
        ]
      }
    },
    "/transforms/{id}": {
      "get": {
        "tags": [
          "Transforms"
        ],
        "summary": "Transform by ID",
        "description": "This API returns the transform specified by the given ID.\nA token with transform read authority is required to call this API.",
        "operationId": "getTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transform with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transform"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Transforms"
        ],
        "summary": "Update a transform",
        "description": "Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error.\nA token with transform write authority is required to call this API.",
        "operationId": "updateTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated transform object (must include \"name\", \"type\", and \"attributes\" fields).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transform"
              },
              "example": {
                "name": "Timestamp To Date",
                "type": "dateFormat",
                "attributes": {
                  "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                  "outputFormat": "yyyy/dd/MM"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the transform was successfully updated and returns its new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transform"
                },
                "example": {
                  "id": "2cd78adghjkja34jh2b1hkjhasuecd",
                  "name": "Timestamp To Date",
                  "type": "dateFormat",
                  "attributes": {
                    "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                    "outputFormat": "yyyy/dd/MM"
                  },
                  "internal": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Transforms"
        ],
        "summary": "Delete a transform",
        "description": "Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform.\nA token with transform delete authority is required to call this API.",
        "operationId": "deleteTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content - indicates the request was successful but there is no content to be returned in the response.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:delete"
            ]
          }
        ]
      }
    },
    "/work-items": {
      "get": {
        "operationId": "listWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "List Work Items",
        "description": "This gets a collection of work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          },
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/completed": {
      "get": {
        "operationId": "completedWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Completed Work Items",
        "description": "This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.",
            "required": false
          },
          {
            "$ref": "#/paths/~1search/post/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1sources/get/parameters/2"
          }
        ],
        "responses": {
          "200": {
            "description": "List of completed work items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/count": {
      "get": {
        "operationId": "countWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Count Work Items",
        "description": "This gets a count of work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsCount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/completed/count": {
      "get": {
        "operationId": "countCompletedWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Count Completed Work Items",
        "description": "This gets a count of completed work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsCount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/summary": {
      "get": {
        "operationId": "summaryWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Work Items Summary",
        "description": "This gets a summary of work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsSummary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/{id}": {
      "get": {
        "operationId": "getWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Get a Work Item",
        "description": "This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the work item."
          }
        ],
        "responses": {
          "200": {
            "description": "The work item with the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "completeWorkItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Complete a Work Item",
        "description": "This API completes a work item. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A WorkItems object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/approve/{approvalItemId}": {
      "post": {
        "operationId": "approveApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Approve an Approval Item",
        "description": "This API approves an Approval Item. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "approvalItemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the approval item.",
            "example": "1211bcaa32112bcef6122adb21cef1ac"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/reject/{approvalItemId}": {
      "post": {
        "operationId": "rejectApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Reject an Approval Item",
        "description": "This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "approvalItemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the approval item.",
            "example": "1211bcaa32112bcef6122adb21cef1ac"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/bulk-approve/{id}": {
      "post": {
        "operationId": "bulkApproveApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Bulk approve Approval Items",
        "description": "This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/bulk-reject/{id}": {
      "post": {
        "operationId": "bulkRejectApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Bulk reject Approval Items",
        "description": "This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/submit-account-selection": {
      "post": {
        "operationId": "submitAccountSelection",
        "tags": [
          "Work Items"
        ],
        "summary": "Submit Account Selections",
        "description": "This API submits account selections. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              },
              "example": {
                "fieldName": "fieldValue"
              }
            }
          },
          "description": "Account Selection Data map, keyed on fieldName"
        },
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1search/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1sources/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1sources/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1sources/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1sources/get/responses/500"
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Bearer token (JWT). See [IdentityNow REST API Authentication](https://developer.sailpoint.com/docs/authentication.html) for more information.\n- Directions for generating a [personal access token](https://developer.sailpoint.com/docs/authentication.html#personal-access-tokens)\n- Directions using [client credentials flow](https://developer.sailpoint.com/docs/authentication.html#client-credentials-grant-flow)\n- Directions for using [authorization code flow](https://developer.sailpoint.com/docs/authentication.html#authorization-code-grant-flow)\n\nWhich authentication method should I choose?  See our [guide](https://developer.sailpoint.com/docs/authentication.html#which-oauth-2-0-grant-flow-should-i-use)\n\nLearn more about how to find your `tokenUrl` and `authorizationUrl` [in our docs](https://developer.sailpoint.com/docs/authentication.html#finding-your-tenant-s-oauth-details)\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://{tenant}.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://{tenant}.identitynow.com/oauth/authorize",
            "tokenUrl": "https://{tenant}.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          }
        }
      }
    },
    "schemas": {
      "AccessRequest": {
        "type": "object",
        "properties": {
          "requestedFor": {
            "description": "A list of Identity IDs for whom the Access is requested. If it's a Revoke request, there can only be one Identity ID.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "2c918084660f45d6016617daa9210584"
            }
          },
          "requestType": {
            "type": "string",
            "enum": [
              "GRANT_ACCESS",
              "REVOKE_ACCESS"
            ],
            "description": "Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field. Currently REVOKE_ACCESS is not supported for entitlements.",
            "example": "GRANT_ACCESS"
          },
          "requestedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRequestItem"
            }
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                "requestedAppName": "test-app"
              }
            },
            "example": {
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
              "requestedAppName": "test-app"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities."
          }
        },
        "required": [
          "requestedFor",
          "requestedItems"
        ]
      },
      "AccessRequestItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ACCESS_PROFILE",
              "ROLE",
              "ENTITLEMENT"
            ],
            "description": "The type of the item being requested.",
            "example": "ACCESS_PROFILE"
          },
          "id": {
            "type": "string",
            "description": "ID of Role, Access Profile or Entitlement being requested.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "comment": {
            "type": "string",
            "description": "Comment provided by requester.\n* Comment is required when the request is of type Revoke Access.\n",
            "example": "Requesting access profile for John Doe"
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                "requestedAppName": "test-app"
              }
            },
            "example": {
              "requestedAppName": "test-app",
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities."
          },
          "removeDate": {
            "type": "string",
            "description": "The date the role or access profile is no longer assigned to the specified identity.\n* Specify a date in the future.\n* The current SLA for the deprovisioning is 24 hours.\n* This date can be modified to either extend or decrease the duration of access item assignments for the specified identity.\n* Currently it is not supported for entitlements.\n",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "AccessProfileDocument": {
        "description": "This is more of a complete representation of an access profile.  ",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "$ref": "#/components/schemas/RoleDocument/allOf/1"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              "entitlements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntitlementDocument/allOf/1"
                }
              },
              "entitlementCount": {
                "type": "integer"
              },
              "tags": {
                "$ref": "#/components/schemas/RoleDocument/allOf/2/properties/tags"
              }
            }
          }
        ]
      },
      "AccessProfileSummary": {
        "description": "This is a summary representation of an access profile.  ",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleSummary/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              "owner": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/1"
              },
              "revocable": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AccessReviewReassignment": {
        "type": "object",
        "properties": {
          "reassign": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReassignmentReference"
            }
          },
          "reassignTo": {
            "type": "string",
            "description": "The ID of the identity to which the certification is reassigned",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "reason": {
            "type": "string",
            "description": "The reason comment for why the reassign was made",
            "example": "reassigned for some reason"
          }
        },
        "required": [
          "reassign",
          "reassignTo",
          "reason"
        ]
      },
      "Account": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "id": {
                "description": "System-generated unique ID of the Object",
                "type": "string",
                "example": "id12345",
                "readOnly": true
              },
              "name": {
                "description": "Name of the Object",
                "type": "string",
                "example": "aName"
              },
              "created": {
                "description": "Creation date of the Object",
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "modified": {
                "description": "Last modification date of the Object",
                "type": "string",
                "format": "date-time",
                "readOnly": true
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "sourceId": {
                "type": "string",
                "example": "2c9180835d2e5168015d32f890ca1581"
              },
              "identityId": {
                "type": "string",
                "example": "2c9180835d2e5168015d32f890ca1581"
              },
              "attributes": {
                "type": "object"
              },
              "authoritative": {
                "type": "boolean"
              },
              "description": {
                "type": "string"
              },
              "disabled": {
                "type": "boolean"
              },
              "locked": {
                "type": "boolean"
              },
              "nativeIdentity": {
                "type": "string"
              },
              "systemAccount": {
                "type": "boolean"
              },
              "uncorrelated": {
                "type": "boolean"
              },
              "uuid": {
                "type": "string"
              },
              "manuallyCorrelated": {
                "type": "boolean"
              },
              "hasEntitlements": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AccountActivity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the account activity itself",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2018-10-19T13:49:37.385Z"
          },
          "completionStatus": {
            "nullable": true,
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "INCOMPLETE",
              "PENDING"
            ]
          },
          "type": {
            "type": "string",
            "example": "appRequest"
          },
          "requesterIdentitySummary": {
            "$ref": "#/components/schemas/AccountActivity/properties/targetIdentitySummary"
          },
          "targetIdentitySummary": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of this identity summary",
                "example": "ff80818155fe8c080155fe8d925b0316"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of identity",
                "example": "SailPoint Services"
              },
              "identityId": {
                "type": "string",
                "description": "ID of the identity that this summary represents",
                "example": "c15b9f5cca5a4e9599eaa0e64fa921bd"
              },
              "completed": {
                "type": "boolean",
                "description": "Indicates if all access items for this summary have been decided on"
              }
            }
          },
          "errors": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sailpoint.connector.ConnectorException: java.lang.InterruptedException: Timeout waiting for response to message 0 from client 57a4ab97-ab3f-4aef-9fe2-0eaf15c73d26 after 60 seconds."
            ]
          },
          "warnings": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Some warning, another warning"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Item id",
                  "example": "2725138ee34949beb0d6cc982d2d4625"
                },
                "name": {
                  "type": "string",
                  "description": "Human-readable display name of item"
                },
                "requested": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time item was requested",
                  "example": "2017-07-11T18:45:37.098Z"
                },
                "approvalStatus": {
                  "$ref": "#/components/schemas/WorkItems/properties/state"
                },
                "provisioningStatus": {
                  "type": "string",
                  "enum": [
                    "PENDING",
                    "FINISHED",
                    "UNVERIFIABLE",
                    "COMMITED",
                    "FAILED",
                    "RETRY"
                  ],
                  "description": "Provisioning state of an account activity item"
                },
                "requesterComment": {
                  "$ref": "#/components/schemas/AccountActivity/properties/items/items/properties/reviewerComment"
                },
                "reviewerIdentitySummary": {
                  "$ref": "#/components/schemas/AccountActivity/properties/targetIdentitySummary"
                },
                "reviewerComment": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "commenterId": {
                      "type": "string",
                      "description": "Id of the identity making the comment",
                      "example": "2c918084660f45d6016617daa9210584"
                    },
                    "commenterName": {
                      "type": "string",
                      "description": "Human-readable display name of the identity making the comment",
                      "example": "Adam Kennedy"
                    },
                    "body": {
                      "type": "string",
                      "description": "Content of the comment",
                      "example": "Et quam massa maximus vivamus nisi ut urna tincidunt metus elementum erat."
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time comment was made",
                      "example": "2017-07-11T18:45:37.098Z"
                    }
                  }
                },
                "operation": {
                  "type": "string",
                  "enum": [
                    "ADD",
                    "CREATE",
                    "MODIFY",
                    "DELETE",
                    "DISABLE",
                    "ENABLE",
                    "UNLOCK",
                    "LOCK",
                    "REMOVE"
                  ],
                  "description": "Represents an operation in an account activity item"
                },
                "attribute": {
                  "type": "string",
                  "description": "Attribute to which account activity applies",
                  "nullable": true,
                  "example": "detectedRoles"
                },
                "value": {
                  "type": "string",
                  "description": "Value of attribute",
                  "nullable": true,
                  "example": "Treasury Analyst [AccessProfile-1529010191212]"
                },
                "nativeIdentity": {
                  "nullable": true,
                  "type": "string",
                  "description": "Native identity in the target system to which the account activity applies",
                  "example": "Sandie.Camero"
                },
                "sourceId": {
                  "type": "string",
                  "description": "Id of Source to which account activity applies",
                  "example": "2c91808363ef85290164000587130c0c"
                },
                "accountRequestInfo": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "requestedObjectId": {
                      "type": "string",
                      "description": "Id of requested object",
                      "example": "2c91808563ef85690164001c31140c0c"
                    },
                    "requestedObjectName": {
                      "type": "string",
                      "description": "Human-readable name of requested object",
                      "example": "Treasury Analyst"
                    },
                    "requestedObjectType": {
                      "$ref": "#/components/schemas/RequestableObjectType"
                    }
                  },
                  "description": "If an account activity item is associated with an access request, captures details of that request."
                },
                "clientMetadata": {
                  "nullable": true,
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Arbitrary key-value pairs, if any were included in the corresponding access request item"
                },
                "removeDate": {
                  "nullable": true,
                  "type": "string",
                  "description": "The date the role or access profile is no longer assigned to the specified identity.",
                  "format": "date-time",
                  "example": "2020-07-11T00:00:00Z"
                }
              }
            }
          },
          "executionStatus": {
            "type": "string",
            "enum": [
              "EXECUTING",
              "VERIFYING",
              "TERMINATED",
              "COMPLETED"
            ]
          },
          "clientMetadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs, if any were included in the corresponding access request"
          }
        }
      },
      "AccountActivitySearchedItem": {
        "description": "AccountActivity",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "created": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "modified": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "stage": {
                "type": "string"
              },
              "origin": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "requester": {
                "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
              },
              "recipient": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "trackingNumber": {
                "type": "string"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "warnings": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "approvals": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "comment": {
                            "type": "string"
                          },
                          "commenter": {
                            "type": "string"
                          },
                          "date": {
                            "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                          }
                        }
                      }
                    },
                    "created": {
                      "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                    },
                    "modified": {
                      "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                    },
                    "owner": {
                      "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
                    },
                    "result": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              },
              "originalRequests": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "attributeRequests": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/expansionItems/items/properties/attributeRequests/items"
                      }
                    },
                    "op": {
                      "type": "string"
                    },
                    "source": {
                      "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
                    }
                  }
                }
              },
              "expansionItems": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "cause": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "attributeRequests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "op": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "source": {
                      "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
                    }
                  }
                }
              },
              "accountRequests": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "attributeRequests": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/expansionItems/items/properties/attributeRequests/items"
                      }
                    },
                    "op": {
                      "type": "string"
                    },
                    "provisioningTarget": {
                      "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "ticketId": {
                          "type": "string"
                        }
                      }
                    },
                    "source": {
                      "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
                    }
                  }
                }
              },
              "sources": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AccountAttributes": {
        "type": "object",
        "required": [
          "attributes"
        ],
        "properties": {
          "attributes": {
            "description": "The schema attribute values for the account",
            "type": "object",
            "example": {
              "city": "Austin",
              "displayName": "John Doe",
              "userName": "jdoe",
              "sAMAccountName": "jDoe",
              "mail": "john.doe@sailpoint.com"
            }
          }
        }
      },
      "AccountDocument": {
        "description": "Account",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string"
                  },
                  "source": {
                    "$ref": "#/components/schemas/AccountActivitySearchedItem/allOf/1/properties/recipient"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "privileged": {
                    "type": "boolean"
                  },
                  "manuallyCorrelated": {
                    "type": "boolean"
                  },
                  "passwordLastSet": {
                    "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                  },
                  "entitlementAttributes": {
                    "type": "object",
                    "nullable": true,
                    "description": "a map or dictionary of key/value pairs"
                  },
                  "created": {
                    "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "modified": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "attributes": {
                "type": "object",
                "description": "a map or dictionary of key/value pairs"
              },
              "identity": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/1"
              },
              "access": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntitlementSummary"
                }
              },
              "entitlementCount": {
                "type": "integer"
              },
              "uncorrelated": {
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/RoleDocument/allOf/2/properties/tags"
              }
            }
          }
        ]
      },
      "AccountsAsyncResult": {
        "description": "Accounts async response containing details on started async process",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "id of the task",
            "type": "string",
            "example": "2c91808474683da6017468693c260195"
          }
        }
      },
      "AccountToggleRequest": {
        "description": "Request used for account enable/disable",
        "type": "object",
        "properties": {
          "externalVerificationId": {
            "description": "If set, an external process validates that the user wants to proceed with this request.",
            "type": "string",
            "example": "3f9180835d2e5168015d32f890ca1581"
          },
          "forceProvisioning": {
            "description": "If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated. Providing 'true' for an unlocked account will add and process 'Unlock' operation by the workflow.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "AccountUnlockRequest": {
        "description": "Request used for account unlock",
        "type": "object",
        "properties": {
          "externalVerificationId": {
            "description": "If set, an external process validates that the user wants to proceed with this request.",
            "type": "string",
            "example": "3f9180835d2e5168015d32f890ca1581"
          },
          "unlockIDNAccount": {
            "description": "If set, the IDN account is unlocked after the workflow completes.",
            "type": "boolean",
            "example": false
          },
          "forceProvisioning": {
            "description": "If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "Aggregation": {
        "description": "Aggregation",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "duration": {
                "type": "integer"
              },
              "avgDuration": {
                "type": "integer"
              },
              "changedAccounts": {
                "type": "integer"
              },
              "nextScheduled": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "startTime": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "sourceOwner": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ApprovalItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the approval item",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "account": {
            "type": "string",
            "description": "The account referenced by the approval item",
            "example": "john.smith"
          },
          "application": {
            "type": "string",
            "description": "The name the application/source",
            "example": "Active Directory"
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the attribute",
            "example": "emailAddress"
          },
          "attributeOperation": {
            "type": "string",
            "description": "The operation of the attribute",
            "example": "update"
          },
          "attributeValue": {
            "type": "string",
            "description": "The value of the attribute",
            "example": "a@b.com"
          },
          "state": {
            "$ref": "#/components/schemas/WorkItems/properties/state"
          }
        }
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the campaign.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign.",
            "example": "Campaign Name"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN"
            ]
          },
          "campaignType": {
            "type": "string",
            "enum": [
              "MANAGER",
              "SOURCE_OWNER",
              "SEARCH"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the campaign set by the admin who created it.",
            "nullable": true,
            "example": "A description of the campaign"
          }
        }
      },
      "Certification": {
        "type": "object",
        "properties": {
          "id": {
            "example": "2c9180835d2e5168015d32f890ca1581",
            "type": "string"
          },
          "name": {
            "example": "Source Owner Access Review for Employees [source]",
            "type": "string"
          },
          "campaign": {
            "$ref": "#/components/schemas/Campaign"
          },
          "completed": {
            "type": "boolean",
            "description": "Have all decisions been made?",
            "example": true
          },
          "identitiesCompleted": {
            "type": "integer",
            "description": "The number of identities for whom all decisions have been made and are complete.",
            "example": 5
          },
          "identitiesTotal": {
            "type": "integer",
            "description": "The total number of identities in the Certification, both complete and incomplete.",
            "example": 10
          },
          "created": {
            "example": "2018-06-25T20:22:28.104Z",
            "format": "date-time",
            "type": "string"
          },
          "modified": {
            "example": "2018-06-25T20:22:28.104Z",
            "format": "date-time",
            "type": "string"
          },
          "decisionsMade": {
            "type": "integer",
            "description": "The number of approve/revoke/acknowledge decisions that have been made.",
            "example": 20
          },
          "decisionsTotal": {
            "type": "integer",
            "description": "The total number of approve/revoke/acknowledge decisions.",
            "example": 40
          },
          "due": {
            "type": "string",
            "format": "date-time",
            "description": "The due date of the certification.",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "signed": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date the reviewer signed off on the Certification.",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "reviewer": {
            "$ref": "#/components/schemas/Reviewer"
          },
          "reassignment": {
            "$ref": "#/components/schemas/Reassignment"
          },
          "hasErrors": {
            "type": "boolean",
            "example": false
          },
          "errorMessage": {
            "nullable": true,
            "type": "string",
            "example": "The certification has an error"
          },
          "phase": {
            "type": "string",
            "enum": [
              "STAGED",
              "ACTIVE",
              "SIGNED"
            ],
            "example": "ACTIVE"
          }
        }
      },
      "CertificationReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the certification.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "name": {
            "type": "string",
            "description": "The name of the certification.",
            "example": "Certification Name"
          },
          "type": {
            "type": "string",
            "enum": [
              "CERTIFICATION"
            ]
          },
          "reviewer": {
            "$ref": "#/components/schemas/Reviewer"
          }
        }
      },
      "EntitlementDocument": {
        "description": "Entitlement",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "attribute": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "modified": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "synced": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "displayName": {
                "type": "string"
              },
              "source": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              "privileged": {
                "type": "boolean"
              },
              "identityCount": {
                "type": "integer"
              },
              "tags": {
                "$ref": "#/components/schemas/RoleDocument/allOf/2/properties/tags"
              }
            }
          }
        ]
      },
      "EntitlementSummary": {
        "description": "EntitlementReference",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleSummary/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              "privileged": {
                "type": "boolean"
              },
              "attribute": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "standalone": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Event": {
        "description": "Event",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id",
              "name",
              "_type"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "_type": {
                "description": "Enum representing the currently supported document types.\n\nAdditional values may be added in the future without notice.",
                "type": "string",
                "enum": [
                  "accessprofile",
                  "accountactivity",
                  "account",
                  "aggregation",
                  "entitlement",
                  "event",
                  "identity",
                  "role"
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "created": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "synced": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "example": "2018-06-25T20:22:28.104Z",
                "description": "A date-time in ISO-8601 format"
              },
              "action": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "actor": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "type": {
                    "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type"
                  }
                }
              },
              "target": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/actor"
              },
              "stack": {
                "type": "string"
              },
              "trackingNumber": {
                "type": "string"
              },
              "ipAddress": {
                "type": "string"
              },
              "details": {
                "type": "string"
              },
              "attributes": {
                "type": "object"
              },
              "objects": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "operation": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "technicalName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "IdentityDocument": {
        "description": "Identity",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string",
                    "example": "John Q. Doe"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "created": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "modified": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "synced": {
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "phone": {
                "type": "string"
              },
              "inactive": {
                "type": "boolean"
              },
              "protected": {
                "type": "boolean"
              },
              "status": {
                "type": "string"
              },
              "employeeNumber": {
                "type": "string"
              },
              "manager": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/1",
                "nullable": true
              },
              "isManager": {
                "type": "boolean"
              },
              "identityProfile": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              "source": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "2c91808568c529c60168cca6f90c1313"
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              },
              "attributes": {
                "type": "object",
                "description": "a map or dictionary of key/value pairs"
              },
              "processingState": {
                "type": "string",
                "nullable": true
              },
              "processingDetails": {
                "nullable": true,
                "type": "object",
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                  },
                  "stage": {
                    "type": "string"
                  },
                  "retryCount": {
                    "type": "integer"
                  },
                  "stackTrace": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "accounts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDocument/allOf/1"
                }
              },
              "accountCount": {
                "type": "integer"
              },
              "apps": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "source": {
                          "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                        },
                        "account": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "accountId": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "appCount": {
                "type": "integer"
              },
              "access": {
                "type": "array",
                "items": {
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "ACCESS_PROFILE": "#/components/schemas/AccessProfileSummary",
                      "ENTITLEMENT": "#/components/schemas/EntitlementSummary",
                      "ROLE": "#/components/schemas/RoleSummary"
                    }
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AccessProfileSummary"
                    },
                    {
                      "$ref": "#/components/schemas/EntitlementSummary"
                    },
                    {
                      "$ref": "#/components/schemas/RoleSummary"
                    }
                  ]
                }
              },
              "accessCount": {
                "type": "integer"
              },
              "accessProfileCount": {
                "type": "integer"
              },
              "entitlementCount": {
                "type": "integer"
              },
              "roleCount": {
                "type": "integer"
              },
              "owns": {
                "type": "object",
                "properties": {
                  "sources": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    }
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    }
                  },
                  "accessProfiles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    }
                  },
                  "apps": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    }
                  },
                  "governanceGroups": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                    }
                  },
                  "fallbackApprover": {
                    "type": "boolean"
                  }
                }
              },
              "tags": {
                "$ref": "#/components/schemas/RoleDocument/allOf/2/properties/tags"
              }
            }
          }
        ]
      },
      "IdentityProfile": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type",
                "description": "DTO type"
              },
              "id": {
                "type": "string",
                "description": "ID of the object to which this reference applies",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of the object to which this reference applies",
                "example": "William Wilson"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the Identity Profile.",
                "example": "My custom flat file profile"
              },
              "owner": {
                "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                "description": "The owner of the Identity Profile."
              },
              "priority": {
                "type": "integer",
                "format": "int64",
                "description": "The priority for an Identity Profile.",
                "example": 10
              },
              "authoritativeSource": {
                "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                "description": "The authoritative source for this Identity Profile.",
                "example": {
                  "type": "SOURCE",
                  "id": "2c9180835d191a86015d28455b4b232a",
                  "name": "HR Active Directory"
                }
              },
              "identityRefreshRequired": {
                "type": "boolean",
                "description": "True if a identity refresh is needed. Typically triggered when a change on the source has been made."
              },
              "identityCount": {
                "type": "integer",
                "description": "The number of identities that belong to the Identity Profile.",
                "example": 8
              },
              "identityAttributeConfig": {
                "type": "object",
                "description": "Defines all the identity attribute mapping configurations. This defines how to generate or collect data for each identity attributes in identity refresh process.",
                "properties": {
                  "enabled": {
                    "description": "The backend will only promote values if the profile/mapping is enabled.",
                    "type": "boolean",
                    "example": true
                  },
                  "attributeTransforms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Defines a transformation definition for an identity attribute.",
                      "properties": {
                        "identityAttributeName": {
                          "type": "string",
                          "description": "Name of the identity attribute.",
                          "example": "email"
                        },
                        "transformDefinition": {
                          "description": "The seaspray transformation definition.",
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the transform definition.",
                              "example": "accountAttribute"
                            },
                            "attributes": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object"
                              },
                              "description": "Arbitrary key-value pairs to store any metadata for the object",
                              "example": {
                                "attributeName": "e-mail",
                                "sourceName": "MySource",
                                "sourceId": "2c9180877a826e68017a8c0b03da1a53"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "identityExceptionReportReference": {
                "type": "object",
                "properties": {
                  "taskResultId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The id of the task result.",
                    "example": "2c918086795cd09201795d5f7d7533df"
                  },
                  "reportName": {
                    "type": "string",
                    "example": "My annual report",
                    "description": "The name of the report."
                  }
                }
              },
              "hasTimeBasedAttr": {
                "description": "Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "IdentityReferenceWithNameAndEmail": {
        "type": "object",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "description": "The type can only be IDENTITY. This is read-only",
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Identity id.",
            "example": "5168015d32f890ca15812c9180835d2e"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of identity. This is read-only",
            "example": "Alison Ferguso"
          },
          "email": {
            "type": "string",
            "description": "Email address of identity. This is read-only",
            "example": "alison.ferguso@identitysoon.com"
          }
        }
      },
      "ProvisioningConfig": {
        "type": "object",
        "description": "Specification of a Service Desk integration provisioning configuration.",
        "properties": {
          "universalManager": {
            "description": "Specifies whether this configuration is used to manage provisioning requests for all sources from the org.  If true, no managedResourceRefs are allowed.",
            "type": "boolean",
            "readOnly": true
          },
          "managedResourceRefs": {
            "description": "References to sources for the Service Desk integration template.  May only be specified if universalManager is false.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProfile/allOf/0",
              "default": {
                "type": "SOURCE"
              }
            }
          },
          "planInitializerScript": {
            "description": "This is a reference to a plan initializer script.",
            "type": "object",
            "properties": {
              "source": {
                "description": "This is a Rule that allows provisioning instruction changes.",
                "type": "string"
              }
            }
          }
        }
      },
      "ProvisioningPolicy": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "usageType": {
            "type": "string",
            "nullable": false,
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "ASSIGN",
              "UNASSIGN",
              "CREATE_GROUP",
              "UPDATE_GROUP",
              "DELETE_GROUP",
              "REGISTER",
              "CREATE_IDENTITY",
              "UPDATE_IDENTITY",
              "EDIT_GROUP",
              "ENABLE",
              "DISABLE",
              "UNLOCK",
              "CHANGE_PASSWORD"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the attribute.",
                  "example": "userName"
                },
                "transform": {
                  "type": "object"
                },
                "attributes": {
                  "type": "object"
                },
                "isRequired": {
                  "type": "boolean",
                  "readOnly": true,
                  "description": "Flag indicating whether or not the attribute is required.",
                  "default": false
                },
                "type": {
                  "type": "string",
                  "description": "The type of the attribute.",
                  "example": "string"
                },
                "isMultiValued": {
                  "type": "boolean",
                  "description": "Flag indicating whether or not the attribute is multi-valued.",
                  "default": false
                }
              }
            }
          }
        }
      },
      "QueuedCheckConfigDetails": {
        "description": "Configuration of maximum number days and interval for checking Service Desk integration queue status",
        "required": [
          "provisioningStatusCheckIntervalMinutes",
          "provisioningMaxStatusCheckDays"
        ],
        "type": "object",
        "properties": {
          "provisioningStatusCheckIntervalMinutes": {
            "description": "interval in minutes between status checks",
            "type": "string",
            "example": 30
          },
          "provisioningMaxStatusCheckDays": {
            "description": "maximum number of days to check",
            "type": "string",
            "example": 2
          }
        }
      },
      "Reassignment": {
        "type": "object",
        "nullable": true,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/CertificationReference"
          },
          "comment": {
            "type": "string",
            "description": "The comment entered when the Certification was reassigned",
            "example": "Reassigned for a reason"
          }
        }
      },
      "ReassignmentReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of item or identity being reassigned.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "type": {
            "type": "string",
            "enum": [
              "TARGET_SUMMARY",
              "ITEM",
              "IDENTITY_SUMMARY"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "RemediationItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the certification",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "targetId": {
            "type": "string",
            "description": "The ID of the certification target",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "targetName": {
            "type": "string",
            "description": "The name of the certification target",
            "example": "john.smith"
          },
          "targetDisplayName": {
            "type": "string",
            "description": "The display name of the certification target",
            "example": "emailAddress"
          },
          "applicationName": {
            "type": "string",
            "description": "The name of the application/source",
            "example": "Active Directory"
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the attribute being certified",
            "example": "phoneNumber"
          },
          "attributeOperation": {
            "type": "string",
            "description": "The operation of the certification on the attribute",
            "example": "update"
          },
          "attributeValue": {
            "type": "string",
            "description": "The value of the attribute being certified",
            "example": "512-555-1212"
          },
          "nativeIdentity": {
            "type": "string",
            "description": "The native identity of the target",
            "example": "jason.smith2"
          }
        }
      },
      "RequestableObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the requestable object itself",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the requestable object",
            "example": "Applied Research Access"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "description": {
            "type": "string",
            "description": "Description of the requestable object.",
            "example": "Access to research information, lab results, and schematics."
          },
          "type": {
            "$ref": "#/components/schemas/RequestableObjectType"
          },
          "requestStatus": {
            "$ref": "#/components/schemas/RequestableObjectRequestStatus"
          },
          "identityRequestId": {
            "type": "string",
            "description": "If *requestStatus* is *PENDING*, indicates the id of the associated account activity.",
            "nullable": true,
            "example": null
          },
          "ownerRef": {
            "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail"
          },
          "requestCommentsRequired": {
            "type": "boolean",
            "description": "Whether the requester must provide comments when requesting the object."
          }
        }
      },
      "RequestableObjectType": {
        "type": "string",
        "enum": [
          "ACCESS_PROFILE",
          "ROLE"
        ],
        "description": "Enum represented the currently supported requestable object types. Additional values may be added in the future without notice.",
        "example": "ACCESS_PROFILE"
      },
      "RequestableObjectRequestStatus": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "PENDING",
          "ASSIGNED"
        ],
        "description": "Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results."
      },
      "Reviewer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the reviewer.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "name": {
            "type": "string",
            "description": "The name of the reviewer.",
            "example": "Reviewer Name"
          },
          "email": {
            "type": "string",
            "description": "The email of the reviewing identity.",
            "example": "reviewer@test.com"
          },
          "type": {
            "type": "string",
            "enum": [
              "IDENTITY"
            ]
          },
          "created": {
            "nullable": true,
            "example": "2018-06-25T20:22:28.104Z",
            "format": "date-time",
            "type": "string"
          },
          "modified": {
            "nullable": true,
            "example": "2018-06-25T20:22:28.104Z",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "RoleDocument": {
        "description": "Role",
        "allOf": [
          {
            "$ref": "#/components/schemas/Event/allOf/0"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
              },
              {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "created": {
                    "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                  },
                  "modified": {
                    "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                  },
                  "synced": {
                    "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "requestable": {
                    "type": "boolean"
                  },
                  "requestCommentsRequired": {
                    "type": "boolean"
                  },
                  "owner": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/RoleSummary/allOf/0/allOf/1/properties/type"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "accessProfiles": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityDocument/allOf/2/properties/source"
                }
              },
              "accessProfileCount": {
                "type": "integer"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "TAG_1",
                  "TAG_2"
                ]
              }
            }
          }
        ]
      },
      "RoleSummary": {
        "description": "Role",
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityDocument/allOf/1"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "ACCOUNT_CORRELATION_CONFIG",
                      "ACCESS_PROFILE",
                      "ACCESS_REQUEST_APPROVAL",
                      "ACCOUNT",
                      "APPLICATION",
                      "CAMPAIGN",
                      "CAMPAIGN_FILTER",
                      "CERTIFICATION",
                      "CLUSTER",
                      "CONNECTOR_SCHEMA",
                      "ENTITLEMENT",
                      "GOVERNANCE_GROUP",
                      "IDENTITY",
                      "IDENTITY_PROFILE",
                      "IDENTITY_REQUEST",
                      "LIFECYCLE_STATE",
                      "PASSWORD_POLICY",
                      "ROLE",
                      "RULE",
                      "SOD_POLICY",
                      "SOURCE",
                      "TAG_CATEGORY",
                      "TASK_RESULT",
                      "REPORT_RESULT",
                      "SOD_VIOLATION",
                      "ACCOUNT_ACTIVITY"
                    ],
                    "description": "An enumeration of the types of DTOs supported within the IdentityNow infrastructure.",
                    "example": "IDENTITY"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/IdentityDocument/allOf/1"
              },
              "disabled": {
                "type": "boolean"
              },
              "revocable": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SearchDocument": {
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "accessprofile": "#/components/schemas/AccessProfileDocument",
            "accountactivity": "#/components/schemas/AccountActivitySearchedItem",
            "account": "#/components/schemas/AccountDocument",
            "aggregation": "#/components/schemas/Aggregation",
            "entitlement": "#/components/schemas/EntitlementDocument",
            "event": "#/components/schemas/Event",
            "identity": "#/components/schemas/IdentityDocument",
            "role": "#/components/schemas/RoleDocument"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccessProfileDocument"
          },
          {
            "$ref": "#/components/schemas/AccountActivitySearchedItem"
          },
          {
            "$ref": "#/components/schemas/AccountDocument"
          },
          {
            "$ref": "#/components/schemas/Aggregation"
          },
          {
            "$ref": "#/components/schemas/EntitlementDocument"
          },
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "$ref": "#/components/schemas/IdentityDocument"
          },
          {
            "$ref": "#/components/schemas/RoleDocument"
          }
        ]
      },
      "SavedSearch": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "The saved search ID.\n",
                "type": "string",
                "example": "0de46054-fe90-434a-b84e-c6b3359d0c64"
              },
              "owner": {
                "description": "The owner of the saved search.\n",
                "$ref": "#/paths/~1scheduled-searches~1%7Bid%7D~1unsubscribe/post/requestBody/content/application~1json/schema"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the saved search.\n",
                "type": "string",
                "example": "Disabled accounts"
              },
              "description": {
                "description": "The description of the saved search.\n",
                "type": "string",
                "example": "Disabled accounts"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "public": {
                "description": "Indicates if the saved search is public.\n",
                "type": "boolean",
                "default": false
              },
              "created": {
                "description": "The date the saved search was initially created.\n",
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "modified": {
                "description": "The last date the saved search was modified.\n",
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "indices": {
                "description": "The names of the Elasticsearch indices in which to search.\n",
                "type": "array",
                "items": {
                  "description": "Enum representing the currently supported indices.\nAdditional values may be added in the future without notice.",
                  "type": "string",
                  "enum": [
                    "accessprofiles",
                    "accountactivities",
                    "accounts",
                    "aggregations",
                    "entitlements",
                    "events",
                    "identities",
                    "roles"
                  ]
                },
                "example": [
                  "identities"
                ]
              },
              "columns": {
                "description": "The columns to be returned (specifies the order in which they will be presented) for each document type.\n\nThe currently supported document types are: _accessprofile_, _accountactivity_, _account_, _aggregation_, _entitlement_, _event_, _identity_, and _role_.\n",
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "description": "The name of the field.\n",
                        "type": "string"
                      },
                      "header": {
                        "description": "The value of the header.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "field"
                    ]
                  }
                },
                "example": {
                  "identity": [
                    {
                      "field": "displayName",
                      "header": "Display Name"
                    },
                    {
                      "field": "email",
                      "header": "Work Email"
                    },
                    {
                      "field": "attributes.cloudLifecycleState",
                      "header": "Lifecycle State"
                    }
                  ]
                }
              },
              "query": {
                "description": "The search query using Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL.\n",
                "type": "string",
                "example": "@accounts(disabled:true)"
              },
              "fields": {
                "description": "The fields to be searched against in a multi-field query.\n",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "disabled"
                ]
              },
              "sort": {
                "description": "The fields to be used to sort the search results.\n",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "displayName"
                ]
              },
              "filters": {
                "nullable": true,
                "allOf": [
                  {
                    "type": "object",
                    "description": "The filters to be applied for each filtered field name.",
                    "example": {
                      "attributes.cloudAuthoritativeSource": {
                        "type": "EXISTS",
                        "exclude": true
                      },
                      "accessCount": {
                        "type": "RANGE",
                        "range": {
                          "lower": {
                            "value": "3"
                          }
                        }
                      },
                      "created": {
                        "type": "RANGE",
                        "range": {
                          "lower": {
                            "value": "2019-12-01",
                            "inclusive": true
                          },
                          "upper": {
                            "value": "2020-01-01"
                          }
                        }
                      },
                      "source.name": {
                        "type": "TERMS",
                        "terms": [
                          "HR Employees",
                          "Corporate Active Directory"
                        ],
                        "exclude": true
                      },
                      "protected": {
                        "type": "TERMS",
                        "terms": [
                          "true"
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Enum representing the currently supported filter types.\nAdditional values may be added in the future without notice.",
                        "type": "string",
                        "enum": [
                          "EXISTS",
                          "RANGE",
                          "TERMS"
                        ],
                        "example": "RANGE"
                      },
                      "range": {
                        "type": "object",
                        "description": "The range of values to be filtered.",
                        "properties": {
                          "lower": {
                            "description": "The lower bound of the range.",
                            "type": "object",
                            "required": [
                              "value"
                            ],
                            "properties": {
                              "value": {
                                "description": "The value of the range's endpoint.",
                                "type": "string"
                              },
                              "inclusive": {
                                "description": "Indicates if the endpoint is included in the range.",
                                "type": "boolean",
                                "default": false
                              }
                            }
                          },
                          "upper": {
                            "description": "The upper bound of the range.",
                            "$ref": "#/components/schemas/SavedSearch/allOf/2/properties/filters/allOf/1/properties/range/properties/lower"
                          }
                        }
                      },
                      "terms": {
                        "description": "The terms to be filtered.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "exclude": {
                        "description": "Indicates if the filter excludes results.",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            },
            "required": [
              "indices",
              "query"
            ]
          }
        ]
      },
      "Schedule": {
        "type": "object",
        "description": "The schedule information.\n",
        "properties": {
          "type": {
            "description": "Enum representing the currently supported schedule types.\n\nAdditional values may be added in the future without notice.\n",
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "CALENDAR"
            ],
            "example": "WEEKLY"
          },
          "months": {
            "$ref": "#/components/schemas/Schedule/properties/days",
            "description": "The months selected."
          },
          "days": {
            "description": "The days selected.\n",
            "example": {
              "type": "LIST",
              "values": [
                "MON",
                "WED",
                "FRI"
              ]
            },
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Enum representing the currently supported selector types.\n\nLIST - the *values* array contains one or more distinct values.\n\nRANGE - the *values* array contains two values: the start and end of the range, inclusive.\n\nAdditional values may be added in the future without notice.\n",
                "type": "string",
                "enum": [
                  "LIST",
                  "RANGE"
                ],
                "example": "LIST"
              },
              "values": {
                "description": "The selected values.\n",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "MON",
                  "WED"
                ]
              },
              "interval": {
                "nullable": true,
                "description": "The selected interval for RANGE selectors.\n",
                "type": "integer",
                "format": "int32",
                "example": 3
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          "hours": {
            "description": "The hours selected.\n",
            "example": {
              "type": "RANGE",
              "values": [
                "9",
                "18"
              ],
              "interval": 3
            },
            "$ref": "#/components/schemas/Schedule/properties/days"
          },
          "expiration": {
            "description": "The schedule expiration date. Latest possible expiration date is '2038-01-19T03:14:07+0000'\n",
            "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
          },
          "timeZoneId": {
            "description": "The ID of the time zone for the schedule.\n",
            "type": "string",
            "example": "GMT-06:00"
          }
        },
        "required": [
          "type",
          "hours"
        ]
      },
      "ScheduledSearch": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the scheduled search.\n",
                "type": "string",
                "example": "Daily disabled accounts"
              },
              "description": {
                "description": "The description of the scheduled search.\n",
                "type": "string",
                "example": "Daily disabled accounts"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "savedSearchId": {
                "description": "The ID of the saved search that will be executed.\n",
                "type": "string",
                "example": "554f1511-f0a1-4744-ab14-599514d3e57c"
              },
              "created": {
                "description": "The date the scheduled search was initially created.\n",
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "modified": {
                "description": "The last date the scheduled search was modified.\n",
                "$ref": "#/components/schemas/Event/allOf/1/properties/synced"
              },
              "schedule": {
                "$ref": "#/components/schemas/Schedule"
              },
              "recipients": {
                "description": "The email recipients.\n",
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1scheduled-searches~1%7Bid%7D~1unsubscribe/post/requestBody/content/application~1json/schema"
                }
              },
              "enabled": {
                "description": "Indicates if the scheduled search is enabled.\n",
                "type": "boolean",
                "default": false
              },
              "emailEmptyResults": {
                "description": "Indicates if email generation should not be suppressed if search returns no results.\n",
                "type": "boolean",
                "default": false
              },
              "displayQueryDetails": {
                "description": "Indicates if the generated email should include the query and search results preview (which could include PII).\n",
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "savedSearchId",
              "schedule",
              "recipients"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "The scheduled search ID.\n",
                "type": "string",
                "example": "0de46054-fe90-434a-b84e-c6b3359d0c64"
              },
              "owner": {
                "description": "The owner of the scheduled search.\n",
                "$ref": "#/paths/~1scheduled-searches~1%7Bid%7D~1unsubscribe/post/requestBody/content/application~1json/schema"
              },
              "ownerId": {
                "description": "The ID of the scheduled search owner",
                "type": "string",
                "example": "2c9180867624cbd7017642d8c8c81f67"
              }
            }
          }
        ]
      },
      "ServiceDeskIntegrationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Account/allOf/0"
          },
          {
            "type": "object",
            "description": "Specification of a Service Desk integration",
            "required": [
              "description",
              "type",
              "attributes"
            ],
            "properties": {
              "description": {
                "description": "Description of the Service Desk integration",
                "type": "string",
                "example": "A very nice Service Desk integration"
              },
              "type": {
                "description": "Type of the Service Desk integration",
                "type": "string",
                "default": "ServiceNowSDIM"
              },
              "ownerRef": {
                "description": "Reference to the identity that is the owner of this Service Desk integration",
                "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                "default": {
                  "type": "IDENTITY"
                }
              },
              "clusterRef": {
                "description": "Reference to the source cluster for this Service Desk integration",
                "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                "default": {
                  "type": "CLUSTER"
                }
              },
              "cluster": {
                "description": "ID of the cluster for the Service Desk integration (replaced by clusterRef, retained for backward compatibility)",
                "type": "string",
                "example": "xyzzy999",
                "deprecated": true
              },
              "managedSources": {
                "description": "Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility)",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "deprecated": true
              },
              "provisioningConfig": {
                "description": "The 'provisioningConfig' property specifies the configuration used to provision integrations.",
                "$ref": "#/components/schemas/ProvisioningConfig"
              },
              "attributes": {
                "description": "Attributes of the Service Desk integration.  Validation constraints enforced by the implementation.",
                "type": "object",
                "additionalProperties": true
              },
              "beforeProvisioningRule": {
                "description": "Reference to beforeProvisioningRule for this Service Desk integration",
                "$ref": "#/components/schemas/IdentityProfile/allOf/0",
                "default": {
                  "type": "RULE"
                }
              }
            }
          }
        ]
      },
      "ServiceDeskIntegrationTemplateDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Account/allOf/0"
          },
          {
            "type": "object",
            "description": "This is the model for a Service Desk integration template, used to create and edit Service Desk Integrations.",
            "required": [
              "type",
              "attributes",
              "provisioningConfig"
            ],
            "properties": {
              "type": {
                "description": "The 'type' property specifies the type of the Service Desk integration template.",
                "type": "string",
                "example": "Web Service SDIM",
                "default": "Web Service SDIM"
              },
              "attributes": {
                "description": "The 'attributes' property value is a map of attributes available for integrations using this Service Desk integration template.",
                "type": "object",
                "additionalProperties": true
              },
              "provisioningConfig": {
                "description": "The 'provisioningConfig' property specifies the configuration used to provision integrations using the template.",
                "$ref": "#/components/schemas/ProvisioningConfig"
              }
            }
          }
        ]
      },
      "ServiceDeskIntegrationTemplateType": {
        "description": "This represents a Service Desk Integration template type.",
        "required": [
          "type",
          "scriptName"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "This is the name of the type.",
            "example": "aName",
            "type": "string"
          },
          "type": {
            "description": "This is the type value for the type.",
            "example": "aType",
            "type": "string"
          },
          "scriptName": {
            "description": "This is the scriptName attribute value for the type.",
            "example": "aScriptName",
            "type": "string"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "the id of the Source",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the source",
            "example": "This is the corporate directory."
          },
          "owner": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Reference to an owning Identity Object"
          },
          "cluster": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Reference to the associated Cluster",
            "example": {
              "type": "CLUSTER",
              "id": "2c9180866166b5b0016167c32ef31a66",
              "name": "Corporate Cluster"
            }
          },
          "accountCorrelationConfig": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Reference to a Correlation Config object",
            "example": {
              "type": "ACCOUNT_CORRELATION_CONFIG",
              "id": "2c9180855d191c59015d28583727245a",
              "name": "Directory [source-62867] Account Correlation"
            }
          },
          "accountCorrelationRule": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Reference to a Rule that can do COMPLEX the correlation, should only be used when accountCorrelationConfig can't be used."
          },
          "managerCorrelationMapping": {
            "description": "Filter Object used during manager correlation to match incoming manager values to an existing manager's Account/Identity",
            "type": "object",
            "properties": {
              "accountAttribute": {
                "type": "string",
                "description": "Name of the attribute to use for manager correlation. The value found on the account attribute will be used to lookup the manager's identity.",
                "example": "manager"
              },
              "identityAttribute": {
                "type": "string",
                "description": "Name of the identity attribute to search when trying to find a manager using the value from the accountAttribute.",
                "example": "manager"
              }
            }
          },
          "managerCorrelationRule": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Reference to the ManagerCorrelationRule, only used when a simple filter isn't sufficient."
          },
          "beforeProvisioningRule": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Rule that runs on the CCG and allows for customization of provisioning plans before the connector is called."
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProfile/allOf/0"
            },
            "description": "List of references to Schema objects",
            "example": [
              {
                "type": "CONNECTOR_SCHEMA",
                "id": "2c9180835d191a86015d28455b4b232a",
                "name": "account"
              },
              {
                "type": "CONNECTOR_SCHEMA",
                "id": "2c9180835d191a86015d28455b4b232b",
                "name": "group"
              }
            ]
          },
          "passwordPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProfile/allOf/0"
            },
            "description": "List of references to the associated PasswordPolicy objects.",
            "example": [
              {
                "type": "PASSWORD_POLICY",
                "id": "2c9180855d191c59015d291ceb053980",
                "name": "Corporate Password Policy"
              }
            ]
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AUTHENTICATE",
                "COMPOSITE",
                "DIRECT_PERMISSIONS",
                "DISCOVER_SCHEMA",
                "ENABLE",
                "MANAGER_LOOKUP",
                "NO_RANDOM_ACCESS",
                "PROXY",
                "SEARCH",
                "TEMPLATE",
                "UNLOCK",
                "UNSTRUCTURED_TARGETS",
                "SHAREPOINT_TARGET",
                "PROVISIONING",
                "GROUP_PROVISIONING",
                "SYNC_PROVISIONING",
                "PASSWORD",
                "CURRENT_PASSWORD",
                "ACCOUNT_ONLY_REQUEST",
                "ADDITIONAL_ACCOUNT_REQUEST",
                "NO_AGGREGATION",
                "GROUPS_HAVE_MEMBERS",
                "NO_PERMISSIONS_PROVISIONING",
                "NO_GROUP_PERMISSIONS_PROVISIONING",
                "NO_UNSTRUCTURED_TARGETS_PROVISIONING",
                "NO_DIRECT_PERMISSIONS_PROVISIONING"
              ],
              "description": "Optional features that can be supported by an source.\n* AUTHENTICATE: The source supports pass-through authentication.\n* COMPOSITE: The source supports composite source creation.\n* DIRECT_PERMISSIONS: The source supports returning DirectPermissions.\n* DISCOVER_SCHEMA: The source supports discovering schemas for users and groups.\n* ENABLE The source supports reading if an account is enabled or disabled.\n* MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS.\n* NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform.\n* PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source.\n* SEARCH\n* TEMPLATE\n* UNLOCK: The source supports reading if an account is locked or unlocked.\n* UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets.\n* SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources.\n* PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation.\n* GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented.\n* SYNC_PROVISIONING: The source can provision accounts synchronously.\n* PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature.\n* CURRENT_PASSWORD: Some source types support verification of the current password\n* ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements.\n* ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts.\n* NO_AGGREGATION: A source that does not support aggregation.\n* GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation.\n* NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts.\n* NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups.\n* NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING.\n* NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING."
            },
            "example": [
              "SYNC_PROVISIONING",
              "MANAGER_LOOKUP",
              "SEARCH",
              "PROVISIONING",
              "AUTHENTICATE",
              "GROUP_PROVISIONING",
              "PASSWORD"
            ]
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of system being managed e.g. Active Directory, Workday, etc..",
            "example": "OpenLDAP - Direct"
          },
          "connector": {
            "type": "string",
            "description": "Connector script name."
          },
          "connectorClass": {
            "type": "string",
            "description": "The fully qualified name of the Java class that implements the connector interface.",
            "example": "sailpoint.connector.LDAPConnector"
          },
          "connectorAttributes": {
            "type": "object",
            "description": "Connector specific configuration; will differ from type to type.",
            "example": {
              "healthCheckTimeout": 30,
              "authSearchAttributes": [
                "cn",
                "uid",
                "mail"
              ]
            }
          },
          "deleteThreshold": {
            "type": "integer",
            "description": "Number from 0 to 100 that specifies when to skip the delete phase.",
            "example": 10
          },
          "authoritative": {
            "type": "boolean",
            "description": "When true indicates the source is referenced by an IdentityProfile.",
            "example": false
          },
          "managementWorkgroup": {
            "$ref": "#/components/schemas/IdentityProfile/allOf/0",
            "description": "Reference to Management Workgroup for this Source"
          },
          "healthy": {
            "type": "boolean",
            "description": "When true indicates a healthy source",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "A status identifier, giving specific information on why a source is healthy or not",
            "example": "SOURCE_STATE_HEALTHY"
          },
          "since": {
            "type": "string",
            "description": "Timestamp showing when a source health check was last performed",
            "example": "2021-09-28T15:48:29.3801666300Z"
          }
        }
      },
      "SourceHealthDto": {
        "type": "object",
        "description": "Dto for source health data",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "the id of the Source",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of system being managed e.g. Active Directory, Workday, etc..",
            "example": "OpenLDAP - Direct"
          },
          "name": {
            "type": "string",
            "description": "the name of the source",
            "example": "Source1234"
          },
          "org": {
            "type": "string",
            "description": "source's org",
            "example": "denali-cjh"
          },
          "isAuthoritative": {
            "type": "boolean"
          },
          "isCluster": {
            "type": "boolean"
          },
          "hostname": {
            "type": "string",
            "example": "megapod-useast1-secret-hostname.sailpoint.com"
          },
          "pod": {
            "type": "string",
            "description": "source's pod",
            "example": "megapod-useast1"
          },
          "iqServiceVersion": {
            "type": "string",
            "example": "iqVersion123"
          },
          "status": {
            "type": "string",
            "enum": [
              "SOURCE_STATE_ERROR_CLUSTER",
              "SOURCE_STATE_ERROR_SOURCE",
              "SOURCE_STATE_ERROR_VA",
              "SOURCE_STATE_FAILURE_CLUSTER",
              "SOURCE_STATE_FAILURE_SOURCE",
              "SOURCE_STATE_HEALTHY",
              "SOURCE_STATE_UNCHECKED_CLUSTER",
              "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES",
              "SOURCE_STATE_UNCHECKED_SOURCE",
              "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS"
            ],
            "description": "connection test result",
            "example": "SOURCE_STATE_UNCHECKED_SOURCE"
          }
        }
      },
      "Transform": {
        "type": "object",
        "description": "The representation of an internally- or customer-defined transform.",
        "required": [
          "name",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique ID of this transform",
            "example": "2cd78adghjkja34jh2b1hkjhasuecd"
          },
          "name": {
            "type": "string",
            "description": "Unique name of this transform",
            "example": "Timestamp To Date"
          },
          "type": {
            "type": "string",
            "description": "The transform type (see [Transformations in IdentityNow Using Seaspray](https://community.sailpoint.com/docs/DOC-4629)).",
            "example": "concat"
          },
          "attributes": {
            "type": "object",
            "description": "Meta-data about the transform. Values in this list are specific to the type of transform to be executed.",
            "additionalProperties": true,
            "example": {
              "inputFormat": "MMM dd yyyy, HH:mm:ss.SSS",
              "outputFormat": "yyyy/dd/MM"
            }
          },
          "internal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates whether this is an internal SailPoint-created transform or a customer-created transform",
            "example": false
          }
        }
      },
      "WorkItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the work item",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "requesterId": {
            "type": "string",
            "description": "ID of the requester",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "requesterDisplayName": {
            "type": "string",
            "description": "The displayname of the requester",
            "example": "John Smith"
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the owner",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "ownerName": {
            "type": "string",
            "description": "The name of the owner",
            "example": "Jason Smith"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "description": {
            "type": "string",
            "description": "The description of the work item",
            "example": "Create account on source 'AD'"
          },
          "state": {
            "type": "string",
            "enum": [
              "FINISHED",
              "REJECTED",
              "RETURNED",
              "EXPIRED",
              "PENDING",
              "CANCELED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "GENERIC",
              "CERTIFICATION",
              "REMEDIATION",
              "DELEGATION",
              "APPROVAL",
              "VIOLATIONREVIEW",
              "FORM",
              "POLICYVIOLATION",
              "CHALLENGE",
              "IMPACTANALYSIS",
              "SIGNOFF",
              "EVENT",
              "MANUALACTION",
              "TEST"
            ]
          },
          "remediationItems": {
            "$ref": "#/components/schemas/RemediationItems"
          },
          "approvalItems": {
            "$ref": "#/components/schemas/ApprovalItems"
          },
          "name": {
            "type": "string",
            "description": "The work item name",
            "example": "Account Create"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "numItems": {
            "type": "integer",
            "description": "The number of items in the work item",
            "example": 19
          },
          "form": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the form",
                "example": "2c9180835d2e5168015d32f890ca1581"
              },
              "name": {
                "type": "string",
                "description": "Name of the form",
                "example": "AccountSelection Form"
              },
              "title": {
                "type": "string",
                "description": "The form title",
                "example": "Account Selection for John.Doe"
              },
              "subtitle": {
                "type": "string",
                "description": "The form subtitle.",
                "example": "Please select from the following"
              },
              "targetUser": {
                "type": "string",
                "description": "The name of the user that should be shown this form",
                "example": "Jane.Doe"
              },
              "sections": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the FormItem",
                        "example": "Field1"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "Label of the section",
                        "example": "Section 1"
                      },
                      "formItems": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "List of FormItems. FormItems can be SectionDetails and/or FieldDetails",
                        "example": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "The work item ID that was specified was not found."
            ]
          }
        }
      },
      "WorkItemsCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The count of work items",
            "example": 29
          }
        }
      },
      "WorkItemsSummary": {
        "type": "object",
        "properties": {
          "open": {
            "type": "integer",
            "description": "The count of open work items",
            "example": 29
          },
          "completed": {
            "type": "integer",
            "description": "The count of completed work items",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "The count of total work items",
            "example": 30
          }
        }
      }
    }
  }
}