{
  "openapi": "3.0.1",
  "info": {
    "contact": {
      "email": "developers@sailpoint.com",
      "name": "Developer Relations",
      "url": "https://developer.sailpoint.com/discuss"
    },
    "description": "These are the public, beta APIs for SailPoint's SaaS services and are subject to change.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "title": "SailPoint - Beta SaaS API",
    "version": "3.1.0-beta"
  },
  "servers": [
    {
      "url": "https://{tenant}.api.identitynow.com/beta",
      "description": "This is the beta API server.",
      "variables": {
        "tenant": {
          "default": "sailpoint",
          "description": "This is the name of your tenant, typically your company's name."
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Access Profiles"
    },
    {
      "name": "Access Request Approvals"
    },
    {
      "name": "Access Requests"
    },
    {
      "name": "Account Activities"
    },
    {
      "name": "Account Aggregations"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Certification Campaigns"
    },
    {
      "name": "Certifications"
    },
    {
      "name": "Connector Rule Management"
    },
    {
      "name": "Connectors"
    },
    {
      "name": "Custom Password Instructions",
      "description": "Operations for managing custom password instructions"
    },
    {
      "name": "Entitlements"
    },
    {
      "name": "IAI Access Request Recommendations"
    },
    {
      "name": "IAI Common Access"
    },
    {
      "name": "IAI Outliers"
    },
    {
      "name": "IAI Peer Group Strategies"
    },
    {
      "name": "IAI Recommendations"
    },
    {
      "name": "IAI Role Mining"
    },
    {
      "name": "Identity History"
    },
    {
      "name": "Identity Profiles"
    },
    {
      "name": "Lifecycle States"
    },
    {
      "name": "Managed Clients",
      "description": "Read and write operations for managing client data and statuses"
    },
    {
      "name": "Managed Clusters",
      "description": "Operations for accessing and managing client Clusters, including Log Configuration"
    },
    {
      "name": "MFA Configuration",
      "description": "Configure and test multifactor authentication (MFA) methods"
    },
    {
      "name": "Non-Employee Lifecycle Management"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "OAuth Clients"
    },
    {
      "name": "Password Configuration"
    },
    {
      "name": "Password Dictionary"
    },
    {
      "name": "Password Management",
      "description": "Operations for managing identity's passwords"
    },
    {
      "name": "Password Sync Groups"
    },
    {
      "name": "Personal Access Tokens"
    },
    {
      "name": "Public Identity Config"
    },
    {
      "name": "Requestable Objects"
    },
    {
      "name": "Role Insights"
    },
    {
      "name": "Roles"
    },
    {
      "name": "Search Attribute Configuration"
    },
    {
      "name": "Segments"
    },
    {
      "name": "Service Desk Integration",
      "description": "Operations for creating and accessing service desk integrations"
    },
    {
      "name": "SOD Policy",
      "description": "Operations for Creating & Executing SOD (Seperation of Duties) policies"
    },
    {
      "name": "SOD Violations",
      "description": "Operations for Predicting SOD (Seperation of Duties) violations"
    },
    {
      "name": "Sources"
    },
    {
      "name": "SP-Config",
      "description": "Import and export configuration for some objects between tenants."
    },
    {
      "name": "Tagged Objects"
    },
    {
      "name": "Transforms",
      "description": "Operations for creating, managing, and deleting transforms"
    },
    {
      "name": "Triggers",
      "description": "Operations on Triggers, Subscriptions, and Invocations"
    },
    {
      "name": "Work Items",
      "description": "Operations for retrieving and modifying details relating to Work Items."
    },
    {
      "name": "Workflows",
      "description": "Workflows allow administrators to create custom automation scripts directly within IdentityNow.  These automation scripts respond to [event triggers](https://developer.sailpoint.com/triggers/getting_started.html) and perform a series of actions to perform tasks that are either too cumbersome or not available in the IdentityNow UI.  Workflows can be configured via a graphical user interface within IdentityNow, or by creating and uploading a JSON formatted script to the Workflow service.  The Workflows API collection provides the necessary functionality to create, manage, and test your workflows via REST.\n\nWorkflows is currently in Beta, and is not generally available to all customer tenants.  If you would like to participate in the beta program, please [submit an application](https://app.smartsheet.com/b/form/e758ab109dc649589f57b4b5c41d4373).  You must be a customer or partner to participate.\n",
      "externalDocs": {
        "description": "Workflow User Guide and Technical Documentation",
        "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-basics.html"
      }
    }
  ],
  "security": [
    {
      "oauth2": []
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Bearer token (JWT). See [IdentityNow REST API Authentication](https://developer.sailpoint.com/docs/authentication.html) for more information.\n- Directions for generating a [personal access token](https://developer.sailpoint.com/docs/authentication.html#personal-access-tokens)\n- Directions using [client credentials flow](https://developer.sailpoint.com/docs/authentication.html#client-credentials-grant-flow)\n- Directions for using [authorization code flow](https://developer.sailpoint.com/docs/authentication.html#authorization-code-grant-flow)\n\nWhich authentication method should I choose?  See our [guide](https://developer.sailpoint.com/docs/authentication.html#which-oauth-2-0-grant-flow-should-i-use)\n\nLearn more about how to find your `tokenUrl` and `authorizationUrl` [in our docs](https://developer.sailpoint.com/docs/authentication.html#finding-your-tenant-s-oauth-details)\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://{tenant}.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://{tenant}.identitynow.com/oauth/authorize",
            "tokenUrl": "https://{tenant}.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          }
        }
      }
    },
    "schemas": {
      "AccountAggregation": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "example": "2021-01-31T14:30:05.104Z",
            "description": "When the aggregation started."
          },
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "ACCOUNTS_COLLECTED",
              "COMPLETED",
              "CANCELLED",
              "RETRIED",
              "TERMINATED"
            ],
            "example": "ACCOUNTS_COLLECTED",
            "description": "STARTED - Aggregation started, but source account iteration has not completed.\n\nACCOUNTS_COLLECTED - Source account iteration completed, but all accounts have not yet been processed.\n\nCOMPLETED - Aggregation completed (*possibly with errors*).\n\nCANCELLED - Aggregation cancelled by user.\n\nRETRIED - Aggregation retried because of connectivity issues with the Virtual Appliance.\n\nTERMINATED - Aggregation marked as failed after 3 tries after connectivity issues with the Virtual Appliance.\n"
          },
          "totalAccounts": {
            "type": "integer",
            "example": 520,
            "description": "The total number of *NEW, CHANGED and DELETED* accounts that need to be processed for this aggregation. This does not include accounts that were unchanged since the previous aggregation. This can be zero if there were no new, changed or deleted accounts since the previous aggregation. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*"
          },
          "processedAccounts": {
            "type": "integer",
            "example": 150,
            "description": "The number of *NEW, CHANGED and DELETED* accounts that have been processed so far. This reflects the number of accounts that have been processed at the time of the API call, and may increase on subsequent API calls while the status is ACCOUNTS_COLLECTED. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*"
          }
        }
      },
      "ApprovalItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the approval item",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "account": {
            "type": "string",
            "description": "The account referenced by the approval item",
            "example": "john.smith"
          },
          "application": {
            "type": "string",
            "description": "The name the application/source",
            "example": "Active Directory"
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the attribute",
            "example": "emailAddress"
          },
          "attributeOperation": {
            "type": "string",
            "description": "The operation of the attribute",
            "example": "update"
          },
          "attributeValue": {
            "type": "string",
            "description": "The value of the attribute",
            "example": "a@b.com"
          },
          "state": {
            "$ref": "#/components/schemas/WorkItems/properties/state"
          }
        }
      },
      "slimcampaign": {
        "type": "object",
        "title": "Slim Campaign",
        "required": [
          "name",
          "description",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "The campaign name. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "The campaign description. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details."
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "The campaign's completion deadline."
          },
          "type": {
            "type": "string",
            "description": "The type of campaign. Could be extended in the future.",
            "enum": [
              "MANAGER",
              "SOURCE_OWNER",
              "SEARCH",
              "ROLE_COMPOSITION"
            ]
          },
          "emailNotificationEnabled": {
            "type": "boolean"
          },
          "autoRevokeAllowed": {
            "type": "boolean"
          },
          "recommendationsEnabled": {
            "type": "boolean",
            "description": "Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off then campaigns generated from this template will indicate false. The real value will then be returned if IAI is ever enabled for the org in the future."
          },
          "status": {
            "type": "string",
            "description": "The campaign's current status.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "STAGED",
              "CANCELING",
              "ACTIVATING",
              "ACTIVE",
              "COMPLETING",
              "COMPLETED",
              "ERROR",
              "ARCHIVED"
            ]
          }
        },
        "example": {
          "id": "2c9079b270a266a60170a2779fcb0007",
          "name": "Manager Campaign",
          "description": "Everyone needs to be reviewed by their manager.",
          "deadline": "2020-03-15T10:00:01.456Z",
          "type": "MANAGER",
          "emailNotificationEnabled": true,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "status": "ACTIVE"
        }
      },
      "fullcampaign": {
        "type": "object",
        "title": "Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/slimcampaign"
          },
          {
            "type": "object",
            "properties": {
              "created": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "modified": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "filter": {
                "type": "object",
                "description": "Determines which items will be included in this campaign. The default campaign filter is used if this field is left blank.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of whatever type of filter is being used."
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "CAMPAIGN_FILTER"
                    ]
                  }
                }
              },
              "sunsetCommentsRequired": {
                "type": "boolean",
                "description": "Determines if comments on sunset date changes are required.",
                "default": true
              },
              "sourceOwnerCampaignInfo": {
                "type": "object",
                "description": "Must be set only if the campaign type is SOURCE_OWNER.",
                "properties": {
                  "sourceIds": {
                    "type": "array",
                    "description": "The list of sources to be included in the campaign.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "searchCampaignInfo": {
                "type": "object",
                "description": "Must be set only if the campaign type is SEARCH.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of search campaign represented.",
                    "enum": [
                      "IDENTITY",
                      "ACCESS"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "Describes this search campaign. Intended for storing the query used, and possibly the number of identities selected/available."
                  },
                  "reviewer": {
                    "description": "If specified, this identity or governance group will be the reviewer for all certifications in this campaign. The allowed DTO types are IDENTITY and GOVERNANCE_GROUP",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  },
                  "query": {
                    "type": "string",
                    "description": "The scope for the campaign. The campaign will cover identities returned by the query and identities that have access items returned by the query. One of `query` or `identityIds` must be set."
                  },
                  "identityIds": {
                    "type": "array",
                    "description": "A direct list of identities to include in this campaign. One of `identityIds` or `query` must be set.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 1000
                  },
                  "accessConstraints": {
                    "type": "array",
                    "description": "Further reduces the scope of the campaign by excluding identities (from `query` or `identityIds`) that do not have this access.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "ENTITLEMENT",
                            "ACCESS_PROFILE",
                            "ROLE"
                          ]
                        },
                        "ids": {
                          "description": "Must be set only if operator is SELECTED.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "operator": {
                          "type": "string",
                          "enum": [
                            "ALL",
                            "SELECTED"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "operator"
                      ],
                      "example": {
                        "type": "ENTITLEMENT",
                        "ids": [
                          "2c90ad2a70ace7d50170acf22ca90010"
                        ],
                        "operator": "SELECTED"
                      }
                    },
                    "maxItems": 1000
                  }
                },
                "required": [
                  "type"
                ]
              },
              "roleCompositionCampaignInfo": {
                "type": "object",
                "description": "Optional configuration options for role composition campaigns.",
                "properties": {
                  "reviewer": {
                    "description": "If specified, this identity or governance group will be the reviewer for all certifications in this campaign. The allowed DTO types are IDENTITY and GOVERNANCE_GROUP",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  },
                  "roleIds": {
                    "type": "array",
                    "description": "Optional list of roles to include in this campaign. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remediatorRef": {
                    "type": "object",
                    "description": "This determines who remediation tasks will be assigned to. Remediation tasks are created for each revoke decision on items in the campaign. The only legal remediator type is 'IDENTITY', and the chosen identity must be a Role Admin or Org Admin.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "IDENTITY"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "description": "The ID of the remediator."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the remediator.",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  },
                  "query": {
                    "type": "string",
                    "description": "Optional search query to scope this campaign to a set of roles. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included."
                  },
                  "description": {
                    "type": "string",
                    "description": "Describes this role composition campaign. Intended for storing the query used, and possibly the number of roles selected/available."
                  }
                },
                "required": [
                  "remediatorRef"
                ]
              },
              "alerts": {
                "type": "array",
                "description": "A list of errors and warnings that have accumulated.",
                "readOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "enum": [
                        "ERROR",
                        "WARN",
                        "INFO"
                      ]
                    },
                    "localizations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "locale": {
                            "type": "string",
                            "description": "The locale for the message text, a BCP 47 language tag.",
                            "example": "en-US"
                          },
                          "localeOrigin": {
                            "type": "string",
                            "enum": [
                              "DEFAULT",
                              "REQUEST"
                            ],
                            "description": "An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.",
                            "example": "DEFAULT"
                          },
                          "text": {
                            "type": "string",
                            "description": "Actual text of the error message in the indicated locale.",
                            "example": "The request was syntactically correct but its content is semantically invalid."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "totalCertifications": {
                "type": "integer",
                "description": "The total number of certifications in this campaign.",
                "readOnly": true
              },
              "completedCertifications": {
                "type": "integer",
                "description": "The number of completed certifications in this campaign.",
                "readOnly": true
              },
              "sourcesWithOrphanEntitlements": {
                "type": "array",
                "description": "A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).",
                "readOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "SOURCE"
                      ]
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "example": {
          "id": "2c9079b270a266a60170a2779fcb0007",
          "name": "Manager Campaign",
          "description": "Everyone needs to be reviewed by their manager.",
          "created": "2020-03-03T22:15:13.611Z",
          "modified": "2020-03-03T22:20:12.674Z",
          "deadline": "2020-03-15T00:00:00.456Z",
          "type": "MANAGER",
          "emailNotificationEnabled": true,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "status": "ACTIVE",
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
          }
        }
      },
      "IdentityProfile": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "id": {
                "description": "System-generated unique ID of the Object",
                "type": "string",
                "example": "id12345",
                "readOnly": true
              },
              "name": {
                "description": "Name of the Object",
                "type": "string",
                "example": "aName"
              },
              "created": {
                "description": "Creation date of the Object",
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "modified": {
                "description": "Last modification date of the Object",
                "type": "string",
                "format": "date-time",
                "readOnly": true
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the Identity Profile.",
                "example": "My custom flat file profile"
              },
              "owner": {
                "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                "description": "The owner of the Identity Profile."
              },
              "priority": {
                "type": "number",
                "format": "int64",
                "description": "The priority for an Identity Profile.",
                "example": 10
              },
              "authoritativeSource": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The authoritative source for this Identity Profile",
                    "example": "SOURCE"
                  },
                  "id": {
                    "type": "string",
                    "description": "ID of the object to which this reference applies",
                    "example": "2c9180835d191a86015d28455b4b232a"
                  },
                  "name": {
                    "type": "string",
                    "description": "Human-readable display name of the object to which this reference applies",
                    "example": "HR Active Directory"
                  }
                },
                "example": {
                  "type": "SOURCE",
                  "id": "2c9180835d191a86015d28455b4b232a",
                  "name": "HR Active Directory"
                },
                "description": "The authoritative source for this Identity Profile."
              },
              "identityRefreshRequired": {
                "type": "boolean",
                "description": "True if a identity refresh is needed. Typically triggered when a change on the source has been made"
              },
              "identityCount": {
                "type": "number",
                "description": "The number of identities that belong to the Identity Profile.",
                "example": 8
              },
              "identityAttributeConfig": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "If the profile or mapping is enabled",
                    "example": true
                  },
                  "attributeTransforms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "identityAttributeName": {
                          "type": "string",
                          "description": "Name of the identity attribute",
                          "example": "email"
                        },
                        "transformDefinition": {
                          "description": "The seaspray transformation definition",
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the transform definition.",
                              "example": "accountAttribute"
                            },
                            "attributes": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object"
                              },
                              "description": "Arbitrary key-value pairs to store any metadata for the object",
                              "example": {
                                "attributeName": "e-mail",
                                "sourceName": "MySource",
                                "sourceId": "2c9180877a826e68017a8c0b03da1a53"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "identityExceptionReportReference": {
                "type": "object",
                "properties": {
                  "taskResultId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The id of the task result",
                    "example": "2c918086795cd09201795d5f7d7533df"
                  },
                  "reportName": {
                    "type": "string",
                    "example": "My annual report",
                    "description": "The name of the report"
                  }
                }
              },
              "hasTimeBasedAttr": {
                "description": "Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ManagedClient": {
        "description": "Managed Client",
        "type": "object",
        "required": [
          "clientId",
          "clusterId",
          "description",
          "type"
        ],
        "properties": {
          "id": {
            "description": "ManagedClient ID",
            "readOnly": true,
            "type": "string",
            "example": "aClientId"
          },
          "alertKey": {
            "description": "ManagedClient alert key",
            "readOnly": true,
            "type": "string",
            "example": "anAlertKey"
          },
          "apiGatewayBaseUrl": {
            "description": "ManagedClient gateway base url",
            "readOnly": true,
            "type": "string",
            "example": "https://denali-xxx.api.cloud.sailpoint.com"
          },
          "ccId": {
            "description": "Previous CC ID to be used in data migration. (This field will be deleted after CC migration!)",
            "type": "integer",
            "example": 2248
          },
          "clientId": {
            "description": "The client ID used in API management",
            "type": "string",
            "example": "aClientApiId"
          },
          "clusterId": {
            "description": "Cluster ID that the ManagedClient is linked to",
            "type": "string",
            "example": "aClusterId"
          },
          "cookbook": {
            "description": "VA cookbook",
            "readOnly": true,
            "type": "string",
            "example": "va-cookbook-info"
          },
          "description": {
            "description": "ManagedClient description",
            "type": "string",
            "example": "A short description of the ManagedClient"
          },
          "ipAddress": {
            "description": "The public IP address of the ManagedClient",
            "readOnly": true,
            "type": "string",
            "example": "123.456.78.90"
          },
          "lastSeen": {
            "description": "When the ManagedClient was last seen by the server",
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "name": {
            "description": "ManagedClient name",
            "type": "string",
            "example": "aName"
          },
          "sinceLastSeen": {
            "description": "Milliseconds since the ManagedClient has polled the server",
            "readOnly": true,
            "type": "string",
            "example": 15000
          },
          "status": {
            "description": "Status of the ManagedClient",
            "readOnly": true,
            "allOf": [
              {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "UNDEFINED",
                  "NOT_CONFIGURED",
                  "CONFIGURING",
                  "WARNING",
                  "ERROR",
                  "FAILED"
                ]
              }
            ]
          },
          "type": {
            "description": "Type of the ManagedClient (VA, CCG)",
            "type": "string",
            "example": "VA"
          },
          "vaDownloadUrl": {
            "description": "ManagedClient VA download URL",
            "readOnly": true,
            "type": "string",
            "example": "aUrl"
          },
          "vaVersion": {
            "description": "Version that the ManagedClient's VA is running",
            "readOnly": true,
            "type": "string",
            "example": "va-megapod-useast1-610-1621372012"
          }
        }
      },
      "ManagedClientStatus": {
        "description": "Managed Client Status",
        "type": "object",
        "required": [
          "body",
          "status",
          "type",
          "timestamp"
        ],
        "properties": {
          "body": {
            "description": "ManagedClientStatus body information",
            "type": "object",
            "example": {
              "alertKey": "",
              "id": "5678",
              "clusterId": "1234",
              "ccg_etag": "ccg_etag123xyz456",
              "ccg_pin": "NONE",
              "cookbook_etag": "20210420125956-20210511144538",
              "hostname": "megapod-useast1-secret-hostname.sailpoint.com",
              "internal_ip": "127.0.0.1",
              "lastSeen": "1620843964604",
              "sinceSeen": "14708",
              "sinceSeenMillis": "14708",
              "localDev": false,
              "stacktrace": "",
              "state": null,
              "status": "NORMAL",
              "uuid": null,
              "product": "idn",
              "va_version": null,
              "platform_version": "2",
              "os_version": "2345.3.1",
              "os_type": "flatcar",
              "hypervisor": "unknown"
            }
          },
          "status": {
            "description": "status of the Managed Client",
            "$ref": "#/components/schemas/ManagedClient/properties/status/allOf/0"
          },
          "type": {
            "description": "type of the Managed Client",
            "type": "string",
            "example": "CCG",
            "enum": [
              "CCG",
              "VA"
            ]
          },
          "timestamp": {
            "description": "timestamp on the Client Status update",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.000000Z"
          }
        }
      },
      "MessageCatalogDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "The language in which the messages are returned",
            "example": "en_US"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the message",
                  "example": "recommender-api.V2_WEIGHT_FEATURE_PRODUCT_INTERPRETATION_LOW"
                },
                "format": {
                  "type": "string",
                  "description": "The format of the message",
                  "example": "{0,,\\\"i18n hint: percentage\\\"}% of identities with the same {1,,\\\"i18n hint: name of category feature\\\"} have this access. This information had a low impact on the overall score."
                }
              }
            },
            "description": "The list of message with their keys and formats"
          }
        }
      },
      "PeerGroupMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the peer group member."
          },
          "type": {
            "type": "string",
            "description": "The type of the peer group member."
          },
          "peer_group_id": {
            "type": "string",
            "description": "The ID of the peer group."
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "description": "Arbitrary key-value pairs, belonging to the peer group member."
          }
        }
      },
      "RecommendationRequestDto": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "description": "List of requests to retrieve recommendations",
              "type": "object",
              "properties": {
                "identityId": {
                  "type": "string",
                  "description": "The identity ID",
                  "example": "2c938083633d259901633d25c68c00fa"
                },
                "item": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the access item for which to retrieve the recommendation",
                      "example": "2c938083633d259901633d2623ec0375"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the access item.",
                      "enum": [
                        "ENTITLEMENT",
                        "ACCESS_PROFILE",
                        "ROLE"
                      ]
                    }
                  }
                }
              }
            }
          },
          "excludeInterpretations": {
            "type": "boolean",
            "description": "Exclude interpretations in the response if \"true\". Return interpretations in the response if this attribute is not specified.",
            "default": "false",
            "example": "false"
          },
          "includeTranslationMessages": {
            "type": "boolean",
            "description": "When set to true, the calling system uses the translated messages for the specified language",
            "default": "false",
            "example": "false"
          },
          "includeDebugInformation": {
            "type": "boolean",
            "description": "Returns the recommender calculations if set to true",
            "default": "false",
            "example": "true"
          },
          "prescribeMode": {
            "type": "boolean",
            "description": "When set to true, uses prescribedRulesRecommenderConfig to get identity attributes and peer group threshold instead of standard config.",
            "default": "false",
            "example": "false"
          }
        }
      },
      "RecommendationResponseDto": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "request": {
                  "type": "object",
                  "$ref": "#/components/schemas/RecommendationRequestDto/properties/requests/items"
                },
                "recommendation": {
                  "type": "string",
                  "description": "The recommendation - YES if the access is recommended, NO if not recommended, MAYBE if there is not enough information to make a recommendation, NOT_FOUND if the identity is not found in the system",
                  "enum": [
                    "YES",
                    "NO",
                    "MAYBE",
                    "NOT_FOUND"
                  ]
                },
                "interpretations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The list of interpretations explaining the recommendation. The array is empty if includeInterpretations is false or not present in the request. e.g. - [ \"Not approved in the last 6 months.\" ]. Interpretations will be translated using the client's locale as found in the Accept-Language header. If a translation for the client's locale cannot be found, the US English translation will be returned.",
                  "example": [
                    "75% of identities with the same department have this access. This information had a high impact on the overall score.",
                    "67% of identities with the same peer group have this access. This information had a low impact on the overall score.",
                    "42% of identities with the same location have this access. This information had a low impact on the overall score."
                  ]
                },
                "translationMessages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "The key of the translation message",
                        "example": "recommender-api.V2_WEIGHT_FEATURE_PRODUCT_INTERPRETATION_HIGH"
                      },
                      "values": {
                        "type": "array",
                        "description": "The values corresponding to the translation messages",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "75",
                          "department"
                        ]
                      }
                    }
                  },
                  "description": "The list of translation messages, if they have been requested."
                },
                "recommenderCalculations": {
                  "type": "object",
                  "description": "The calcuations performed behind the scenes that provide recommendations to the user.",
                  "properties": {
                    "identityId": {
                      "type": "string",
                      "description": "The ID of the identity",
                      "example": "2c91808457d8f3ab0157e3e62cb4213c"
                    },
                    "entitlementId": {
                      "type": "string",
                      "description": "The entitlement ID",
                      "example": "2c91809050db617d0150e0bf3215385e"
                    },
                    "recommendation": {
                      "type": "string",
                      "description": "The actual recommendation",
                      "example": "YES"
                    },
                    "overallWeightedScore": {
                      "type": "number",
                      "description": "The overall weighted score"
                    },
                    "featureWeightedScores": {
                      "type": "object",
                      "description": "The weighted score of each individual feature",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "threshold": {
                      "type": "number",
                      "description": "The configured value against which the overallWeightedScore is compared"
                    },
                    "identityAttributes": {
                      "type": "object",
                      "description": "The values for your configured features",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "featureValues": {
                      "description": "The feature details",
                      "type": "object",
                      "properties": {
                        "feature": {
                          "type": "string",
                          "description": "The type of feature",
                          "example": "department"
                        },
                        "numerator": {
                          "type": "number",
                          "description": "The number of identities that have access to the feature"
                        },
                        "denominator": {
                          "type": "number",
                          "description": "The number of identities with the corresponding feature"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RemediationItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the certification",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "targetId": {
            "type": "string",
            "description": "The ID of the certification target",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "targetName": {
            "type": "string",
            "description": "The name of the certification target",
            "example": "john.smith"
          },
          "targetDisplayName": {
            "type": "string",
            "description": "The display name of the certification target",
            "example": "emailAddress"
          },
          "applicationName": {
            "type": "string",
            "description": "The name of the application/source",
            "example": "Active Directory"
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the attribute being certified",
            "example": "phoneNumber"
          },
          "attributeOperation": {
            "type": "string",
            "description": "The operation of the certification on the attribute",
            "example": "update"
          },
          "attributeValue": {
            "type": "string",
            "description": "The value of the attribute being certified",
            "example": "512-555-1212"
          },
          "nativeIdentity": {
            "type": "string",
            "description": "The native identity of the target",
            "example": "jason.smith2"
          }
        }
      },
      "SearchAttributeConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new attribute",
            "example": "newMailAttribute"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the new attribute",
            "example": "New Mail Attribute"
          },
          "applicationAttributes": {
            "type": "object",
            "description": "Map of application id and their associated attribute.",
            "example": {
              "2c91808b79fd2422017a0b35d30f3968": "employeeNumber",
              "2c91808b79fd2422017a0b36008f396b": "employeeNumber"
            }
          }
        }
      },
      "WorkItems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the work item",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "requesterId": {
            "type": "string",
            "description": "ID of the requester",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "requesterDisplayName": {
            "type": "string",
            "description": "The displayname of the requester",
            "example": "John Smith"
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the owner",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "ownerName": {
            "type": "string",
            "description": "The name of the owner",
            "example": "Jason Smith"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "description": {
            "type": "string",
            "description": "The description of the work item",
            "example": "Create account on source 'AD'"
          },
          "state": {
            "type": "string",
            "enum": [
              "FINISHED",
              "REJECTED",
              "RETURNED",
              "EXPIRED",
              "PENDING",
              "CANCELED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "GENERIC",
              "CERTIFICATION",
              "REMEDIATION",
              "DELEGATION",
              "APPROVAL",
              "VIOLATIONREVIEW",
              "FORM",
              "POLICYVIOLATION",
              "CHALLENGE",
              "IMPACTANALYSIS",
              "SIGNOFF",
              "EVENT",
              "MANUALACTION",
              "TEST"
            ]
          },
          "remediationItems": {
            "$ref": "#/components/schemas/RemediationItems"
          },
          "approvalItems": {
            "$ref": "#/components/schemas/ApprovalItems"
          },
          "name": {
            "type": "string",
            "description": "The work item name",
            "example": "Account Create"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "numItems": {
            "type": "integer",
            "description": "The number of items in the work item",
            "example": 19
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "The work item ID that was specified was not found."
            ]
          }
        }
      },
      "WorkItemsCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The count of work items",
            "example": 29
          }
        }
      },
      "WorkItemsSummary": {
        "type": "object",
        "properties": {
          "open": {
            "type": "integer",
            "description": "The count of open work items",
            "example": 29
          },
          "completed": {
            "type": "integer",
            "description": "The count of completed work items",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "The count of total work items",
            "example": 30
          }
        }
      },
      "Form": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the form",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "description": "Name of the form",
            "example": "AccountSelection Form"
          },
          "title": {
            "type": "string",
            "description": "The form title",
            "example": "Account Selection for John.Doe"
          },
          "subtitle": {
            "type": "string",
            "description": "The form subtitle.",
            "example": "Please select from the following"
          },
          "targetUser": {
            "type": "string",
            "description": "The name of the user that should be shown this form",
            "example": "Jane.Doe"
          },
          "sections": {
            "$ref": "#/components/schemas/Section"
          }
        }
      },
      "FormItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the FormItem",
            "example": "Field1"
          }
        }
      },
      "Section": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FormItem"
          },
          {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "Label of the section",
                "example": "Section 1"
              },
              "formItems": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of FormItems. FormItems can be SectionDetails and/or FieldDetails",
                "example": []
              }
            }
          }
        ]
      },
      "Field": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FormItem"
          },
          {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "Display name of the field",
                "example": "Field 1"
              },
              "displayType": {
                "type": "string",
                "description": "Type of the field to display",
                "example": "checkbox"
              },
              "required": {
                "type": "boolean",
                "description": "True if the field is required"
              },
              "allowedValuesList": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of allowed values for the field",
                "example": [
                  {
                    "Val1Display": null,
                    "Val1Value": null
                  },
                  {
                    "Val2Display": null,
                    "Val2Value": null
                  }
                ]
              },
              "value": {
                "type": "object",
                "description": "Value of the field"
              }
            }
          }
        ]
      }
    }
  },
  "paths": {
    "/access-profiles": {
      "get": {
        "operationId": "listAccessProfiles",
        "tags": [
          "Access Profiles"
        ],
        "summary": "List Access Profiles",
        "description": "This API returns a list of Access Profiles.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "description": "If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID.\n\nA 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb",
            "required": false
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**created, modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**requestable**: *eq*",
            "example": "name eq \"SailPoint Support\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified**",
            "example": "name,-modified",
            "required": false
          },
          {
            "in": "query",
            "name": "for-segment-ids",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs.\n\nIf segmentation is currently unavailable, specifying this parameter results in an error.",
            "example": "0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d",
            "required": false
          },
          {
            "in": "query",
            "name": "include-unsegmented",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether or not the response list should contain unsegmented Access Profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.",
            "example": false,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Access Profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1access-profiles/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Create an Access Profile",
        "description": "This API creates an Access Profile.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the Access Profile's Source.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Access Profile",
                    "example": "2c91808a7190d06e01719938fcd20792",
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the Access Profile",
                    "example": "Employee-database-read-write"
                  },
                  "description": {
                    "type": "string",
                    "description": "Information about the Access Profile",
                    "example": "Collection of entitlements to read/write the employee database"
                  },
                  "created": {
                    "type": "string",
                    "description": "Date the Access Profile was created",
                    "format": "date-time",
                    "example": "2021-03-01T22:32:58.104Z",
                    "readOnly": true
                  },
                  "modified": {
                    "type": "string",
                    "description": "Date the Access Profile was last modified.",
                    "format": "date-time",
                    "example": "2021-03-02T20:22:28.104Z",
                    "readOnly": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the Access Profile is enabled",
                    "example": true
                  },
                  "owner": {
                    "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/owner",
                    "description": "Owner of the Access Profile"
                  },
                  "source": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the Source with with which the Access Profile is associated",
                        "example": "2c91809773dee3610173fdb0b6061ef4"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "SOURCE"
                        ],
                        "description": "The type of the Source, will always be SOURCE",
                        "example": "SOURCE"
                      },
                      "name": {
                        "type": "string",
                        "description": "The display name of the associated Source",
                        "example": "ODS-AD-SOURCE"
                      }
                    }
                  },
                  "entitlements": {
                    "type": "array",
                    "description": "A list of entitlements associated with the Access Profile",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the Entitlement",
                          "example": "2c91809773dee32014e13e122092014e"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "ENTITLEMENT"
                          ],
                          "description": "The type of the Entitlement, will always be ENTITLEMENT",
                          "example": "ENTITLEMENT"
                        },
                        "name": {
                          "type": "string",
                          "description": "The display name of the Entitlement",
                          "example": "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local"
                        }
                      }
                    }
                  },
                  "requestable": {
                    "type": "boolean",
                    "description": "Whether the Access Profile is requestable via access request",
                    "example": true
                  },
                  "accessRequestConfig": {
                    "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/accessRequestConfig",
                    "description": "Access request configuration for this object"
                  },
                  "revocationRequestConfig": {
                    "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/revocationRequestConfig",
                    "description": "Revocation request configuration for this object."
                  },
                  "segments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of IDs of segments, if any, to which this Access Profile is assigned.",
                    "example": [
                      "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
                      "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
                    ]
                  },
                  "provisioningCriteria": {
                    "description": "When an Identity has multiple Accounts on the Source with which an Access Profile is associated, this expression is evaluated against those Accounts to choose one to provision with the Access Profile.",
                    "nullable": true,
                    "example": {
                      "operation": "OR",
                      "children": [
                        {
                          "operation": "AND",
                          "children": [
                            {
                              "attribute": "dn",
                              "operation": "CONTAINS",
                              "value": "useast"
                            },
                            {
                              "attribute": "manager",
                              "operation": "CONTAINS",
                              "value": "Scott.Clark"
                            }
                          ]
                        },
                        {
                          "operation": "AND",
                          "children": [
                            {
                              "attribute": "dn",
                              "operation": "EQUALS",
                              "value": "Gibson"
                            },
                            {
                              "attribute": "telephoneNumber",
                              "operation": "CONTAINS",
                              "value": "512"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "EQUALS",
                          "NOT_EQUALS",
                          "CONTAINS",
                          "HAS",
                          "AND",
                          "OR"
                        ],
                        "description": "Supported operations on ProvisioningCriteria",
                        "example": "EQUALS"
                      },
                      "attribute": {
                        "type": "string",
                        "description": "Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.",
                        "example": "email",
                        "nullable": true
                      },
                      "value": {
                        "type": "string",
                        "description": "String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.",
                        "example": "carlee.cert1c9f9b6fd@mailinator.com"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "Defines matching criteria for an Account to be provisioned with a specific Access Profile",
                          "properties": {
                            "operation": {
                              "$ref": "#/paths/~1access-profiles/post/requestBody/content/application~1json/schema/properties/provisioningCriteria/properties/operation"
                            },
                            "attribute": {
                              "type": "string",
                              "description": "Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.",
                              "example": "email",
                              "nullable": true
                            },
                            "value": {
                              "type": "string",
                              "description": "String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.",
                              "example": "carlee.cert1c9f9b6fd@mailinator.com"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "description": "Defines matching criteria for an Account to be provisioned with a specific Access Profile",
                                "properties": {
                                  "operation": {
                                    "$ref": "#/paths/~1access-profiles/post/requestBody/content/application~1json/schema/properties/provisioningCriteria/properties/operation"
                                  },
                                  "attribute": {
                                    "type": "string",
                                    "description": "Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.",
                                    "example": "email",
                                    "nullable": true
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.",
                                    "example": "carlee.cert1c9f9b6fd@mailinator.com"
                                  }
                                }
                              },
                              "nullable": true,
                              "description": "Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.",
                              "example": null
                            }
                          }
                        },
                        "nullable": true,
                        "description": "Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.",
                        "example": null
                      }
                    }
                  }
                },
                "required": [
                  "owner"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Access Profile created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access-profiles/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-profiles/{id}": {
      "get": {
        "operationId": "getAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Get an Access Profile",
        "description": "This API returns an Access Profile by its ID.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Access Profile",
            "example": "2c9180837ca6693d017ca8d097500149"
          }
        ],
        "responses": {
          "200": {
            "description": "An AccessProfile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access-profiles/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Patch a specified Access Profile",
        "description": "This API updates an existing Access Profile. The following fields are patchable:\n\n**name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria**\n\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Access Profile to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the Access Profile as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access-profiles/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Delete the specified Access Profile",
        "description": "This API deletes an existing Access Profile.\n\nThe Access Profile must not be in use. If it is, a 400 error is returned.\n\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Access Profile to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                  "description": "A DTO with a TaskResult reference of the delete job"
                },
                "example": {
                  "type": "TASK_RESULT",
                  "id": "ff8080817e8cc815017e8ce4b6910003",
                  "name": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-profiles/bulk-delete": {
      "post": {
        "operationId": "bulkDeleteAccessProfiles",
        "summary": "Delete Access Profile(s)",
        "tags": [
          "Access Profiles"
        ],
        "description": "This API initiates a bulk deletion of one or more Access Profiles.\n\nBy default, if any of the indicated Access Profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated Access Profiles will be deleted.\n\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to delete Access Profiles which are associated with Sources they are able to administer.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessProfileIds": {
                    "description": "List of IDs of Access Profiles to be deleted.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2c9180847812e0b1017817051919ecca",
                      "2c9180887812e0b201781e129f151816"
                    ]
                  },
                  "bestEffortOnly": {
                    "description": "If **true**, silently skip over any of the specified Access Profiles if they cannot be deleted because they are in use. If **false**, no deletions will be attempted if any of the Access Profiles are in use.",
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "example": {
                "bestEffortOnly": true,
                "accessProfileIds": [
                  "2c91808876438bb2017668b91919ecca",
                  "2c91808876438ba801766e129f151816"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned only if **bestEffortOnly** is **false**, and one or more Access Profiles are in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access-profiles~1bulk-delete/post/responses/202/content/application~1json/schema"
                },
                "example": {
                  "pending": [],
                  "inUse": [
                    {
                      "accessProfileId": "2c91808876438ba801766e129f151816",
                      "usages": [
                        {
                          "type": "Role",
                          "id": "2c9180887643764201766e9f6e121518"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Returned if at least one deletion will be performed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "string",
                      "description": "ID of the task which is executing the bulk deletion. This can be passed to the **/task-status** API to track status.",
                      "example": "2c9180867817ac4d017817c491119a20"
                    },
                    "pending": {
                      "type": "array",
                      "description": "List of IDs of Access Profiles which are pending deletion.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "2c91808876438bbb017668c21919ecca",
                        "2c91808876438bb201766e129f151816"
                      ]
                    },
                    "inUse": {
                      "type": "array",
                      "description": "List of usages of Access Profiles targeted for deletion.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "accessProfileId": {
                            "type": "string",
                            "description": "ID of the Access Profile that is in use",
                            "example": "2c91808876438bbb017668c21919ecca"
                          },
                          "usedBy": {
                            "type": "array",
                            "description": "List of references to objects which are using the indicated Access Profile",
                            "items": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "taskId": "2c91808a7813090a01781412a1119a20",
                  "pending": [
                    "2c91808a7813090a017813fe1919ecca"
                  ],
                  "inUse": [
                    {
                      "accessProfileId": "2c91808876438ba801766e129f151816",
                      "usages": [
                        {
                          "type": "Role",
                          "id": "2c9180887643764201766e9f6e121518"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-profiles/{id}/entitlements": {
      "get": {
        "operationId": "listAccessProfileEntitlements",
        "tags": [
          "Access Profiles"
        ],
        "summary": "List Access Profile's Entitlements",
        "description": "This API lists the Entitlements associated with a given Access Profile\n\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the Source associated with the given Access Profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the containing Access Profile",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results)\n\nFiltering is supported for the following Entitlement fields and operators:\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**attribute**: *eq, sw*\n\n**value**: *eq, sw*\n\n**created, modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**source.id**: *eq, in*",
            "example": "attribute eq \"memberOf\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#sorting-results)\n\nSorting is supported for the following fields: **name, attribute, value, created, modified**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1entitlements/patch/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-requests": {
      "post": {
        "operationId": "createAccessRequest",
        "summary": "Submit an Access Request",
        "tags": [
          "Access Requests"
        ],
        "description": "This submits the access request into IdentityNow, where it will follow any IdentityNow approval processes. This\ndoesn't return a result because the request has been submitted/accepted by the system.\n\nThere are two types of access request:\n\n__GRANT_ACCESS__\n* Can be requested for multiple identities in a single request.\n* Supports self request and request on behalf of other users, see '/beta/access-request-config' endpoint for request configuration options.  \n* Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others.\n* Roles, Access Profiles and Entitlements can be requested.\n* While requesting entitlements, maximum of 5 entitlements and 10 recipients are allowed in a request.\n \n__REVOKE_ACCESS__\n* Can only be requested for a single identity at a time.\n* Does not support self request. Only manager can request to revoke access for their directly managed employees.\n* If removeDate is specified, then the access will be removed on that date and time.\n* Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.\n* Roles and Access Profiles can be requested for revocation. Revoke request for entitlements are not supported currently.\n\nNOTE: There is no indication to the approver in the IdentityNow UI that the approval request is for a revoke action. Take this into consideration when calling this API.\n\nA token with API authority cannot be used to call this endpoint. \n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestedFor": {
                    "description": "A list of Identity IDs for whom the Access is requested. If it's a Revoke request, there can only be one Identity ID.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "2c918084660f45d6016617daa9210584"
                    }
                  },
                  "requestType": {
                    "type": "string",
                    "enum": [
                      "GRANT_ACCESS",
                      "REVOKE_ACCESS"
                    ],
                    "description": "Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field. Currently REVOKE_ACCESS is not supported for entitlements.",
                    "example": "GRANT_ACCESS"
                  },
                  "requestedItems": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "ACCESS_PROFILE",
                            "ROLE",
                            "ENTITLEMENT"
                          ],
                          "description": "The type of the item being requested.",
                          "example": "ACCESS_PROFILE"
                        },
                        "id": {
                          "type": "string",
                          "description": "ID of Role, Access Profile or Entitlement being requested.",
                          "example": "2c9180835d2e5168015d32f890ca1581"
                        },
                        "comment": {
                          "type": "string",
                          "description": "Comment provided by requester.\n* Comment is required when the request is of type Revoke Access.\n",
                          "example": "Requesting access profile for John Doe"
                        },
                        "clientMetadata": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "example": {
                              "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                              "requestedAppName": "test-app"
                            }
                          },
                          "example": {
                            "requestedAppName": "test-app",
                            "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
                          },
                          "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities."
                        },
                        "removeDate": {
                          "type": "string",
                          "description": "The date the role or access profile is no longer assigned to the specified identity.\n* Specify a date in the future.\n* The current SLA for the deprovisioning is 24 hours.\n* This date can be modified to either extend or decrease the duration of access item assignments for the specified identity.\n* Currently it is not supported for entitlements.\n",
                          "format": "date-time",
                          "example": "2020-07-11T21:23:15.000Z"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "example": {
                        "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                        "requestedAppName": "test-app"
                      }
                    },
                    "example": {
                      "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                      "requestedAppName": "test-app"
                    },
                    "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities."
                  }
                },
                "required": [
                  "requestedFor",
                  "requestedItems"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-requests/cancel": {
      "post": {
        "operationId": "cancelAccessRequest",
        "tags": [
          "Access Requests"
        ],
        "summary": "Cancel Access Request",
        "description": "This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step.\nAny token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request body payload for cancel access request endpoint.",
                "required": [
                  "accountActivityId",
                  "comment"
                ],
                "properties": {
                  "accountActivityId": {
                    "type": "string",
                    "description": "ID of the account activity object corresponding to the access request.",
                    "example": "2c9180835d2e5168015d32f890ca1581"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Reason for cancelling the pending access request.",
                    "example": "I requested this role by mistake."
                  }
                }
              },
              "example": {
                "accountActivityId": "2c91808568c529c60168cca6f90c1313",
                "comment": "I requested this role by mistake."
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-config": {
      "get": {
        "operationId": "getAccessRequestConfig",
        "summary": "Get Access Request Configuration",
        "tags": [
          "Access Requests"
        ],
        "description": "This endpoint returns the current access-request configuration.",
        "responses": {
          "200": {
            "description": "Access Request Configuration Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access-request-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updateAccessRequestConfig",
        "summary": "Update Access Request Configuration",
        "tags": [
          "Access Requests"
        ],
        "description": "This endpoint replaces the current access-request configuration.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approvalsMustBeExternal": {
                    "type": "boolean",
                    "description": "If true, then approvals must be processed by external system."
                  },
                  "autoApprovalEnabled": {
                    "type": "boolean",
                    "description": "If true and requester and reviewer are the same, then automatically approve the approval."
                  },
                  "requestOnBehalfOfConfig": {
                    "description": "Request On Behalf Of Configuration.",
                    "type": "object",
                    "properties": {
                      "allowRequestOnBehalfOfAnyoneByAnyone": {
                        "type": "boolean",
                        "description": "If anyone can request access for anyone."
                      },
                      "allowRequestOnBehalfOfEmployeeByManager": {
                        "type": "boolean",
                        "description": "If a manager can request access for his/her direct reports."
                      }
                    }
                  },
                  "approvalReminderAndEscalationConfig": {
                    "description": "Approval Reminder and Escalation Configuration.",
                    "type": "object",
                    "properties": {
                      "daysUntilEscalation": {
                        "type": "integer",
                        "description": "Number of days to wait before the first reminder. If no reminders are configured, then this is the number of days to wait before escalation."
                      },
                      "daysBetweenReminders": {
                        "type": "integer",
                        "description": "Number of days to wait between reminder notifications."
                      },
                      "maxReminders": {
                        "type": "integer",
                        "description": "Maximum number of reminder notification to send to the reviewer before approval escalation."
                      },
                      "fallbackApproverRef": {
                        "$ref": "#/paths/~1certifications~1%7Bid%7D~1reviewers/get/responses/200/content/application~1json/schema/items"
                      }
                    }
                  },
                  "entitlementRequestConfig": {
                    "description": "Entitlement Request Configuration.",
                    "type": "object",
                    "properties": {
                      "allowEntitlementRequest": {
                        "type": "boolean",
                        "description": "Flag for allowing entitlement request."
                      },
                      "requestCommentsRequired": {
                        "type": "boolean",
                        "description": "Flag for requiring comments while submitting an entitlement request.",
                        "default": false
                      },
                      "deniedCommentsRequired": {
                        "type": "boolean",
                        "description": "Flag for requiring comments while rejecting an entitlement request.",
                        "default": false
                      },
                      "grantRequestApprovalSchemes": {
                        "type": "string",
                        "description": "Approval schemes for granting entitlement request. This can be empty if no approval is needed.\nMultiple schemes must be comma-separated. The valid schemes are \"sourceOwner\", \"manager\" and \"workgroup:{id}\".\nMultiple workgroups (governance groups) can be used.\n",
                        "default": "sourceOwner",
                        "example": "sourceOwner, manager, workgroup:2c918084660f45d6016617daa9210584"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access Request Configuration Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1access-request-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-status": {
      "get": {
        "operationId": "listAccessRequestStatus",
        "tags": [
          "Access Requests"
        ],
        "summary": "Access Request Status",
        "description": "The Access Request Status API returns a list of access request statuses based on the specified query parameters.\nAny token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "Filter the results by the identity for which the requests were made. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "requested-by",
            "schema": {
              "type": "string"
            },
            "description": "Filter the results by the identity that made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "regarding-identity",
            "schema": {
              "type": "string"
            },
            "description": "Filter the results by the specified identity which is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.",
            "required": false
          },
          {
            "in": "query",
            "name": "count",
            "description": "If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 250,
              "default": 250
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of requested item status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of the item being requested."
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ACCESS_PROFILE",
                          "ROLE",
                          "ENTITLEMENT"
                        ],
                        "description": "Type of requested object.",
                        "example": "ACCESS_PROFILE"
                      },
                      "cancelledRequestDetails": {
                        "type": "object",
                        "properties": {
                          "comment": {
                            "type": "string",
                            "description": "Comment made by the owner when cancelling the associated request.",
                            "example": "Nisl quis ipsum quam quisque condimentum nunc ut dolor nunc."
                          },
                          "owner": {
                            "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                          },
                          "modified": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-12-20T09:17:12.192Z"
                          }
                        },
                        "description": "Provides additional details for a request that has been cancelled."
                      },
                      "errorMessages": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/fullcampaign/allOf/1/properties/alerts/items/properties/localizations/items"
                          }
                        },
                        "description": "List of list of localized error messages, if any, encountered during the approval/provisioning process."
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "EXECUTING",
                          "REQUEST_COMPLETED",
                          "CANCELLED",
                          "TERMINATED",
                          "PROVISIONING_VERIFICATION_PENDING",
                          "REJECTED",
                          "PROVISIONING_FAILED",
                          "NOT_ALL_ITEMS_PROVISIONED",
                          "ERROR"
                        ],
                        "description": "Indicates the state of an access request:\n* EXECUTING: The request is executing, which indicates the system is doing some processing.\n* REQUEST_COMPLETED: Indicates the request  has been completed.\n* CANCELLED: The request fwas cancelled with no user input.\n* TERMINATED: The request has been terminated before it was able to complete.\n* PROVISIONING_VERIFICATION_PENDING: The request has finished any approval steps and provisioning is waiting to be verified.\n* REJECTED: The request was rejected.\n* PROVISIONING_FAILED: The request has failed to complete.\n* NOT_ALL_ITEMS_PROVISIONED: One or more of the requested items failed to complete, but there were one or more  successes.\n* ERROR: An error occurred during request processing."
                      },
                      "approvalDetails": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "forwarded": {
                              "type": "boolean",
                              "description": "True if the request for this item was forwarded from one owner to another."
                            },
                            "originalOwner": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "Base identity/workgroup reference object representing the original owner, if forwarded."
                            },
                            "currentOwner": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "Base reference of approver that will make decision."
                            },
                            "reviewedBy": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "The identity who has reviewed the approval."
                            },
                            "modified": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time at which item was modified.",
                              "example": "2019-08-23T18:52:57.398Z"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "PENDING",
                                "APPROVED",
                                "REJECTED",
                                "EXPIRED",
                                "CANCELLED",
                                "ARCHIVED"
                              ],
                              "description": "Indicates the state of the request processing for this item:\n* PENDING: The request for this item is awaiting processing.\n* APPROVED: The request for this item has been approved.\n* REJECTED: The request for this item was rejected.\n* EXPIRED: The request for this item expired with no action taken.\n* CANCELLED: The request for this item was cancelled with no user action.\n* ARCHIVED: The request for this item has been archived after completion."
                            },
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "APP_OWNER",
                                "SOURCE_OWNER",
                                "MANAGER",
                                "ROLE_OWNER",
                                "ACCESS_PROFILE_OWNER",
                                "GOVERNANCE_GROUP"
                              ],
                              "description": "Describes the individual or group that is responsible for an approval step."
                            },
                            "errorMessages": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/fullcampaign/allOf/1/properties/alerts/items/properties/localizations/items"
                              },
                              "description": "If the request failed, includes any error messages that were generated."
                            },
                            "comment": {
                              "type": "string",
                              "description": "Comment, if any, provided by the approver."
                            },
                            "removeDate": {
                              "type": "string",
                              "description": "The date the role or access profile is no longer assigned to the specified identity.",
                              "format": "date-time",
                              "example": "2020-07-11T00:00:00Z"
                            }
                          }
                        },
                        "description": "Approval details for each item."
                      },
                      "manualWorkItemDetails": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "forwarded": {
                              "type": "boolean",
                              "description": "True if the request for this item was forwarded from one owner to another."
                            },
                            "originalOwner": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "Base identity/workgroup reference object representing the original owner, if forwarded."
                            },
                            "currentOwner": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "Base reference of approver that will make decision."
                            },
                            "modified": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time at which item was modified.",
                              "example": "2019-08-23T18:52:57.398Z"
                            },
                            "status": {
                              "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/approvalDetails/items/properties/status"
                            }
                          }
                        },
                        "description": "Manual work items created for provisioning the item."
                      },
                      "accountActivityItemId": {
                        "type": "string",
                        "description": "Id of associated account activity item.",
                        "example": "2c9180926cbfbddd016cbfc7c3b10010"
                      },
                      "requestType": {
                        "$ref": "#/paths/~1access-requests/post/requestBody/content/application~1json/schema/properties/requestType"
                      },
                      "modified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the request was last modified.",
                        "example": "2019-08-23T18:52:59.162Z"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the request was created.",
                        "example": "2019-08-23T18:40:35.772Z"
                      },
                      "requester": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity that requested the item."
                      },
                      "requestedFor": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity for whom the Access Request Status is requested for."
                      },
                      "requesterComment": {
                        "description": "The requester's comment.",
                        "type": "object",
                        "properties": {
                          "comment": {
                            "type": "string",
                            "description": "Content of the comment",
                            "example": "Et quam massa maximus vivamus nisi ut urna tincidunt metus elementum erat"
                          },
                          "author": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ACCOUNT_CORRELATION_CONFIG",
                                  "ACCESS_PROFILE",
                                  "ACCESS_REQUEST_APPROVAL",
                                  "ACCOUNT",
                                  "APPLICATION",
                                  "CAMPAIGN",
                                  "CAMPAIGN_FILTER",
                                  "CERTIFICATION",
                                  "CLUSTER",
                                  "CONNECTOR_SCHEMA",
                                  "ENTITLEMENT",
                                  "GOVERNANCE_GROUP",
                                  "IDENTITY",
                                  "IDENTITY_PROFILE",
                                  "IDENTITY_REQUEST",
                                  "LIFECYCLE_STATE",
                                  "PASSWORD_POLICY",
                                  "ROLE",
                                  "RULE",
                                  "SOD_POLICY",
                                  "SOURCE",
                                  "TAG_CATEGORY",
                                  "TASK_RESULT",
                                  "REPORT_RESULT",
                                  "SOD_VIOLATION",
                                  "ACCOUNT_ACTIVITY"
                                ],
                                "description": "An enumeration of the types of DTOs supported within the IdentityNow infrastructure.",
                                "example": "IDENTITY"
                              },
                              "id": {
                                "type": "string",
                                "description": "ID of the author",
                                "example": "2c91808568c529c60168cca6f90c1313"
                              },
                              "name": {
                                "type": "string",
                                "description": "Human-readable display name of the identity making the comment",
                                "example": "Adam Kennedy"
                              }
                            }
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time comment was created",
                            "example": "2017-07-11T18:45:37.098Z"
                          }
                        }
                      },
                      "sodViolationContext": {
                        "description": "The details of the SOD violations for the associated approval.",
                        "type": "object",
                        "properties": {
                          "state": {
                            "type": "string",
                            "enum": [
                              "SUCCESS",
                              "ERROR"
                            ],
                            "description": "The status of SOD violation check",
                            "example": "SUCCESS"
                          },
                          "uuid": {
                            "description": "The id of the Violation check event",
                            "type": "string",
                            "example": "f73d16e9-a038-46c5-b217-1246e15fdbdd"
                          },
                          "violationCheckResult": {
                            "description": "The inner object representing the completed SOD Violation check",
                            "type": "object",
                            "properties": {
                              "message": {
                                "$ref": "#/components/schemas/fullcampaign/allOf/1/properties/alerts/items/properties/localizations/items",
                                "description": "If the request failed, includes any error message that was generated.",
                                "example": [
                                  {
                                    "locale": "en-US",
                                    "localeOrigin": "DEFAULT",
                                    "text": "An error has occurred during the SOD violation check"
                                  }
                                ]
                              },
                              "clientMetadata": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.",
                                "example": {
                                  "requestedAppName": "test-app",
                                  "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
                                }
                              },
                              "violationContexts": {
                                "type": "array",
                                "items": {
                                  "description": "The contextual information of the violated criteria",
                                  "type": "object",
                                  "properties": {
                                    "policy": {
                                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                                      "description": "Reference to the Policy that is being violated."
                                    },
                                    "conflictingAccessCriteria": {
                                      "type": "object",
                                      "description": "The object which contains the left and right hand side of the entitlements that got violated according to the policy.",
                                      "properties": {
                                        "leftCriteria": {
                                          "type": "object",
                                          "properties": {
                                            "criteriaList": {
                                              "type": "array",
                                              "items": {
                                                "description": "Details of the Entitlement criteria",
                                                "type": "object",
                                                "properties": {
                                                  "existing": {
                                                    "type": "boolean",
                                                    "example": true,
                                                    "description": "If the entitlement already belonged to the user or not."
                                                  },
                                                  "type": {
                                                    "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type",
                                                    "example": "ENTITLEMENT"
                                                  },
                                                  "id": {
                                                    "type": "string",
                                                    "description": "Entitlement ID",
                                                    "example": "2c918085771e9d3301773b3cb66f6398"
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Entitlement name",
                                                    "example": "My HR Entitlement"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "rightCriteria": {
                                          "type": "object",
                                          "properties": {
                                            "criteriaList": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/sodViolationContext/properties/violationCheckResult/properties/violationContexts/items/properties/conflictingAccessCriteria/properties/leftCriteria/properties/criteriaList/items"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "violatedPolicies": {
                                "type": "array",
                                "description": "A list of the Policies that were violated",
                                "items": {
                                  "$ref": "#/paths/~1identity-profiles~1%7Bidentity-profile-id%7D/delete/responses/202/content/application~1json/schema",
                                  "description": "Reference to the policy that was violated",
                                  "example": [
                                    {
                                      "type": "SOD_POLICY",
                                      "id": "69129440-422d-4a23-aadd-35c828d5bfda",
                                      "name": "HR Policy"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "provisioningDetails": {
                        "type": "object",
                        "properties": {
                          "orderedSubPhaseReferences": {
                            "type": "string",
                            "description": "Ordered CSV of sub phase references to objects that contain more information about provisioning. For example, this can contain \"manualWorkItemDetails\" which indicate that there is further information in that object for this phase.",
                            "example": "manualWorkItemDetails"
                          }
                        },
                        "description": "Provides additional details about provisioning for this request."
                      },
                      "preApprovalTriggerDetails": {
                        "type": "object",
                        "properties": {
                          "comment": {
                            "type": "string",
                            "description": "Comment left for the pre-approval decision",
                            "example": "Access is Approved"
                          },
                          "reviewer": {
                            "type": "string",
                            "description": "The reviewer of the pre-approval decision",
                            "example": "John Doe"
                          },
                          "decision": {
                            "type": "string",
                            "enum": [
                              "APPROVED",
                              "REJECTED"
                            ],
                            "description": "The decision of the pre-approval trigger",
                            "example": "APPROVED"
                          }
                        },
                        "description": "Provides additional details about the pre-approval trigger for this request."
                      },
                      "accessRequestPhases": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "started": {
                              "type": "string",
                              "description": "The time that this phase started.",
                              "format": "date-time",
                              "example": "2020-07-11T00:00:00Z"
                            },
                            "finished": {
                              "type": "string",
                              "description": "The time that this phase finished.",
                              "format": "date-time",
                              "example": "2020-07-12T00:00:00Z"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of this phase.",
                              "example": "APPROVAL_PHASE"
                            },
                            "state": {
                              "type": "string",
                              "enum": [
                                "PENDING",
                                "EXECUTING",
                                "COMPLETED",
                                "CANCELLED"
                              ],
                              "description": "The state of this phase.",
                              "example": "COMPLETED"
                            },
                            "result": {
                              "type": "string",
                              "enum": [
                                "SUCCESSFUL",
                                "FAILED"
                              ],
                              "description": "The state of this phase.",
                              "example": "SUCCESSFUL"
                            },
                            "phaseReference": {
                              "type": "string",
                              "description": "A reference to another object on the RequestedItemStatus that contains more details about the phase. Note that for the Provisioning phase, this will be empty if there are no manual work items.",
                              "example": "approvalDetails"
                            }
                          },
                          "description": "Provides additional details about this access request phase."
                        },
                        "description": "A list of Phases that the Access Request has gone through in order, to help determine the status of the request."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description associated to the requested object.",
                        "example": "This is the Engineering role that engineers are granted."
                      },
                      "removeDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the role access is scheduled for removal.",
                        "example": "2019-10-23T00:00:00.000Z"
                      },
                      "cancelable": {
                        "type": "boolean",
                        "description": "True if the request can be canceled.",
                        "example": true
                      },
                      "accessRequestId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "This is the account activity id.",
                        "example": "ef38f94347e94562b5bb8424a56397d8"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/pending": {
      "get": {
        "operationId": "listPendingApprovals",
        "summary": "Pending Access Request Approvals List",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "schema": {
              "type": "string"
            },
            "description": "If present, the value returns only pending approvals for the specified identity.\n   * ORG_ADMIN users can call this with any identity ID value.\n   * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.\n   * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.",
            "required": false
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**requestedFor.id**: *eq, in*\n\n**modified**: *gt, lt, ge, le*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Pending Approvals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The approval id."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the approval."
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the approval was created.",
                        "example": "2017-07-11T18:45:37.098Z"
                      },
                      "modified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the approval was modified last time.",
                        "example": "2018-07-25T20:22:28.104Z"
                      },
                      "requestCreated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the access-request was created.",
                        "example": "2017-07-11T18:45:35.098Z"
                      },
                      "requestType": {
                        "$ref": "#/paths/~1access-requests/post/requestBody/content/application~1json/schema/properties/requestType",
                        "description": "If the access-request was for granting or revoking access."
                      },
                      "requester": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity that requested the item."
                      },
                      "requestedFor": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity for whom the item is requested for."
                      },
                      "owner": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The owner or approver of the approval."
                      },
                      "requestedObject": {
                        "description": "The requested access item.",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the object."
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the object."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the object."
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "ACCESS_PROFILE",
                              "ROLE",
                              "ENTITLEMENT"
                            ],
                            "description": "Type of the object.",
                            "example": "ROLE"
                          }
                        }
                      },
                      "requesterComment": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment",
                        "description": "The requester's comment."
                      },
                      "previousReviewersComments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment"
                        },
                        "description": "The history of the previous reviewers comments."
                      },
                      "forwardHistory": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "oldApproverName": {
                              "type": "string",
                              "description": "Display name of approver that forwarded the approval.",
                              "example": "frank.mir"
                            },
                            "newApproverName": {
                              "type": "string",
                              "description": "Display name of approver to whom the approval was forwarded.",
                              "example": "al.volta"
                            },
                            "comment": {
                              "type": "string",
                              "description": "Comment made by old approver when forwarding.",
                              "example": "Fusce id orci vel consectetur amet ipsum quam."
                            },
                            "modified": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time at which approval was forwarded.",
                              "example": "2019-08-23T18:52:57.398Z"
                            }
                          }
                        },
                        "description": "The history of approval forward action."
                      },
                      "commentRequiredWhenRejected": {
                        "type": "boolean",
                        "description": "When true the rejector has to provide comments when rejecting"
                      },
                      "actionInProcess": {
                        "description": "Action that is performed on this approval, and system has not finished performing that action yet.",
                        "type": "string",
                        "enum": [
                          "APPROVED",
                          "REJECTED",
                          "FORWARDED"
                        ],
                        "example": "APPROVED"
                      },
                      "removeDate": {
                        "type": "string",
                        "description": "The date the role or access profile is no longer assigned to the specified identity.",
                        "format": "date-time",
                        "example": "2020-07-11T00:00:00Z"
                      },
                      "removeDateUpdateRequested": {
                        "type": "boolean",
                        "description": "If true, then the request is to change the remove date or sunset date."
                      },
                      "currentRemoveDate": {
                        "type": "string",
                        "description": "The remove date or sunset date that was assigned at the time of the request.",
                        "format": "date-time",
                        "example": "2020-07-11T00:00:00Z"
                      },
                      "sodViolationContext": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/sodViolationContext",
                        "description": "The details of the SOD violations for the associated approval."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/completed": {
      "get": {
        "operationId": "listCompletedApprovals",
        "summary": "Completed Access Request Approvals List",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "schema": {
              "type": "string"
            },
            "description": "If present, the value returns only completed approvals for the specified identity.\n   * ORG_ADMIN users can call this with any identity ID value.\n   * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.\n   * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value."
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**requestedFor.id**: *eq, in*\n\n**modified**: *gt, lt, ge, le*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Completed Approvals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The approval id."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the approval."
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the approval was created.",
                        "example": "2017-07-11T18:45:37.098Z"
                      },
                      "modified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the approval was modified last time.",
                        "example": "2018-07-25T20:22:28.104Z"
                      },
                      "requestCreated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the access-request was created.",
                        "example": "2017-07-11T18:45:35.098Z"
                      },
                      "requestType": {
                        "$ref": "#/paths/~1access-requests/post/requestBody/content/application~1json/schema/properties/requestType",
                        "description": "If the access-request was for granting or revoking access."
                      },
                      "requester": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity that requested the item."
                      },
                      "requestedFor": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity for whom the item is requested for."
                      },
                      "reviewedBy": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The identity who has reviewed the approval."
                      },
                      "owner": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "The owner or approver of the approval."
                      },
                      "requestedObject": {
                        "$ref": "#/paths/~1access-request-approvals~1pending/get/responses/200/content/application~1json/schema/items/properties/requestedObject",
                        "description": "The requested access item."
                      },
                      "requesterComment": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment",
                        "description": "The requester's comment."
                      },
                      "reviewerComment": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment",
                        "description": "The approval's reviewer's comment."
                      },
                      "previousReviewersComments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment"
                        },
                        "description": "The history of the previous reviewers comments."
                      },
                      "forwardHistory": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1access-request-approvals~1pending/get/responses/200/content/application~1json/schema/items/properties/forwardHistory/items"
                        },
                        "description": "The history of approval forward action."
                      },
                      "commentRequiredWhenRejected": {
                        "type": "boolean",
                        "description": "When true the rejector has to provide comments when rejecting"
                      },
                      "state": {
                        "description": "The final state of the approval",
                        "type": "string",
                        "enum": [
                          "APPROVED",
                          "REJECTED"
                        ],
                        "example": "APPROVED"
                      },
                      "removeDate": {
                        "type": "string",
                        "description": "The date the role or access profile is no longer assigned to the specified identity.",
                        "format": "date-time",
                        "example": "2020-07-11T00:00:00Z"
                      },
                      "removeDateUpdateRequested": {
                        "type": "boolean",
                        "description": "If true, then the request was to change the remove date or sunset date."
                      },
                      "currentRemoveDate": {
                        "type": "string",
                        "description": "The remove date or sunset date that was assigned at the time of the request.",
                        "format": "date-time",
                        "example": "2020-07-11T00:00:00Z"
                      },
                      "sodViolationContext": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/sodViolationContext",
                        "description": "The details of the SOD violations for the associated approval."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/{approvalId}/approve": {
      "post": {
        "operationId": "approveRequest",
        "summary": "Approves an access request approval.",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint approves an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.",
        "parameters": [
          {
            "in": "path",
            "name": "approvalId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the approval.",
            "example": "2c91808b7294bea301729568c68c002e"
          }
        ],
        "requestBody": {
          "description": "Reviewer's comment.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1access-request-approvals~1%7BapprovalId%7D~1reject/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/{approvalId}/reject": {
      "post": {
        "operationId": "rejectRequest",
        "summary": "Rejects an access request approval.",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint rejects an access request approval. Only the owner of the approval and admin users are allowed to perform this action.",
        "parameters": [
          {
            "in": "path",
            "name": "approvalId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the approval.",
            "example": "2c91808b7294bea301729568c68c002e"
          }
        ],
        "requestBody": {
          "description": "Reviewer's comment.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/{approvalId}/forward": {
      "post": {
        "operationId": "forwardRequest",
        "summary": "Forwards an access request approval to a new owner.",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint forwards an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.",
        "parameters": [
          {
            "in": "path",
            "name": "approvalId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the approval.",
            "example": "2c91808b7294bea301729568c68c002e"
          }
        ],
        "requestBody": {
          "description": "Information about the forwarded approval.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newOwnerId",
                  "comment"
                ],
                "properties": {
                  "newOwnerId": {
                    "type": "string",
                    "description": "The Id of the new owner",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "comment": {
                    "type": "string",
                    "description": "The comment provided by the forwarder",
                    "minLength": 1,
                    "maxLength": 255
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/approval-summary": {
      "get": {
        "operationId": "approvalSummary",
        "summary": "Get the number of pending, approved and rejected access requests approvals",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint returns the number of pending, approved and rejected access requests approvals. See \"owner-id\" query parameter below for authorization info.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "schema": {
              "type": "string"
            },
            "description": "The id of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.\n   * ORG_ADMIN users can call this with any identity ID value.\n   * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.\n   * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value."
          },
          {
            "in": "query",
            "name": "from-date",
            "schema": {
              "type": "string"
            },
            "description": "From date is the date and time from which the results will be shown. It should be in a valid ISO-8601 format\n\nexample: from-date=2020-03-19T19:59:11Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Number of pending, approved, rejected access request approvals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pending": {
                      "type": "integer",
                      "description": "The number of pending access requests approvals."
                    },
                    "approved": {
                      "type": "integer",
                      "description": "The number of approved access requests approvals."
                    },
                    "rejected": {
                      "type": "integer",
                      "description": "The number of rejected access requests approvals."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the query parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations": {
      "get": {
        "operationId": "accessRequestRecommendations",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "Identity Access Request Recommendations",
        "description": "This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "identity-id",
            "description": "Get access request recommendations for an identityId. *me* indicates the current user.",
            "schema": {
              "type": "string",
              "default": "me"
            },
            "required": false,
            "example": "2c91808570313110017040b06f344ec9"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 15,
              "default": 15
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "include-translation-messages",
            "description": "If *true* it will populate a list of translation messages in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "example": false
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter recommendations using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**access.name**: *co*\n\n**access.type**: *eq, in*\n\n**access.description**: *co*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **access.name, access.type**\n\nBy default the recommendations are sorted by highest confidence first."
          }
        ],
        "responses": {
          "200": {
            "description": "List of access request recommendations for the identityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "identityId": {
                        "type": "string",
                        "format": "UUID",
                        "description": "Identity ID for the recommendation",
                        "example": "2c91808570313110017040b06f344ec9"
                      },
                      "access": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "UUID",
                            "description": "ID of access item being recommended.",
                            "example": "2c9180835d2e5168015d32f890ca1581"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "ACCESS_PROFILE",
                              "ROLE"
                            ],
                            "description": "The type of access item."
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the access item",
                            "example": "Employee-database-read-write"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the access item",
                            "example": "This item grants an employee read and write access to the database"
                          }
                        }
                      },
                      "ignored": {
                        "type": "boolean",
                        "description": "Whether or not the identity has already chosen to ignore this recommendation."
                      },
                      "requested": {
                        "type": "boolean",
                        "description": "Whether or not the identity has already chosen to request this recommendation."
                      },
                      "viewed": {
                        "type": "boolean",
                        "description": "Whether or not the identity reportedly viewed this recommendation."
                      },
                      "messages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "interpretation": {
                              "type": "string",
                              "description": "Information about why the access item was recommended.",
                              "example": "95% of your peers have this access."
                            }
                          }
                        }
                      },
                      "translationMessages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "$ref": "#/components/schemas/RecommendationResponseDto/properties/response/items/properties/translationMessages/items"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/ignored-items": {
      "post": {
        "operationId": "addAccessRequestRecommendationsIgnoredItem",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "Notification of Ignored Access Request Recommendations",
        "description": "This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.",
        "requestBody": {
          "description": "The recommended access item to ignore for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recommendation successfully stored as ignored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getAccessRequestRecommendationsIgnoredItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "List of Ignored Access Request Recommendations",
        "description": "This API returns the list of ignored access request recommendations.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter recommendations using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**access.id**: *eq, in*\n\n**access.type**: *eq, in*\n\n**identityId**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **access.id, access.type, identityId, timestamp**"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of ignored access request recommendations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/requested-items": {
      "post": {
        "operationId": "addAccessRequestRecommendationsRequestedItem",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "Notification of Requested Access Request Recommendations",
        "description": "This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.",
        "requestBody": {
          "description": "The recommended access item that was requested for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notification successfully acknowledged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getAccessRequestRecommendationsRequestedItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "List of Requested Access Request Recommendations",
        "description": "This API returns a list of requested access request recommendations.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter recommendations using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**access.id**: *eq, in*\n\n**access.type**: *eq, in*\n\n**identityId**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **access.id, access.type, identityId, timestamp**"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of requested access request recommendations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/viewed-items": {
      "post": {
        "operationId": "addAccessRequestRecommendationsViewedItem",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "Notification of Viewed Access Request Recommendations",
        "description": "This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.",
        "requestBody": {
          "description": "The recommended access that was viewed for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identityId": {
                    "type": "string",
                    "format": "UUID",
                    "description": "The identity ID taking the action.",
                    "example": "2c91808570313110017040b06f344ec9"
                  },
                  "access": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "UUID",
                        "description": "ID of access item being recommended.",
                        "example": "2c9180835d2e5168015d32f890ca1581"
                      },
                      "type": {
                        "$ref": "#/paths/~1ai-access-request-recommendations/get/responses/200/content/application~1json/schema/items/properties/access/properties/type"
                      }
                    }
                  }
                },
                "required": [
                  "identityId",
                  "access"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recommendation successfully stored as viewed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "identityId": {
                      "type": "string",
                      "format": "UUID",
                      "description": "The identity ID taking the action.",
                      "example": "2c91808570313110017040b06f344ec9"
                    },
                    "access": {
                      "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/requestBody/content/application~1json/schema/properties/access"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-11T18:45:37.098Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getAccessRequestRecommendationsViewedItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "List of Viewed Access Request Recommendations",
        "description": "This API returns the list of viewed access request recommendations.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter recommendations using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**access.id**: *eq, in*\n\n**access.type**: *eq, in*\n\n**identityId**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **access.id, access.type, identityId, timestamp**"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of viewed access request recommendations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/viewed-items/bulk-create": {
      "post": {
        "operationId": "addAccessRequestRecommendationsViewedItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "summary": "Notification of Viewed Access Request Recommendations in Bulk",
        "description": "This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.",
        "requestBody": {
          "description": "The recommended access items that were viewed for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recommendations successfully stored as viewed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1ai-access-request-recommendations~1viewed-items/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "operationId": "listAccounts",
        "tags": [
          "Accounts"
        ],
        "summary": "Accounts List",
        "description": "This returns a list of accounts.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account-list:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "detailLevel",
            "schema": {
              "type": "string",
              "enum": [
                "SLIM",
                "FULL"
              ]
            },
            "description": "Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.",
            "example": "FULL"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": 250,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 250,
              "default": 250
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**identityId**: *eq*\n\n**name**: *eq, in*\n\n**nativeIdentity**: *eq, in*\n\n**sourceId**: *eq, in*\n\n**uncorrelated**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "List of account objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "Slim Account",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique ID from the owning source",
                                "example": "2c9180857893f12901789445619b0366"
                              },
                              "nativeIdentity": {
                                "type": "string",
                                "description": "The native identifier of the account",
                                "example": "brandin.gray"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description for the account",
                                "example": "Brandin Gray the CEO of Silly Inc."
                              },
                              "disabled": {
                                "type": "boolean",
                                "description": "Whether the account is disabled",
                                "example": false
                              },
                              "locked": {
                                "type": "boolean",
                                "description": "Whether the account is locked",
                                "example": false
                              },
                              "manuallyCorrelated": {
                                "type": "boolean",
                                "description": "Whether the account was manually correlated",
                                "example": false
                              },
                              "hasEntitlements": {
                                "type": "boolean",
                                "description": "Whether the account has any entitlements associated with it",
                                "example": true
                              },
                              "sourceId": {
                                "type": "string",
                                "description": "The ID of the source for which this account belongs",
                                "example": "2c9180835d2e5168015d32f890ca1581"
                              },
                              "identityId": {
                                "type": "string",
                                "description": "The ID of the identity for which this account is correlated to if not uncorrelated",
                                "example": "4b9163835d2e5168015d32f890ca5936"
                              },
                              "attributes": {
                                "type": "object",
                                "description": "A map containing attributes associated with the account"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Full Account",
                        "allOf": [
                          {
                            "$ref": "#/paths/~1accounts/get/responses/200/content/application~1json/schema/items/oneOf/0"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "authoritative": {
                                "type": "boolean",
                                "description": "Whether this account belongs to an authoritative source",
                                "example": false
                              },
                              "systemAccount": {
                                "type": "boolean",
                                "description": "Whether this account is for the IdentityNow source",
                                "example": false
                              },
                              "uncorrelated": {
                                "type": "boolean",
                                "description": "True if this account is not correlated to an identity",
                                "example": false
                              },
                              "features": {
                                "type": "string",
                                "description": "A string list containing the owning source's features",
                                "example": "ENABLE"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "examples": {
                  "Slim Accounts": {
                    "description": "List of slim accounts that would result with *detailLevel = SLIM*",
                    "value": [
                      {
                        "attributes": null,
                        "created": "2021-09-28T02:15:44.644Z",
                        "description": null,
                        "disabled": false,
                        "features": "PROVISIONING, GROUP_PROVISIONING, SYNC_PROVISIONING, AUTHENTICATE",
                        "hasEntitlements": true,
                        "id": "2c9180867c184ff6017c2a2fbf031667",
                        "identityId": "2c9180867c184ff6017c2a2fbf031666",
                        "locked": false,
                        "manuallyCorrelated": false,
                        "modified": "2021-09-28T02:16:12.207Z",
                        "name": "Geovanni.0a7cad6df",
                        "nativeIdentity": "CN=Geovanni 0a7cad6df,OU=hpun,OU=org-data-service,DC=TestAutomationAD,DC=local",
                        "sourceId": "2c91808b7c28b350017c2a2ec5790aa1",
                        "uuid": "{e4218fa4-da52-4bb0-aa41-d2dcc08a7ad8}"
                      }
                    ]
                  },
                  "Full Accounts": {
                    "description": "List of slim accounts that would result with *detailLevel = FULL*  or not specifying it",
                    "value": [
                      {
                        "attributes": null,
                        "authoritative": true,
                        "created": "2021-09-28T02:15:44.644Z",
                        "description": null,
                        "disabled": false,
                        "features": "PROVISIONING, GROUP_PROVISIONING, SYNC_PROVISIONING, AUTHENTICATE",
                        "hasEntitlements": true,
                        "id": "2c9180867c184ff6017c2a2fbf031667",
                        "identityId": "2c9180867c184ff6017c2a2fbf031666",
                        "locked": false,
                        "manuallyCorrelated": false,
                        "modified": "2021-09-28T02:16:12.207Z",
                        "name": "Geovanni.0a7cad6df",
                        "nativeIdentity": "CN=Geovanni 0a7cad6df,OU=hpun,OU=org-data-service,DC=TestAutomationAD,DC=local",
                        "sourceId": "2c91808b7c28b350017c2a2ec5790aa1",
                        "systemAccount": false,
                        "uncorrelated": false,
                        "uuid": "{e4218fa4-da52-4bb0-aa41-d2dcc08a7ad8}"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Create Account",
        "description": "This API submits an account creation task and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:create"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "attributes"
                ],
                "properties": {
                  "attributes": {
                    "description": "The schema attribute values for the account",
                    "type": "object",
                    "example": {
                      "city": "Austin",
                      "displayName": "John Doe",
                      "userName": "jdoe",
                      "sAMAccountName": "jDoe",
                      "mail": "john.doe@sailpoint.com"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Accounts async response containing details on started async process",
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "id of the task",
                      "type": "string",
                      "example": "2c91808474683da6017468693c260195"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "getAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Account Details",
        "description": "This API returns the details for a single account based on the ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An account object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "sourceId": {
                          "type": "string",
                          "example": "2c9180835d2e5168015d32f890ca1581"
                        },
                        "identityId": {
                          "type": "string",
                          "example": "2c9180835d2e5168015d32f890ca1581"
                        },
                        "attributes": {
                          "type": "object"
                        },
                        "authoritative": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "locked": {
                          "type": "boolean"
                        },
                        "nativeIdentity": {
                          "type": "string"
                        },
                        "systemAccount": {
                          "type": "boolean"
                        },
                        "uncorrelated": {
                          "type": "boolean"
                        },
                        "uuid": {
                          "type": "string"
                        },
                        "manuallyCorrelated": {
                          "type": "boolean"
                        },
                        "hasEntitlements": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account",
        "description": "This updates account details.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/identityId",
                  "value": "2c9180845d1edece015d27a975983e21"
                }
              ]
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. Update request accepted and is in progress.",
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account",
        "description": "This API submits an account update task and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1accounts/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1accounts/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Delete Account",
        "description": "This API submits an account delete task and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1accounts/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/entitlements": {
      "get": {
        "operationId": "getAccountEntitlements",
        "tags": [
          "Accounts"
        ],
        "summary": "Account Entitlements",
        "description": "This API returns entitlements of the account.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account-entitlement:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "query",
            "name": "count",
            "description": "If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored(total count).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 250,
              "default": 250
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of account entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                      },
                      {
                        "type": "object",
                        "description": "Entitlement object that represents entitlement",
                        "properties": {
                          "attribute": {
                            "description": "Name of the entitlement attribute",
                            "type": "string",
                            "example": "authorizationType"
                          },
                          "value": {
                            "description": "Raw value of the entitlement",
                            "type": "string",
                            "example": "CN=Users,dc=sailpoint,dc=com"
                          },
                          "description": {
                            "description": "Entitlment description",
                            "type": "string"
                          },
                          "attributes": {
                            "description": "Entitlement attributes",
                            "type": "object"
                          },
                          "sourceSchemaObjectType": {
                            "description": "Schema objectType on the given application that maps to an Account Group",
                            "type": "string",
                            "example": "group"
                          },
                          "privileged": {
                            "description": "Determines if this Entitlement is privileged.",
                            "type": "boolean"
                          },
                          "cloudGoverned": {
                            "description": "Determines if this Entitlement is goverened in the cloud.",
                            "type": "boolean"
                          },
                          "source": {
                            "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                            "description": "Reference to the source this entitlment belongs to.",
                            "example": [
                              {
                                "type": "SOURCE",
                                "id": "2c9180835d191a86015d28455b4b232a",
                                "name": "HR Active Directory"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/reload": {
      "post": {
        "operationId": "reloadAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Reload Account",
        "description": "This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:reload"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1accounts/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/enable": {
      "post": {
        "operationId": "enableAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Enable Account",
        "description": "This API submits a task to enable account and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:enable"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used for account enable/disable",
                "type": "object",
                "properties": {
                  "externalVerificationId": {
                    "description": "If set, an external process validates that the user wants to proceed with this request.",
                    "type": "string",
                    "example": "3f9180835d2e5168015d32f890ca1581"
                  },
                  "forceProvisioning": {
                    "description": "If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.",
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1accounts/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/disable": {
      "post": {
        "operationId": "disableAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Disable Account",
        "description": "This API submits a task to disable the account and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:disable"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1accounts~1%7Bid%7D~1enable/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1accounts/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/unlock": {
      "post": {
        "operationId": "unlockAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Unlock Account",
        "description": "This API submits a task to unlock an account and returns the task ID.  \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:account:unlock"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used for account unlock",
                "type": "object",
                "properties": {
                  "externalVerificationId": {
                    "description": "If set, an external process validates that the user wants to proceed with this request.",
                    "type": "string",
                    "example": "3f9180835d2e5168015d32f890ca1581"
                  },
                  "unlockIDNAccount": {
                    "description": "If set, the IDN account is unlocked after the workflow completes.",
                    "type": "boolean",
                    "example": false
                  },
                  "forceProvisioning": {
                    "description": "If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.",
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1accounts/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/search-attribute-config": {
      "post": {
        "operationId": "createSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Configure/create extended search attributes in IdentityNow.",
        "description": "This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAttributeConfig"
              },
              "example": {
                "name": "newMailAttribute",
                "displayName": "New Mail Attribute",
                "applicationAttributes": {
                  "2c9180866166b5b0016167c32ef31a66": "mail",
                  "2c9180866166b5b0016167c32ef31a67": "mail"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Retrieve a list of extended search attributes in IdentityNow.",
        "description": "This API retrieves a list of attribute/application associates currently configured in IdentityNow.\nA token with ORG_ADMIN authority is required to call this API.",
        "responses": {
          "200": {
            "description": "List of attribute configurations in IdentityNow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchAttributeConfig"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/accounts/search-attribute-config/{name}": {
      "get": {
        "operationId": "getSingleSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Get the details of a specific extended search attribute in IdentityNow.",
        "description": "This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the extended search attribute configuration to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "newMailAttribute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specific attribute configuration in IdentityNow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchAttributeConfig"
                  }
                }
              }
            }
          },
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Delete an extended search attribute in IdentityNow.",
        "description": "This API accepts an extended attribute name and deletes the corresponding extended attribute configuration.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the extended search attribute configuration to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "newMailAttribute"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Update the details of a specific extended search attribute in IdentityNow.",
        "description": "This API updates an existing Search Attribute Configuration. The following fields are patchable:\n**name**, **displayName**, **applicationAttributes**\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the Search Attribute Configuration to patch.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "promotedMailAttribute"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "newAttributeName"
                },
                {
                  "op": "replace",
                  "path": "/displayName",
                  "value": "new attribute display name"
                },
                {
                  "op": "add",
                  "path": "/applicationAttributes",
                  "value": {
                    "2c91808b79fd2422017a0b35d30f3968": "employeeNumber"
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the Search Attribute Configuration as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAttributeConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/account-activities": {
      "get": {
        "operationId": "listAccountActivities",
        "tags": [
          "Account Activities"
        ],
        "summary": "List Account Activities",
        "description": "This gets a collection of account activities that satisfy the given query parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "requested-by",
            "schema": {
              "type": "string"
            },
            "description": "The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "regarding-identity",
            "schema": {
              "type": "string"
            },
            "description": "The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of account activity.",
            "required": false
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**type**: *eq, in*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **type, created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of account activities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1account-activities~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/account-activities/{id}": {
      "get": {
        "operationId": "getAccountActivity",
        "tags": [
          "Account Activities"
        ],
        "summary": "Get Account Activity",
        "description": "This gets a single account activity by its id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account activity id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An account activity object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the account activity itself",
                      "example": "2c9180835d2e5168015d32f890ca1581"
                    },
                    "name": {
                      "type": "string",
                      "example": "2c9180835d2e5168015d32f890ca1581"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-07-11T18:45:37.098Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2018-06-25T20:22:28.104Z"
                    },
                    "completed": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2018-10-19T13:49:37.385Z"
                    },
                    "completionStatus": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE",
                        "INCOMPLETE",
                        "PENDING"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "example": "appRequest"
                    },
                    "requesterIdentitySummary": {
                      "$ref": "#/paths/~1account-activities~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/targetIdentitySummary"
                    },
                    "targetIdentitySummary": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of this identity summary",
                          "example": "ff80818155fe8c080155fe8d925b0316"
                        },
                        "name": {
                          "type": "string",
                          "description": "Human-readable display name of identity",
                          "example": "SailPoint Services"
                        },
                        "identityId": {
                          "type": "string",
                          "description": "ID of the identity that this summary represents",
                          "example": "c15b9f5cca5a4e9599eaa0e64fa921bd"
                        },
                        "completed": {
                          "type": "boolean",
                          "description": "Indicates if all access items for this summary have been decided on"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "sailpoint.connector.ConnectorException: java.lang.InterruptedException: Timeout waiting for response to message 0 from client 57a4ab97-ab3f-4aef-9fe2-0eaf15c73d26 after 60 seconds."
                      ]
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": null
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Item id",
                            "example": "2725138ee34949beb0d6cc982d2d4625"
                          },
                          "name": {
                            "type": "string",
                            "description": "Human-readable display name of item"
                          },
                          "requested": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time item was requested",
                            "example": "2017-07-11T18:45:37.098Z"
                          },
                          "approvalStatus": {
                            "$ref": "#/components/schemas/WorkItems/properties/state"
                          },
                          "provisioningStatus": {
                            "type": "string",
                            "enum": [
                              "PENDING",
                              "FINISHED",
                              "UNVERIFIABLE",
                              "COMMITED",
                              "FAILED",
                              "RETRY"
                            ],
                            "description": "Provisioning state of an account activity item"
                          },
                          "requesterComment": {
                            "$ref": "#/paths/~1account-activities~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/cancelComment"
                          },
                          "reviewerIdentitySummary": {
                            "$ref": "#/paths/~1account-activities~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/targetIdentitySummary"
                          },
                          "reviewerComment": {
                            "$ref": "#/paths/~1account-activities~1%7Bid%7D/get/responses/200/content/application~1json/schema/properties/cancelComment"
                          },
                          "operation": {
                            "type": "string",
                            "enum": [
                              "ADD",
                              "CREATE",
                              "MODIFY",
                              "DELETE",
                              "DISABLE",
                              "ENABLE",
                              "UNLOCK",
                              "LOCK",
                              "REMOVE"
                            ],
                            "description": "Represents an operation in an account activity item"
                          },
                          "attribute": {
                            "type": "string",
                            "description": "Attribute to which account activity applies",
                            "nullable": true,
                            "example": "detectedRoles"
                          },
                          "value": {
                            "type": "string",
                            "description": "Value of attribute",
                            "nullable": true,
                            "example": "Treasury Analyst [AccessProfile-1529010191212]"
                          },
                          "nativeIdentity": {
                            "nullable": true,
                            "type": "string",
                            "description": "Native identity in the target system to which the account activity applies",
                            "example": "Sandie.Camero"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "Id of Source to which account activity applies",
                            "example": "2c91808363ef85290164000587130c0c"
                          },
                          "accountRequestInfo": {
                            "type": "object",
                            "nullable": true,
                            "properties": {
                              "requestedObjectId": {
                                "type": "string",
                                "description": "Id of requested object",
                                "example": "2c91808563ef85690164001c31140c0c"
                              },
                              "requestedObjectName": {
                                "type": "string",
                                "description": "Human-readable name of requested object",
                                "example": "Treasury Analyst"
                              },
                              "requestedObjectType": {
                                "$ref": "#/paths/~1requestable-objects/get/parameters/1/schema/items"
                              }
                            },
                            "description": "If an account activity item is associated with an access request, captures details of that request."
                          },
                          "clientMetadata": {
                            "nullable": true,
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Arbitrary key-value pairs, if any were included in the corresponding access request item"
                          },
                          "removeDate": {
                            "nullable": true,
                            "type": "string",
                            "description": "The date the role or access profile is no longer assigned to the specified identity.",
                            "format": "date-time",
                            "example": "2020-07-11T00:00:00Z"
                          }
                        }
                      }
                    },
                    "executionStatus": {
                      "type": "string",
                      "enum": [
                        "EXECUTING",
                        "VERIFYING",
                        "TERMINATED",
                        "COMPLETED"
                      ]
                    },
                    "clientMetadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Arbitrary key-value pairs, if any were included in the corresponding access request"
                    },
                    "cancelable": {
                      "type": "boolean",
                      "description": "Whether the account activity can be canceled before completion"
                    },
                    "cancelComment": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "commenterId": {
                          "type": "string",
                          "description": "Id of the identity making the comment",
                          "example": "2c918084660f45d6016617daa9210584"
                        },
                        "commenterName": {
                          "type": "string",
                          "description": "Human-readable display name of the identity making the comment",
                          "example": "Adam Kennedy"
                        },
                        "body": {
                          "type": "string",
                          "description": "Content of the comment",
                          "example": "Et quam massa maximus vivamus nisi ut urna tincidunt metus elementum erat."
                        },
                        "date": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date and time comment was made",
                          "example": "2017-07-11T18:45:37.098Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/account-aggregations/{id}/status": {
      "get": {
        "operationId": "getAccountAggregationStatus",
        "tags": [
          "Account Aggregations"
        ],
        "summary": "In-progress Account Aggregation status",
        "description": "This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.\n\nAccounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.\n\nSince this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.\n\n*Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*\n\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account aggregation id",
            "example": "2c91808477a6b0c60177a81146b8110b"
          }
        ],
        "responses": {
          "200": {
            "description": "An account aggregation status object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAggregation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns": {
      "get": {
        "operationId": "getActiveCampaigns",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "List Campaigns",
        "description": "Gets campaigns and returns them in a list. Can provide increased level of detail for each campaign if provided the correct query.",
        "parameters": [
          {
            "in": "query",
            "name": "detail",
            "schema": {
              "type": "string",
              "enum": [
                "SLIM",
                "FULL"
              ]
            },
            "description": "Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.",
            "example": "FULL"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq*\n\n**status**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name**"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of campaign objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/slimcampaign"
                      },
                      {
                        "$ref": "#/components/schemas/fullcampaign"
                      }
                    ]
                  }
                },
                "examples": {
                  "Slim Campaign": {
                    "description": "List of Slim Campaigns that would result from not specifying *detail* or specifying SLIM",
                    "value": [
                      {
                        "id": "2c9079b270a266a60170a2779fcb0007",
                        "name": "Manager Campaign",
                        "description": "Everyone needs to be reviewed by their manager.",
                        "deadline": "2020-03-15T00:00:00Z",
                        "type": "MANAGER",
                        "emailNotificationEnabled": true,
                        "autoRevokeAllowed": false,
                        "recommendationsEnabled": false,
                        "status": "ACTIVE"
                      },
                      {
                        "id": "2a9079c740a922b33871b2779fac5185",
                        "name": "Another Manager Campaign",
                        "description": "Everyone needs to be reviewed by their manager again.",
                        "deadline": "2020-03-29T00:00:00Z",
                        "type": "MANAGER",
                        "emailNotificationEnabled": true,
                        "autoRevokeAllowed": false,
                        "recommendationsEnabled": false,
                        "status": "ACTIVE"
                      }
                    ]
                  },
                  "Full Campaign": {
                    "description": "List of Campaigns that would result from specifying *detail* as FULL",
                    "value": [
                      {
                        "id": "2c9079b270a266a60170a2779fcb0007",
                        "name": "Manager Campaign",
                        "description": "Everyone needs to be reviewed by their manager.",
                        "created": "2020-03-03T22:15:13.611Z",
                        "modified": "2020-03-03T22:20:12.674Z",
                        "deadline": "2020-03-15T00:00:00Z",
                        "type": "MANAGER",
                        "emailNotificationEnabled": true,
                        "autoRevokeAllowed": false,
                        "recommendationsEnabled": false,
                        "status": "ACTIVE",
                        "filter": {
                          "type": "CAMPAIGN_FILTER",
                          "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                        }
                      },
                      {
                        "id": "2a9079c740a922b33871b2779fac5185",
                        "name": "Another Manager Campaign",
                        "description": "Everyone needs to be reviewed by their manager again.",
                        "created": "2020-03-15T22:15:13.611Z",
                        "modified": "2020-03-15T22:20:12.674Z",
                        "deadline": "2020-03-29T00:00:00Z",
                        "type": "MANAGER",
                        "emailNotificationEnabled": true,
                        "autoRevokeAllowed": false,
                        "recommendationsEnabled": false,
                        "status": "ACTIVE",
                        "filter": {
                          "type": "CAMPAIGN_FILTER",
                          "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Create a campaign",
        "description": "Creates a new Certification Campaign with the information provided in the request body.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fullcampaign"
              },
              "example": {
                "name": "Manager Review",
                "description": "A review of everyone's access by their manager.",
                "deadline": "2020-12-25T06:00:00.468Z",
                "type": "MANAGER",
                "emailNotificationEnabled": false,
                "autoRevokeAllowed": false,
                "recommendationsEnabled": false,
                "filter": {
                  "type": "CAMPAIGN_FILTER",
                  "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates that the campaign requested was successfully created and returns its representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fullcampaign"
                },
                "examples": {
                  "Manager": {
                    "description": "Response for request to create a Manager Certification Campaign.",
                    "value": {
                      "id": "2c918086719eec070171a7e3355a360a",
                      "name": "Manager Review",
                      "description": "A review of everyone's access by their manager.",
                      "deadline": "2020-12-25T06:00:00.123Z",
                      "type": "MANAGER",
                      "status": "ACTIVE",
                      "emailNotificationEnabled": false,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false,
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                      }
                    }
                  },
                  "Source Owner": {
                    "description": "Response for request to create a Source Owner Certification Campaign.",
                    "value": {
                      "id": "2c918086719eec070171a7e3355a412b",
                      "name": "AD Source Review",
                      "description": "A review of our AD source.",
                      "deadline": "2020-12-25T06:00:00.456Z",
                      "type": "SOURCE_OWNER",
                      "status": "STAGED",
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false,
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                      },
                      "sourceOwnerCampaignInfo": {
                        "sourceIds": [
                          "2c918084707deba501709d45ce4e5569"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          }
        }
      }
    },
    "/campaigns/delete": {
      "post": {
        "operationId": "deleteCampaigns",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Deletes Campaigns",
        "description": "Deletes campaigns whose Ids are specified in the provided list of campaign Ids. Authorized callers must be an ORG_ADMIN or a CERT_ADMIN.",
        "requestBody": {
          "description": "The ids of the campaigns to delete.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "The ids of the campaigns to delete",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2c9180887335cee10173490db1776c26",
                      "2c9180836a712436016a7125a90c0021"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}": {
      "get": {
        "operationId": "getCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get a campaign",
        "description": "Retrieves information for an existing campaign using the campaign's ID. Authorized callers must be a reviewer for this campaign, an ORG_ADMIN, or a CERT_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign to be retrieved",
            "example": "2c91808571bcfcf80171c23e4b4221fc"
          }
        ],
        "responses": {
          "200": {
            "description": "A campaign object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slimcampaign"
                },
                "examples": {
                  "Manager": {
                    "description": "Reponse for request to get a Manager Certification Campaign.",
                    "value": {
                      "id": "2c918086719eec070171a7e3355a360a",
                      "name": "Manager Review",
                      "description": "A review of everyone's access by their manager.",
                      "deadline": "2020-12-25T06:00:00.123Z",
                      "type": "MANAGER",
                      "status": "ACTIVE",
                      "emailNotificationEnabled": false,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  },
                  "Source Owner": {
                    "description": "Reponse for request to get a Source Owner Certification Campaign.",
                    "value": {
                      "id": "2c918086719eec070171a7e3355a412b",
                      "name": "AD Source Review",
                      "description": "A review of our AD source.",
                      "deadline": "2020-12-25T06:00:00.123Z",
                      "type": "SOURCE_OWNER",
                      "status": "STAGED",
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      },
      "patch": {
        "operationId": "updateCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Update a Campaign",
        "description": "Allows updating individual fields on a campaign using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template being modified.",
            "example": "2c91808571bcfcf80171c23e4b4221fc"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nThe fields that can be patched differ based on the status of the campaign.\n\nIn the *STAGED* status, the following fields can be patched:\n* name\n* description\n* recommendationsEnabled\n* deadline\n* emailNotificationEnabled\n* autoRevokeAllowed\n\nIn the *ACTIVE* status, the following fields can be patched:\n* deadline\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "This field has been updated!"
                },
                {
                  "op": "copy",
                  "from": "/name",
                  "path": "/description"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the campaign's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slimcampaign"
                },
                "examples": {
                  "Manager": {
                    "description": "Response for request to patch a Manager Certification Campaign.",
                    "value": {
                      "id": "2c918086719eec070171a7e3355a360a",
                      "name": "Manager Review",
                      "description": "A review of everyone's access by their manager.",
                      "deadline": "2020-12-25T06:00:00.123Z",
                      "type": "MANAGER",
                      "status": "ACTIVE",
                      "emailNotificationEnabled": false,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  },
                  "Source Owner": {
                    "description": "Response for request to patch a Source Owner Certification Campaign.",
                    "value": {
                      "id": "2c918086719eec070171a7e3355a412b",
                      "name": "AD Source Review",
                      "description": "A review of our AD source.",
                      "deadline": "2020-12-25T06:00:00.123Z",
                      "type": "SOURCE_OWNER",
                      "status": "STAGED",
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/activate": {
      "post": {
        "operationId": "activateCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Activate a Campaign",
        "description": "Submits a job to activate the campaign with the given Id. The campaign must be staged.\nRequires roles of CERT_ADMIN and ORG_ADMIN",
        "requestBody": {
          "description": "Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller's timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timeZone": {
                    "type": "string",
                    "description": "The timezone must be in a valid ISO 8601 format. Timezones in ISO 8601 are represented as UTC (represented as 'Z') or as an offset from UTC. The offset format can be +/-hh:mm, +/-hhmm, or +/-hh.",
                    "default": "Z",
                    "example": "-05:00"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The campaign id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/complete": {
      "post": {
        "operationId": "completeCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Complete a Campaign",
        "description": "Completes a certification campaign only if it is past the due date. This is provided to admins so that they can complete a certification even if all items have not been completed.\nRequires roles of CERT_ADMIN and ORG_ADMIN",
        "requestBody": {
          "description": "Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction=REVOKE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "autoCompleteAction": {
                    "description": "Determines whether to auto-approve(APPROVE) or auto-revoke(REVOKE) upon campaign completion.",
                    "type": "string",
                    "enum": [
                      "APPROVE",
                      "REVOKE"
                    ],
                    "default": "APPROVE",
                    "example": "REVOKE"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The campaign id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/run-remediation-scan": {
      "post": {
        "operationId": "runCampaignRemediationScan",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Run Campaign Remediation Scan",
        "description": "Kicks off remediation scan task for a certification campaign.\nRequires roles of CERT_ADMIN and ORG_ADMIN",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "2c91808571bcfcf80171c23e4b4221fc"
            },
            "required": true,
            "description": "The ID of the campaign for which remediation scan is being run."
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/reassign": {
      "post": {
        "operationId": "adminReassign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Reassign Certifications",
        "description": "This API reassigns the specified certifications from one identity to another. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification campaign ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "certificationIds": {
                    "description": "List of certification IDs to reassign",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 250,
                    "example": [
                      "af3859464779471211bb8424a563abc1",
                      "af3859464779471211bb8424a563abc2",
                      "af3859464779471211bb8424a563abc3"
                    ]
                  },
                  "reassignTo": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The identity ID to which the review is being assigned.",
                        "example": "ef38f94347e94562b5bb8424a56397d8"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the ID provided.",
                        "enum": [
                          "IDENTITY"
                        ],
                        "example": "IDENTITY"
                      }
                    }
                  },
                  "reason": {
                    "type": "string",
                    "description": "Comment to explain why the certification was reassigned",
                    "example": "reassigned for some reason"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The reassign task that has been submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the certification task.",
                      "example": "2c918086719eec070171a7e3355a360a"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the certification task. More values may be added in the future.",
                      "enum": [
                        "REASSIGN",
                        "ADMIN_REASSIGN",
                        "COMPLETE_CERTIFICATION",
                        "FINISH_CERTIFICATION",
                        "COMPLETE_CAMPAIGN",
                        "ACTIVATE_CAMPAIGN",
                        "CAMPAIGN_CREATE",
                        "CAMPAIGN_DELETE"
                      ],
                      "example": "ADMIN_REASSIGN"
                    },
                    "targetType": {
                      "type": "string",
                      "description": "The type of item that is being operated on by this task whose ID is stored in the targetId field.",
                      "enum": [
                        "CERTIFICATION",
                        "CAMPAIGN"
                      ],
                      "example": "CAMPAIGN"
                    },
                    "targetId": {
                      "type": "string",
                      "description": "The ID of the item being operated on by this task.",
                      "example": "2c918086719eec070171a7e3355a834c"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the task.",
                      "enum": [
                        "QUEUED",
                        "IN_PROGRESS",
                        "SUCCESS",
                        "ERROR"
                      ]
                    },
                    "errors": {
                      "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/errorMessages/items",
                      "description": "A list of errors that have been encountered by the task."
                    },
                    "created": {
                      "type": "string",
                      "description": "The date and time on which this task was created.",
                      "format": "date-time",
                      "example": "2020-09-24T18:10:47.693Z"
                    }
                  }
                },
                "example": {
                  "id": "2c918086719eec070171a7e3355a360a",
                  "type": "ADMIN_REASSIGN",
                  "targetType": "CAMPAIGN",
                  "targetId": "2c918086719eec070171a7e3355a834c",
                  "status": "QUEUED",
                  "errors": [],
                  "created": "2020-09-24T18:10:47.693Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/reports": {
      "get": {
        "operationId": "getCampaignReports",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get Campaign Reports",
        "description": "Fetches all reports for a certification campaign by campaign ID.\nRequires roles of CERT_ADMIN, DASHBOARD, ORG_ADMIN and REPORT_ADMIN",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "2c91808571bcfcf80171c23e4b4221fc"
            },
            "required": true,
            "description": "The ID of the campaign for which reports are being fetched."
          }
        ],
        "responses": {
          "200": {
            "description": "Array of campaign report objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Campaign Report",
                    "required": [
                      "reportType"
                    ],
                    "allOf": [
                      {
                        "$ref": "#/paths/~1sod-violation-report/get/responses/200/content/application~1json/schema"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "reportType": {
                            "$ref": "#/paths/~1campaigns~1%7Bid%7D~1run-report~1%7Btype%7D/post/parameters/1/schema"
                          },
                          "lastRun": {
                            "type": "integer",
                            "readOnly": true,
                            "format": "int64",
                            "deprecated": true,
                            "description": "Date is stored in Unix Epoch time format (in milliseconds)"
                          },
                          "lastRunAt": {
                            "type": "string",
                            "readOnly": true,
                            "format": "date-time",
                            "description": "The most recent date and time this report was run"
                          }
                        }
                      }
                    ],
                    "example": {
                      "type": "REPORT_RESULT",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Campaign Composition Report",
                      "status": "SUCCESS",
                      "reportType": "CAMPAIGN_COMPOSITION_REPORT",
                      "lastRun": 1549051761000,
                      "lastRunAt": "2019-12-19T13:49:37.385Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/run-report/{type}": {
      "post": {
        "operationId": "runCampaignReport",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Run Campaign Report",
        "description": "Runs a report for a certification campaign.\nRequires the following roles: CERT_ADMIN, DASHBOARD, ORG_ADMIN and REPORT_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "2c91808571bcfcf80171c23e4b4221fc"
            },
            "required": true,
            "description": "The ID of the campaign for which report is being run."
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "CAMPAIGN_COMPOSITION_REPORT",
                "CAMPAIGN_REMEDIATION_STATUS_REPORT",
                "CAMPAIGN_STATUS_REPORT",
                "CERTIFICATION_SIGNOFF_REPORT"
              ]
            },
            "required": true,
            "description": "The type of the report to run."
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaigns/reports-configuration": {
      "get": {
        "operationId": "getCampaignReportsConfig",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get Campaign Reports Configuration",
        "description": "Fetches configuration for campaign reports. Currently it includes only one element - identity attributes defined as custom report columns.\nRequires roles of CERT_ADMIN and ORG_ADMIN.",
        "responses": {
          "200": {
            "description": "Campaign Report Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1campaigns~1reports-configuration/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setCampaignReportsConfig",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Set Campaign Reports Configuration",
        "description": "Overwrites configuration for campaign reports.\nRequires roles CERT_ADMIN and ORG_ADMIN.",
        "requestBody": {
          "required": true,
          "description": "Campaign Report Configuration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Campaign Reports Configuration",
                "properties": {
                  "identityAttributeColumns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "firstname",
                      "lastname"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The persisted Campaign Report Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1campaigns~1reports-configuration/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaign-templates": {
      "get": {
        "operationId": "listCampaignTemplates",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "List Campaign Templates",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name, created, modified**"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields: **name, id**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of campaign template objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1campaign-templates/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Create a Campaign Template",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "This template's name. Has no bearing on generated campaigns' names."
                  },
                  "description": {
                    "type": "string",
                    "description": "This template's description. Has no bearing on generated campaigns' descriptions."
                  },
                  "created": {
                    "type": "string",
                    "readOnly": true,
                    "format": "date-time"
                  },
                  "modified": {
                    "type": "string",
                    "readOnly": true,
                    "format": "date-time"
                  },
                  "scheduled": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "Indicates if this campaign template has been scheduled."
                  },
                  "ownerRef": {
                    "type": "object",
                    "description": "The owner of this template, and the owner of campaigns generated from this template via a schedule. This field is automatically populated at creation time with the current user.",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "IDENTITY"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  },
                  "deadlineDuration": {
                    "type": "string",
                    "description": "The time period during which the campaign should be completed, formatted as an ISO-8601 Duration. When this template generates a campaign, the campaign's deadline will be the current date plus this duration. For example, if generation occurred on 2020-01-01 and this field was \"P2W\" (two weeks), the resulting campaign's deadline would be 2020-01-15 (the current date plus 14 days)."
                  },
                  "campaign": {
                    "$ref": "#/components/schemas/fullcampaign"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "created",
                  "modified",
                  "campaign"
                ],
                "example": {
                  "id": "2c9079b270a266a60170a277bb960008",
                  "name": "Manager Campaign Template",
                  "description": "Template for the annual manager campaign.",
                  "created": "2020-03-05T22:44:00.364Z",
                  "modified": "2020-03-05T22:52:09.969Z",
                  "ownerRef": {
                    "type": "IDENTITY",
                    "id": "2c918086676d3e0601677611dbde220f",
                    "email": "mr.manager@example.com",
                    "name": "Mister Manager"
                  },
                  "deadlineDuration": "P2W",
                  "campaign": {
                    "name": "%Y Manager Campaign",
                    "description": "Everyone needs to be reviewed by their manager.",
                    "type": "MANAGER",
                    "emailNotificationEnabled": true,
                    "autoRevokeAllowed": false,
                    "recommendationsEnabled": false,
                    "filter": {
                      "type": "CAMPAIGN_FILTER",
                      "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                    }
                  }
                }
              },
              "examples": {
                "Manager": {
                  "description": "This creates a template that can be used to generate manager campaigns. The campaigns will have a due date that is two weeks after their creation date, and will be named \"{current date} Manager Review\" (e.g. \"2020-03-16 Manager Review\").",
                  "value": {
                    "name": "Manager Review",
                    "description": "A review of everyone's access by their manager.",
                    "deadlineDuration": "P2W",
                    "campaign": {
                      "name": "%F Manager Review",
                      "description": "Review everyone's access.",
                      "type": "MANAGER",
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                      },
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  }
                },
                "Source Owner": {
                  "description": "This creates a template that can be used to generate source owner campaigns. The campaigns will have a due date that is one month after their creation date, and will review one source.",
                  "value": {
                    "name": "AD Source Review",
                    "description": "A review of our AD source.",
                    "deadlineDuration": "P1M",
                    "campaign": {
                      "name": "%Y AD Source Review",
                      "description": "Review everyone's access.",
                      "type": "SOURCE_OWNER",
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                      },
                      "sourceOwnerCampaignInfo": {
                        "sourceIds": [
                          "2c918084707deba501709d45ce4e5569"
                        ]
                      },
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  }
                },
                "Search": {
                  "description": "This creates a template that can be used to generate search access campaigns. The campaigns will cover the \"reporter\" access item for across all identities.",
                  "value": {
                    "name": "Reporting Access Review",
                    "description": "A review of everyone's access to the reporting system.",
                    "deadlineDuration": "P2W",
                    "campaign": {
                      "name": "%Y Manager Review",
                      "description": "Review everyone's access to the reporting system.",
                      "type": "SEARCH",
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
                      },
                      "searchCampaignInfo": {
                        "type": "ACCESS",
                        "query": "@access(name: (\"reporter\"))",
                        "description": "Identities with reporting abilities"
                      },
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  }
                },
                "Role Composition": {
                  "description": "This creates a template that can be used to generate role composition campaigns. The campaigns will have a due date that is two weeks after their creation date, and will be named \"{current date} Role Composition Review\" (e.g. \"2020-03-16 Manager Review\").",
                  "value": {
                    "name": "Role Composition Review",
                    "description": "A review of every role's access items, by the specified reviewer.",
                    "deadlineDuration": "P2W",
                    "campaign": {
                      "name": "%F Role Composition Review",
                      "description": "Review all our roles.",
                      "type": "ROLE_COMPOSITION",
                      "roleCompositionCampaignInfo": {
                        "remediatorRef": {
                          "type": "IDENTITY",
                          "id": "2c9180876ab2c053016ab6f65dfd5aaa"
                        }
                      },
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1campaign-templates/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaign-templates/{id}": {
      "get": {
        "operationId": "getCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get a Campaign Template",
        "description": "Fetches a campaign template by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The desired campaign template's ID."
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the campaign matching the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1campaign-templates/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Update a Campaign Template",
        "description": "Allows updating individual fields on a campaign template using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template being modified.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* name\n* description\n* ownerRef\n* deadlineDuration\n* campaign (all fields that are allowed during create)\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Updated description!"
                },
                {
                  "op": "replace",
                  "path": "/campaign/filter/id",
                  "value": "ff80818155fe8c080155fe8d925b0316"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the template's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1campaign-templates/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Delete a Campaign Template",
        "description": "Deletes a campaign template by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template being deleted.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "The Source was successfully deleted."
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaign-templates/{id}/generate": {
      "post": {
        "operationId": "generateCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Generate a Campaign from Template",
        "description": "Generates a new campaign from a campaign template.\nThe campaign object contained in the template has special formatting applied to its name and description fields in order to determine the generated campaign's name/description. Placeholders in those fields are formatted with the current date and time upon generation.\nPlaceholders consist of a percent sign followed by a letter indicating what should be inserted; for example, \"%Y\" will insert the current year; a campaign template named \"Campaign for %y\" would generate a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).\nValid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).\nRequires roles ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template to use for generation."
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a campaign was successfully generated from this template, and returns a reference to the new campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the campaign.",
                      "example": "ef38f94347e94562b5bb8424a56397d8"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the campaign.",
                      "example": "Campaign Name"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "CAMPAIGN"
                      ]
                    },
                    "campaignType": {
                      "type": "string",
                      "enum": [
                        "MANAGER",
                        "SOURCE_OWNER",
                        "SEARCH"
                      ]
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the campaign set by the admin who created it.",
                      "nullable": true,
                      "example": "A description of the campaign"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/campaign-templates/{id}/schedule": {
      "get": {
        "operationId": "getCampaignTemplateSchedule",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Gets a Campaign Template's Schedule",
        "description": "Gets the schedule for a campaign template. Returns a 404 if there is no schedule set.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template whose schedule is being fetched."
          }
        ],
        "responses": {
          "200": {
            "description": "The current schedule for the campaign template. See the PUT endpoint documentation for more examples.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1campaign-templates~1%7Bid%7D~1schedule/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setCampaignTemplateSchedule",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Sets a Campaign Template's Schedule",
        "description": "Sets the schedule for a campaign template. If a schedule already exists, it will be overwritten with the new one.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template being scheduled."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Determines the overall schedule cadence. In general, all time period fields smaller than the chosen type can be configured. For example, a DAILY schedule can have 'hours' set, but not 'days'; a WEEKLY schedule can have both 'hours' and 'days' set.",
                    "enum": [
                      "DAILY",
                      "WEEKLY",
                      "MONTHLY",
                      "ANNUALLY",
                      "CALENDAR"
                    ]
                  },
                  "months": {
                    "type": "object",
                    "description": "Specifies which months of a schedule are active. Only valid for ANNUALLY schedule types. Examples:\n\nOn February and March:\n* type LIST\n* values \"2\", \"3\"\n\nEvery 3 months, starting in January (quarterly):\n* type LIST\n* values \"1\"\n* interval 3\n\nEvery two months between July and December:\n* type RANGE\n* values \"7\", \"12\"\n* interval 2\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "RANGE"
                        ]
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "interval": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "type",
                      "values"
                    ]
                  },
                  "days": {
                    "type": "object",
                    "description": "Specifies which day(s) a schedule is active for. This is required for all schedule types except DAILY.\nThe \"values\" field holds different data depending on the type of schedule:\n* WEEKLY: days of the week (1-7)\n* MONTHLY: days of the month (1-31, L, L-1...)\n* ANNUALLY: if the \"months\" field is also set: days of the month (1-31, L, L-1...); otherwise: ISO-8601 dates without year (\"--12-31\")\n* CALENDAR: ISO-8601 dates (\"2020-12-31\")\n\nNote that CALENDAR only supports the LIST type, and ANNUALLY does not support the RANGE type when provided\nwith ISO-8601 dates without year.\n\nExamples:\n\nOn Sundays:\n* type LIST\n* values \"1\"\n\nThe second to last day of the month:\n* type LIST\n* values \"L-1\"\n\nFrom the 20th to the last day of the month:\n* type RANGE\n* values \"20\", \"L\"\n\nEvery March 2nd:\n* type LIST\n* values \"--03-02\"\n\nOn March 2nd, 2021:\n* type: LIST\n* values \"2021-03-02\"\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "RANGE"
                        ]
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "interval": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "type",
                      "values"
                    ]
                  },
                  "hours": {
                    "type": "object",
                    "description": "Specifies which hour(s) a schedule is active for. Examples:\n\nEvery three hours starting from 8AM, inclusive:\n* type LIST\n* values \"8\"\n* interval 3\n\nDuring business hours:\n* type RANGE\n* values \"9\", \"5\"\n\nAt 5AM, noon, and 5PM:\n* type LIST\n* values \"5\", \"12\", \"17\"\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "RANGE"
                        ]
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "interval": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "type",
                      "values"
                    ]
                  },
                  "expiration": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Specifies the time after which this schedule will no longer occur."
                  },
                  "timeZoneId": {
                    "type": "string",
                    "description": "The time zone to use when running the schedule. For instance, if the schedule is a DAILY schedule that runs at 1AM, and this field is set to \"CST\", the schedule will run at 1AM CST."
                  }
                },
                "required": [
                  "type",
                  "hours"
                ],
                "example": {
                  "type": "MONTHLY",
                  "hours": {
                    "type": "LIST",
                    "values": [
                      "0"
                    ]
                  },
                  "days": {
                    "type": "LIST",
                    "values": [
                      "1"
                    ]
                  }
                }
              },
              "examples": {
                "Monthly": {
                  "description": "Runs on the 15th and last day of the month, at 5PM.",
                  "value": {
                    "type": "MONTHLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "17"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "15"
                      ]
                    }
                  }
                },
                "Once a year": {
                  "description": "Runs every January 1st at midnight.",
                  "value": {
                    "type": "ANNUALLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "0"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "--01-01"
                      ]
                    }
                  }
                },
                "Quarterly": {
                  "description": "Runs once a quarter (every 3 months) on the first of the month at 1AM.",
                  "value": {
                    "type": "ANNUALLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "months": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ],
                      "interval": 3
                    }
                  }
                },
                "Yearly on Specific Days": {
                  "description": "Runs on March 12 and December 5 at 1AM, every year.",
                  "value": {
                    "type": "ANNUALLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "--03-12",
                        "--12-05"
                      ]
                    }
                  }
                },
                "On a Specific Date": {
                  "description": "Runs at 1AM on February 18th, 2020",
                  "value": {
                    "type": "CALENDAR",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "2020-02-18"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteCampaignTemplateSchedule",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Deletes a Campaign Template's Schedule",
        "description": "Deletes the schedule for a campaign template. Returns a 404 if there is no schedule set.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the campaign template whose schedule is being deleted."
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/reassign-async": {
      "post": {
        "operationId": "reassignIdentityCertsAsync",
        "tags": [
          "Certifications"
        ],
        "summary": "Reassign Certifications Asynchronously",
        "description": "This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reassign": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of item or identity being reassigned.",
                          "example": "ef38f94347e94562b5bb8424a56397d8"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "TARGET_SUMMARY",
                            "ITEM",
                            "IDENTITY_SUMMARY"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "reassignTo": {
                    "type": "string",
                    "description": "The ID of the identity to which the certification is reassigned",
                    "example": "ef38f94347e94562b5bb8424a56397d8"
                  },
                  "reason": {
                    "type": "string",
                    "description": "The reason comment for why the reassign was made",
                    "example": "reassigned for some reason"
                  }
                },
                "required": [
                  "reassign",
                  "reassignTo",
                  "reason"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A certification task object for the reassignment which can be queried for status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The task id",
                      "example": "abcd-ef12-3456"
                    },
                    "certificationId": {
                      "type": "string",
                      "description": "The certification id",
                      "example": "ef38f94347e94562b5bb8424a56397d8"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "REASSIGN"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "QUEUED",
                        "IN_PROGRESS",
                        "SUCCESS",
                        "ERROR"
                      ]
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Any errors executing the task (Optional).",
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/tasks/{taskId}": {
      "get": {
        "operationId": "getIdentityCertificationTaskStatus",
        "tags": [
          "Certifications"
        ],
        "summary": "Certification Task Status",
        "description": "This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID"
          },
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A certification task object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1certifications~1%7Bid%7D~1reassign-async/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/tasks-pending": {
      "get": {
        "operationId": "getIdentityCertificationPendingTasks",
        "tags": [
          "Certifications"
        ],
        "summary": "Pending Certification Tasks",
        "description": "This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity campaign certification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of pending (`QUEUED` or `IN_PROGRESS`) certification task objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1certifications~1%7Bid%7D~1reassign-async/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/certifications/{certificationId}/access-review-items/{itemId}/permissions": {
      "get": {
        "operationId": "getIdentityCertificationItemPermissions",
        "tags": [
          "Certifications"
        ],
        "summary": "Permissions for Entitlement Certification Item",
        "description": "This API returns the permissions associated with an entitlement certification item based on the certification item's ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSupported fields and primitive operators:\n\n**target**: *eq, sw*\n\n**rights**: *ca*\n\nSupported composite operators:\n\n*and, or*\n\nAll field values (second filter operands) are case-insensitive for this API.\n\nOnly a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.\nFor example,\n\nThe following is valid:\n*?filters=rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22*\n\nThe following is invalid:\n*?filters=rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)*"
          },
          {
            "in": "path",
            "name": "certificationId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification item ID",
            "example": "2c91808671bcbab40171bd945d961227"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of permissions associated with the given itemId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Simplified DTO for the Permission objects stored in SailPoint's database. The data is aggregated from customer systems and is free-form, so its appearance can vary largely between different clients/customers.",
                    "properties": {
                      "rights": {
                        "type": "array",
                        "description": "All the rights (e.g. actions) that this permission allows on the target",
                        "readOnly": true,
                        "items": {
                          "type": "string",
                          "example": "SELECT"
                        }
                      },
                      "target": {
                        "type": "string",
                        "description": "The target the permission would grants rights on.",
                        "readOnly": true,
                        "example": "SYS.GV_$TRANSACTION"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/reviewers": {
      "get": {
        "operationId": "listReviewers",
        "tags": [
          "Certifications"
        ],
        "summary": "List of Reviewers for the certification",
        "description": "This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators (Filtering is done by reviewer's fields):\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**email**: *eq, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name, email**"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of reviewers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type can only be IDENTITY. This is read-only",
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "Identity id.",
                        "example": "5168015d32f890ca15812c9180835d2e"
                      },
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of identity. This is read-only",
                        "example": "Alison Ferguso"
                      },
                      "email": {
                        "type": "string",
                        "description": "Email address of identity. This is read-only",
                        "example": "alison.ferguso@identitysoon.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/connector-rules": {
      "get": {
        "tags": [
          "Connector Rule Management"
        ],
        "operationId": "getConnectorRuleList",
        "summary": "List Connector Rules",
        "description": "Returns the list of connector rules.\nA token with ORG_ADMIN authority is required to call this API.",
        "responses": {
          "200": {
            "description": "A list of connector rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1connector-rules/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:connector-rule:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Connector Rule Management"
        ],
        "operationId": "createConnectorRule",
        "summary": "Create Connector Rule",
        "description": "Creates a new connector rule.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "The connector rule to create",
          "content": {
            "application/json": {
              "schema": {
                "description": "ConnectorRuleCreateRequest",
                "type": "object",
                "required": [
                  "name",
                  "type",
                  "sourceCode"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the name of the rule",
                    "example": "WebServiceBeforeOperationRule"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description of the rule's purpose",
                    "example": "This rule does that"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "BuildMap",
                      "ConnectorAfterCreate",
                      "ConnectorAfterDelete",
                      "ConnectorAfterModify",
                      "ConnectorBeforeCreate",
                      "ConnectorBeforeDelete",
                      "ConnectorBeforeModify",
                      "JDBCBuildMap",
                      "JDBCOperationProvisioning",
                      "JDBCProvision",
                      "PeopleSoftHRMSBuildMap",
                      "PeopleSoftHRMSOperationProvisioning",
                      "PeopleSoftHRMSProvision",
                      "RACFPermissionCustomization",
                      "SAPBuildMap",
                      "SapHrManagerRule",
                      "SapHrOperationProvisioning",
                      "SapHrProvision",
                      "SuccessFactorsOperationProvisioning",
                      "WebServiceAfterOperationRule",
                      "WebServiceBeforeOperationRule"
                    ],
                    "description": "the type of rule",
                    "example": "BuildMap"
                  },
                  "signature": {
                    "description": "The rule's function signature. Describes the rule's input arguments and output (if any)",
                    "type": "object",
                    "required": [
                      "input"
                    ],
                    "properties": {
                      "input": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1connector-rules/post/requestBody/content/application~1json/schema/properties/signature/properties/output"
                        }
                      },
                      "output": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "the name of the argument",
                            "example": "firstName"
                          },
                          "description": {
                            "type": "string",
                            "description": "the description of the argument",
                            "example": "the first name of the identity"
                          },
                          "type": {
                            "type": "string",
                            "description": "the programmatic type of the argument",
                            "example": "String"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    }
                  },
                  "sourceCode": {
                    "$ref": "#/paths/~1connector-rules~1validate/post/requestBody/content/application~1json/schema"
                  },
                  "attributes": {
                    "type": "object",
                    "description": "a map of string to objects"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created connector rule",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ConnectorRuleResponse",
                  "allOf": [
                    {
                      "$ref": "#/paths/~1connector-rules/post/requestBody/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "created"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "the ID of the rule",
                          "example": "8113d48c0b914f17b4c6072d4dcb9dfe"
                        },
                        "created": {
                          "type": "string",
                          "description": "an ISO 8601 UTC timestamp when this rule was created",
                          "example": "021-07-22T15:59:23Z"
                        },
                        "modified": {
                          "type": "string",
                          "description": "an ISO 8601 UTC timestamp when this rule was last modified",
                          "example": "021-07-22T15:59:23Z"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:connector-rule:write"
            ]
          }
        ]
      }
    },
    "/connector-rules/{id}": {
      "get": {
        "tags": [
          "Connector Rule Management"
        ],
        "summary": "Connector-Rule by ID",
        "operationId": "getConnectorRule",
        "description": "Returns the connector rule specified by ID.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connector rule to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connector rule with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1connector-rules/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:connector-rule:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Connector Rule Management"
        ],
        "summary": "Update a Connector Rule",
        "description": "Updates an existing connector rule with the one provided in the request body. Note that the fields 'id', 'name', and 'type' are immutable.\nA token with ORG_ADMIN authority is required to call this API.",
        "operationId": "updateConnectorRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connector rule to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The connector rule with updated data",
          "content": {
            "application/json": {
              "schema": {
                "description": "ConnectorRuleUpdateRequest",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "the ID of the rule to update",
                        "example": "8113d48c0b914f17b4c6072d4dcb9dfe"
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1connector-rules/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated connector rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1connector-rules/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:connector-rule:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Connector Rule Management"
        ],
        "summary": "Delete a Connector-Rule",
        "description": "Deletes the connector rule specified by the given ID.\nA token with ORG_ADMIN authority is required to call this API.",
        "operationId": "deleteConnectorRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connector rule to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:connector-rule:write"
            ]
          }
        ]
      }
    },
    "/connector-rules/validate": {
      "post": {
        "tags": [
          "Connector Rule Management"
        ],
        "operationId": "validateConnectorRule",
        "summary": "Validate Connector Rule",
        "description": "Returns a list of issues within the code to fix, if any.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "The code to validate",
          "content": {
            "application/json": {
              "schema": {
                "description": "SourceCode",
                "type": "object",
                "required": [
                  "version",
                  "script"
                ],
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "the version of the code",
                    "example": "1.0"
                  },
                  "script": {
                    "type": "string",
                    "description": "The code",
                    "example": "return \"Mr. \" + firstName;"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The status of the code's eligibility as a connector rule",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ConnectorRuleValidationResponse",
                  "type": "object",
                  "required": [
                    "state",
                    "details"
                  ],
                  "properties": {
                    "state": {
                      "type": "string",
                      "enum": [
                        "OK",
                        "ERROR"
                      ],
                      "example": "ERROR"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "description": "CodeErrorDetail",
                        "type": "object",
                        "required": [
                          "line",
                          "column",
                          "message"
                        ],
                        "properties": {
                          "line": {
                            "type": "integer",
                            "description": "The line number where the issue occurred",
                            "example": 2
                          },
                          "column": {
                            "type": "integer",
                            "description": "the column number where the issue occurred",
                            "example": 5
                          },
                          "messsage": {
                            "type": "string",
                            "description": "a description of the issue in the code",
                            "example": "Remove reference to .decrypt("
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:connector-rule:read"
            ]
          }
        ]
      }
    },
    "/connectors": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "operationId": "getConnectorList",
        "summary": "Gets connector list",
        "description": "Fetches list of connectors that have 'RELEASED' status using filtering and pagination.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*\n\n**type**: *eq*\n\n**directConnect**: *eq*"
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "boolean"
            },
            "description": "If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A Connector Dto object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The connector name",
                      "example": "name"
                    },
                    "type": {
                      "type": "string",
                      "description": "The connector type",
                      "example": "ServiceNow"
                    },
                    "scriptName": {
                      "type": "string",
                      "description": "The connector script name",
                      "example": "servicenow"
                    },
                    "directConnect": {
                      "type": "boolean",
                      "description": "true if the source is a direct connect source",
                      "example": true
                    },
                    "connectorMetadata": {
                      "type": "object",
                      "description": "Object containing metadata pertinent to the UI to be used",
                      "example": {
                        "supportedUI": "EXTJS",
                        "platform": "ccg"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The connector status",
                      "example": "RELEASED"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/custom-password-instructions": {
      "post": {
        "operationId": "createCustomPasswordInstructions",
        "tags": [
          "Custom Password Instructions"
        ],
        "summary": "Create Custom Password Instructions",
        "description": "This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pageId": {
                    "type": "string",
                    "description": "The page ID that represents the page for forget user name, reset password and unlock account flow.",
                    "enum": [
                      "change-password:enter-password",
                      "change-password:finish",
                      "flow-selection:select",
                      "forget-username:user-email",
                      "mfa:enter-code",
                      "mfa:enter-kba",
                      "mfa:select",
                      "reset-password:enter-password",
                      "reset-password:enter-username",
                      "reset-password:finish",
                      "unlock-account:enter-username",
                      "unlock-account:finish"
                    ]
                  },
                  "pageContent": {
                    "type": "string",
                    "description": "The custom instructions for the specified page. Allow basic HTML format and maximum length is 1000 characters. The custom instructions will be sanitized to avoid attacks. If the customization text includes a link, like <A HREF=\\\"URL\\\">...</A> clicking on this will open the link on the current browser page. If you want your link to be redirected to a different page, please redirect it to \"_blank\" like this: <a href=\\\"URL\" target=\\\"_blank\\\" >link</a>. This will open a new tab when the link is clicked. Notice we're only supporting _blank as the redirection target."
                  },
                  "locale": {
                    "type": "string",
                    "example": "en",
                    "description": "The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\"."
                  }
                }
              },
              "example": {
                "pageId": "reset-password:enter-password",
                "pageContent": "See company password policies for details by clicking <a href=\"url\">here</a>"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the custom password instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1custom-password-instructions/post/requestBody/content/application~1json/schema"
                },
                "example": {
                  "pageId": "reset-password:enter-password",
                  "locale": "default",
                  "pageContent": "See company password policies for details by clicking <a href=\"url\">here</a>"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/custom-password-instructions/{pageId}": {
      "get": {
        "operationId": "getCustomPasswordInstructions",
        "tags": [
          "Custom Password Instructions"
        ],
        "summary": "Get Custom Password Instructions by Page ID",
        "description": "This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string",
              "enum": [
                "change-password:enter-password",
                "change-password:finish",
                "flow-selection:select",
                "forget-username:user-email",
                "mfa:enter-code",
                "mfa:enter-kba",
                "mfa:select",
                "reset-password:enter-password",
                "reset-password:enter-username",
                "reset-password:finish",
                "unlock-account:enter-username",
                "unlock-account:finish"
              ]
            },
            "required": true,
            "description": "The page ID of custom password instructions to query.",
            "example": "mfa:select"
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "description": "The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\"."
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the custom password instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1custom-password-instructions/post/requestBody/content/application~1json/schema"
                },
                "example": {
                  "pageId": "reset-password:enter-password",
                  "locale": "default",
                  "pageContent": "See company password policies for details by clicking <a href=\"url\">here</a>"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteCustomPasswordInstructions",
        "tags": [
          "Custom Password Instructions"
        ],
        "summary": "Delete Custom Password Instructions by page ID",
        "description": "This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string",
              "enum": [
                "change-password:enter-password",
                "change-password:finish",
                "flow-selection:select",
                "forget-username:user-email",
                "mfa:enter-code",
                "mfa:enter-kba",
                "mfa:select",
                "reset-password:enter-password",
                "reset-password:enter-username",
                "reset-password:finish",
                "unlock-account:enter-username",
                "unlock-account:finish"
              ]
            },
            "required": true,
            "description": "The page ID of custom password instructions to delete.",
            "example": "mfa:select"
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "description": "The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\"."
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "operationId": "listEntitlements",
        "tags": [
          "Entitlements"
        ],
        "summary": "Gets a list of entitlements.",
        "description": "This API returns a list of entitlements.\n\nThis API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).\n\nAny authenticated token can call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "account-id",
            "schema": {
              "type": "string"
            },
            "description": "The account ID. If specified, returns only entitlements associated with the given Account. Can not be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "required": false
          },
          {
            "in": "query",
            "name": "segmented-for-identity",
            "schema": {
              "type": "string"
            },
            "description": "If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user's Identity ID.\nCan not be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user's Identity.",
            "example": "me",
            "required": false
          },
          {
            "in": "query",
            "name": "for-segment-ids",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs.\nCan not be specified with the **account-id** or **segmented-for-identity** param(s).",
            "example": "041727d4-7d95-4779-b891-93cf41e98249,a378c9fa-bae5-494c-804e-a1e30f69f649",
            "required": false
          },
          {
            "in": "query",
            "name": "include-unsegmented",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented=false** results in an error.",
            "example": true,
            "required": false
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nSorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, sw*\n\n**type**: *eq, in*\n\n**attribute**: *eq, in*\n\n**value**: *eq, in, sw*\n\n**source.id**: *eq, in*\n\n**requestable**: *eq*",
            "example": "attribute eq \"memberOf\"",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            },
            "description": "This endpoint supports cursor-based pagination as an alternative to pagination using **limit** and **offset**. Use of cursors is optional but may deliver significantly better performance when paginating over large result sets, particularly when sorting is involved.\n\nTo obtain an initial cursor value, the initial request must be made with **offset=0** and **count=false**, or by omitting those parameters. Other query parameters may be specified on the initial request, to specify filtering and sorting for example. The response to this initial request will provide a cursor value in the **Slpt-Cursor** response header. Thereafter, passing in the last returned value of **Slpt-Cursor** as the value of the **cursor** parameter on the following request will return the next page of results, and so on. The end of the result set is signalled when a request returns without providing a value for **Slpt-Cursor**.\n\nThe **cursor** param is generally incompatible with other parameters; the second and subsequent requests should only pass that parameter and no others. A 400 Bad Request will be returned if any incompatible parameter values are passed along with the **cursor**.\n\nCursors expire after 15 minutes; a 400 Bad Request is returned if an expired value is provided for **cursor**.",
            "example": "9602877a-1c11-4c02-a399-7273ea2158da",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1entitlements/patch/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchEntitlement",
        "tags": [
          "Entitlements"
        ],
        "summary": "Patch a specified Entitlement",
        "description": "This API updates an existing Entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\n\nThe following fields are patchable: **requestable**, **privileged**, **segments**\n\nA token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                  "required": [
                    "op",
                    "path"
                  ],
                  "properties": {
                    "op": {
                      "type": "string",
                      "description": "The operation to be performed",
                      "enum": [
                        "add",
                        "remove",
                        "replace",
                        "move",
                        "copy",
                        "test"
                      ],
                      "example": "replace"
                    },
                    "path": {
                      "type": "string",
                      "description": "A string JSON Pointer representing the target path to an element to be affected by the operation",
                      "example": "/description"
                    },
                    "value": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "object"
                              }
                            ]
                          }
                        }
                      ],
                      "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
                      "example": "New description"
                    }
                  }
                }
              },
              "examples": {
                "Make an Entitlement Requestable and Privileged in One Call": {
                  "description": "This example shows how multiple fields may be updated with a single patch call.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/requestable",
                      "value": true
                    },
                    {
                      "op": "replace",
                      "path": "/privileged",
                      "value": true
                    }
                  ]
                },
                "Assign an Entitlement to a Segment": {
                  "description": "This example illustrates the use of patch to assign an Entitlement to a Segment by adding the Segment's ID to the Entitlement's segments array.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/segments/-",
                      "value": "f7b1b8a3-5fed-4fd4-ad29-82014e137e19"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the Entitlement as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The entitlement id",
                      "example": "2c91808874ff91550175097daaec161c"
                    },
                    "name": {
                      "type": "string",
                      "description": "The entitlement name",
                      "example": "LauncherTestGroup2"
                    },
                    "attribute": {
                      "type": "string",
                      "description": "The entitlement attribute name",
                      "example": "memberOf"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the entitlement",
                      "example": "CN=LauncherTestGroup2,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local"
                    },
                    "sourceSchemaObjectType": {
                      "type": "string",
                      "description": "The object type of the entitlement from the source schema",
                      "example": "group"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the entitlement",
                      "example": "CN=LauncherTestGroup2,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local"
                    },
                    "privileged": {
                      "type": "boolean",
                      "description": "True if the entitlement is privileged",
                      "example": true
                    },
                    "cloudGoverned": {
                      "type": "boolean",
                      "description": "True if the entitlement is cloud governed",
                      "example": true
                    },
                    "created": {
                      "type": "string",
                      "description": "Time when the entitlement was created",
                      "format": "date-time",
                      "example": "2020-10-08T18:33:52.029Z"
                    },
                    "modified": {
                      "type": "string",
                      "description": "Time when the entitlement was last modified",
                      "format": "date-time",
                      "example": "2020-10-08T18:33:52.029Z"
                    },
                    "source": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The source ID",
                          "example": "2c9180827ca885d7017ca8ce28a000eb"
                        },
                        "type": {
                          "type": "string",
                          "description": "The source type, will always be \"SOURCE\"",
                          "example": "SOURCE"
                        },
                        "name": {
                          "type": "string",
                          "description": "The source name",
                          "example": "ODS-AD-Source"
                        }
                      },
                      "example": [
                        {
                          "type": "SOURCE",
                          "id": "2c9180835d191a86015d28455b4b232a",
                          "name": "HR Active Directory"
                        }
                      ]
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A map of free-form key-value pairs from the source system",
                      "example": {
                        "fieldName": "fieldValue"
                      },
                      "additionalProperties": true
                    },
                    "segments": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "description": "List of IDs of segments, if any, to which this Entitlement is assigned.",
                      "example": [
                        "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
                        "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
                      ]
                    },
                    "directPermissions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1certifications~1%7BcertificationId%7D~1access-review-items~1%7BitemId%7D~1permissions/get/responses/200/content/application~1json/schema/items"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/parents": {
      "get": {
        "operationId": "listEntitlementParents",
        "tags": [
          "Entitlements"
        ],
        "summary": "List of entitlements parents",
        "description": "This API returns a list of all parent entitlements of a given entitlement.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entitlement Id",
            "example": "2c91808c74ff913f0175097daa9d59cd"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements parents from an entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1entitlements/patch/responses/200/content/application~1json/schema"
                  }
                },
                "example": [
                  {
                    "sourceSchemaObjectType": "group",
                    "attribute": "memberOf",
                    "attributes": {
                      "GroupType": "Security",
                      "sAMAccountName": "LauncherTestGroup1",
                      "GroupScope": "Global",
                      "objectguid": "{01a6e70b-9705-4155-a5c6-492a9bcc8c64}",
                      "objectSid": "S-1-5-21-3585869415-1648031554-2909195034-1633",
                      "cn": "LauncherTestGroup1",
                      "msDS-PrincipalName": "AUTOMATIONAD\\LauncherTestGroup1"
                    },
                    "value": "CN=LauncherTestGroup1,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                    "description": "some description",
                    "privileged": false,
                    "cloudGoverned": false,
                    "source": {
                      "type": "SOURCE",
                      "id": "2c9180877504c40e0175097d5ce707c8",
                      "name": "EndToEnd-ADSource"
                    },
                    "id": "2c91808c74ff913f0175097daa9d59cd",
                    "name": "LauncherTestGroup1",
                    "created": "2020-10-08T18:33:52.029Z",
                    "modified": "2021-01-19T16:53:35.707Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/children": {
      "get": {
        "operationId": "listEntitlementchildren",
        "tags": [
          "Entitlements"
        ],
        "summary": "List of entitlements children",
        "description": "This API returns a list of all child entitlements of a given entitlement.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entitlement Id",
            "example": "2c91808874ff91550175097daaec161c"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements children from an entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1entitlements/patch/responses/200/content/application~1json/schema"
                  }
                },
                "example": [
                  {
                    "sourceSchemaObjectType": "group",
                    "attribute": "memberOf",
                    "attributes": {
                      "GroupType": "Security",
                      "sAMAccountName": "LauncherTestGroup1",
                      "GroupScope": "Global",
                      "objectguid": "{01a6e70b-9705-4155-a5c6-492a9bcc8c64}",
                      "objectSid": "S-1-5-21-3585869415-1648031554-2909195034-1633",
                      "cn": "LauncherTestGroup1",
                      "msDS-PrincipalName": "AUTOMATIONAD\\LauncherTestGroup1"
                    },
                    "value": "CN=LauncherTestGroup1,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                    "description": "some description",
                    "privileged": false,
                    "cloudGoverned": false,
                    "source": {
                      "type": "SOURCE",
                      "id": "2c9180877504c40e0175097d5ce707c8",
                      "name": "EndToEnd-ADSource"
                    },
                    "id": "2c91808c74ff913f0175097daa9d59cd",
                    "name": "LauncherTestGroup1",
                    "created": "2020-10-08T18:33:52.029Z",
                    "modified": "2021-01-19T16:53:35.707Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/entitlements/bulk-update": {
      "post": {
        "operationId": "entitlementsBulkUpdate",
        "tags": [
          "Entitlements"
        ],
        "summary": "Bulk update an entitlement list",
        "description": "This API applies an update to every entitlement of the list.\n\nThe number of entitlements to update is limited to 50 items maximum.\n\nThe JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.<br/> allowed operations :<br/> **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }** <br/> **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }** <br/>\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entitlementIds": {
                    "type": "array",
                    "description": "List of entitlement ids to update",
                    "maxItems": 50,
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2c91808a7624751a01762f19d665220d",
                      "2c91808a7624751a01762f19d67c220e",
                      "2c91808a7624751a01762f19d692220f"
                    ]
                  },
                  "jsonPatch": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies~1%7BusageType%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                    },
                    "example": [
                      {
                        "op": "replace",
                        "path": "/privileged",
                        "value": false
                      },
                      {
                        "op": "replace",
                        "path": "/requestable",
                        "value": false
                      }
                    ]
                  }
                },
                "example": {
                  "entitlementIds": [
                    "2c91808a7624751a01762f19d665220d",
                    "2c91808a7624751a01762f19d67c220e",
                    "2c91808a7624751a01762f19d692220f"
                  ],
                  "jsonPatch": [
                    {
                      "op": "replace",
                      "path": "/privileged",
                      "value": false
                    },
                    {
                      "op": "replace",
                      "path": "/requestable",
                      "value": false
                    }
                  ]
                },
                "required": [
                  "entitlementIds",
                  "jsonPatch"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/generate-password-reset-token/digit": {
      "post": {
        "operationId": "generateDigitToken",
        "tags": [
          "Password Management"
        ],
        "summary": "Generate a digit token",
        "description": "This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "The uid of the user requested for digit token",
                    "example": "Abby.Smith"
                  },
                  "length": {
                    "type": "integer",
                    "description": "The length of digit token. It should be from 6 to 18, inclusive. The default value is 6.",
                    "example": 8
                  },
                  "durationMinutes": {
                    "type": "integer",
                    "description": "The time to live for the digit token in minutes. The default value is 5 minutes.",
                    "example": 5
                  }
                }
              },
              "example": {
                "userId": "Abby.Smith",
                "length": 8,
                "durationMinutes": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The digit token for password management.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "digitToken": {
                      "type": "string",
                      "description": "The digit token for password management",
                      "example": "09087713"
                    },
                    "requestId": {
                      "type": "string",
                      "description": "The reference ID of the digit token generation request",
                      "example": "e1267ecd-fcd9-4c73-9c55-12555efad136"
                    }
                  }
                },
                "example": {
                  "digitToken": "09087713",
                  "requestId": "e1267ecd-fcd9-4c73-9c55-12555efad136"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities": {
      "get": {
        "operationId": "listIdentities",
        "summary": "Lists all the identities",
        "description": "This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of 'idn:identity-history:read' ",
        "tags": [
          "Identity History"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "starts-with-query",
            "schema": {
              "type": "string"
            },
            "description": "This param is used for starts-with search for first, last and display name of the identity",
            "example": "Ada"
          },
          {
            "in": "query",
            "name": "is-deleted",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if we want to only list down deleted identities or not.",
            "example": true
          },
          {
            "in": "query",
            "name": "is-active",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if we want to only list active or inactive identities.",
            "example": true
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities for the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "the identity ID",
                        "example": "bc693f07e7b645539626c25954c58554"
                      },
                      "displayName": {
                        "type": "string",
                        "description": "the display name of the identity",
                        "example": "Adam Zampa"
                      },
                      "firstName": {
                        "type": "string",
                        "description": "the first name of the identity",
                        "example": "Adam"
                      },
                      "lastName": {
                        "type": "string",
                        "description": "the last name of the identity",
                        "example": "Zampa"
                      },
                      "active": {
                        "type": "boolean",
                        "description": "indicates if an identity is active or not",
                        "example": true
                      },
                      "deletedDate": {
                        "type": "string",
                        "description": "the date when the identity was deleted",
                        "example": "2007-03-01T13:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/historical-identities/{id}": {
      "get": {
        "operationId": "getIdentity",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets the most recent snapshot of a specific identity",
        "description": "This method retrieves a specified identity Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "The identity object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "the identity ID",
                      "example": "bc693f07e7b645539626c25954c58554"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "the display name of the identity",
                      "example": "Adam Zampa"
                    },
                    "snapshot": {
                      "type": "string",
                      "description": "the date when the identity record was created",
                      "example": "2007-03-01T13:00:00.000Z"
                    },
                    "deletedDate": {
                      "type": "string",
                      "description": "the date when the identity was deleted",
                      "example": "2007-03-01T13:00:00.000Z"
                    },
                    "accessItemCount": {
                      "type": "object",
                      "description": "A map containing the count of each access item",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A map containing the identity attributes",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "id": "2c9079b270a266a60170a2779fcb0007",
                    "displayName": "Lahoma Wuckert",
                    "deletedDate": null,
                    "snapshot": "2007-03-01T13:00:00.000Z",
                    "attributes": {
                      "jobTitle": "HR Manager",
                      "location": "NYC",
                      "firstname": "Lahoma",
                      "lastname": "Wuckert",
                      "department": "HR"
                    },
                    "accessItemCount": {
                      "role": 2,
                      "accessProfile": 2,
                      "entitlement": 28,
                      "account": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/access-items": {
      "get": {
        "operationId": "listIdentityAccessItems",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets a list of access items for the identity filtered by item type",
        "description": "This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of access item for the identity. If not provided, it defaults to account",
            "example": "account"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of access items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "accessType": {
                            "type": "string",
                            "description": "the access item type. accessProfile in this case"
                          },
                          "id": {
                            "type": "string",
                            "description": "the access item id"
                          },
                          "name": {
                            "type": "string",
                            "description": "the access profile name"
                          },
                          "sourceName": {
                            "type": "string",
                            "description": "the name of the source"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "the id of the source"
                          },
                          "description": {
                            "type": "string",
                            "description": "the description for the access profile"
                          },
                          "displayName": {
                            "type": "string",
                            "description": "the display name of the identity"
                          },
                          "entitlementCount": {
                            "type": "string",
                            "description": "the number of entitlements the access profile will create"
                          },
                          "appDisplayName": {
                            "type": "string",
                            "description": "the name of app"
                          }
                        },
                        "example": {
                          "accessType": "accessProfile",
                          "id": "2c918087763e69d901763e72e97f006f",
                          "name": "sample",
                          "sourceName": "DataScienceDataset",
                          "sourceId": "2793o32dwd",
                          "description": "AccessProfile - Workday/Citizenship access",
                          "displayName": "Dr. Arden Rogahn MD",
                          "entitlementCount": 12,
                          "appDisplayName": "AppName"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "accessType": {
                            "type": "string",
                            "description": "the access item type. account in this case"
                          },
                          "id": {
                            "type": "string",
                            "description": "the access item id"
                          },
                          "nativeIdentity": {
                            "type": "string",
                            "description": "the native identifier used to uniquely identify an acccount"
                          },
                          "sourceName": {
                            "type": "string",
                            "description": "the name of the source"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "the id of the source"
                          },
                          "entitlementCount": {
                            "type": "string",
                            "description": "the number of entitlements the account will create"
                          },
                          "displayName": {
                            "type": "string",
                            "description": "the display name of the identity"
                          }
                        },
                        "example": {
                          "accessType": "account",
                          "id": "2c918087763e69d901763e72e97f006f",
                          "nativeIdentity": "dr.arden.ogahn.d",
                          "sourceName": "DataScienceDataset",
                          "sourceId": "2793o32dwd",
                          "entitlementCount": 12,
                          "displayName": "Dr. Arden Rogahn MD"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "accessType": {
                            "type": "string",
                            "description": "the access item type. entitlement in this case"
                          },
                          "id": {
                            "type": "string",
                            "description": "the access item id"
                          },
                          "displayName": {
                            "type": "string",
                            "description": "the access profile display name"
                          },
                          "sourceName": {
                            "type": "string",
                            "description": "the associated source name if it exists"
                          }
                        },
                        "example": {
                          "accessType": "app",
                          "id": "2c918087763e69d901763e72e97f006f",
                          "name": "appName"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "accessType": {
                            "type": "string",
                            "description": "the access item type. entitlement in this case"
                          },
                          "id": {
                            "type": "string",
                            "description": "the access item id"
                          },
                          "attribute": {
                            "type": "string",
                            "description": "the entitlement attribute"
                          },
                          "value": {
                            "type": "string",
                            "description": "the associated value"
                          },
                          "entitlementType": {
                            "type": "string",
                            "description": "the type of entitlement"
                          },
                          "sourceName": {
                            "type": "string",
                            "description": "the name of the source"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "the id of the source"
                          },
                          "description": {
                            "type": "string",
                            "description": "the description for the entitlment"
                          },
                          "displayName": {
                            "type": "string",
                            "description": "the display name of the identity"
                          }
                        },
                        "example": {
                          "accessType": "entitlement",
                          "id": "2c918087763e69d901763e72e97f006f",
                          "attribute": "groups",
                          "value": "Upward mobility access",
                          "entitlementType": "entitlement",
                          "sourceName": "DataScienceDataset",
                          "sourceId": "2793o32dwd",
                          "description": "Entitlement - Workday/Citizenship access",
                          "displayName": "Dr. Arden Rogahn MD"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "accessType": {
                            "type": "string",
                            "description": "the access item type. entitlement in this case"
                          },
                          "id": {
                            "type": "string",
                            "description": "the access item id"
                          },
                          "displayName": {
                            "type": "string",
                            "description": "the role display name"
                          },
                          "description": {
                            "type": "string",
                            "description": "the description for the role"
                          },
                          "sourceName": {
                            "type": "string",
                            "description": "the associated source name if it exists"
                          }
                        },
                        "example": {
                          "accessType": "role",
                          "id": "2c918087763e69d901763e72e97f006f",
                          "name": "sample",
                          "description": "Role - Workday/Citizenship access"
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "Access Profile": {
                    "description": "An access profile response",
                    "value": [
                      {
                        "accessType": "accessProfile",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "AccessProfile - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD",
                        "entitlementCount": 12,
                        "appDisplayName": "AppName"
                      }
                    ]
                  },
                  "Account": {
                    "description": "An account response",
                    "value": [
                      {
                        "accessType": "account",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "nativeIdentity": "dr.arden.ogahn.d",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "entitlementCount": 12,
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "App": {
                    "description": "An app response",
                    "value": [
                      {
                        "accessType": "app",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "appName"
                      }
                    ]
                  },
                  "Entitlement": {
                    "description": "An entitlement event",
                    "value": [
                      {
                        "accessType": "entitlement",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "attribute": "groups",
                        "value": "Upward mobility access",
                        "type": "group",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "Entitlement - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "Role": {
                    "description": "A role response",
                    "value": [
                      {
                        "accessType": "role",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "description": "Role - Workday/Citizenship access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshots": {
      "get": {
        "operationId": "listIdentitySnapshots",
        "tags": [
          "Identity History"
        ],
        "summary": "Lists all the snapshots for the identity",
        "description": "This method retrieves all the snapshots for the identity Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string"
            },
            "description": "The specified start date",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "month"
              ]
            },
            "description": "The interval indicating the range in day or month for the specified interval-name"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identity summary for each snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "snapshot": {
                        "type": "string",
                        "description": "the date when the identity record was created",
                        "example": "2007-03-01T13:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshot-summary": {
      "get": {
        "operationId": "getIdentitySnapshotSummary",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets the summary for the event count for a specific identity",
        "description": "This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string"
            },
            "description": "The date before which snapshot summary is required",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "month"
              ]
            },
            "description": "The interval indicating day or month. Defaults to month if not specified"
          },
          {
            "in": "query",
            "name": "time-zone",
            "schema": {
              "type": "string"
            },
            "description": "The time zone. Defaults to UTC if not provided",
            "example": "UTC"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "A summary list of identity changes in date histogram format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the name of metric"
                      },
                      "value": {
                        "type": "number",
                        "description": "the value associated to the metric"
                      }
                    },
                    "example": {
                      "name": "2021-04-01T00:00:00.000Z",
                      "value": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshots/{date}": {
      "get": {
        "operationId": "getIdentitySnapshot",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets an identity snapshot at a given date",
        "description": "This method retrieves a specified identity snapshot at a given date Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "path",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "description": "The specified date",
            "example": "2007-03-01T13:00:00Z",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The identity object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1historical-identities~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshots/{date}/access-items": {
      "get": {
        "operationId": "listIdentitySnapshotAccessItems",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets the list of identity access items at a given date filterd by item type",
        "description": "This method retrieves the list of identity access items at a given date filterd by item type Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "path",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The specified date",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The access item type",
            "example": "account"
          }
        ],
        "responses": {
          "200": {
            "description": "The identity object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/0"
                      },
                      {
                        "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/1"
                      },
                      {
                        "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/2"
                      },
                      {
                        "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/3"
                      },
                      {
                        "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/4"
                      }
                    ]
                  }
                },
                "examples": {
                  "Access Item AccessProfile Response": {
                    "description": "An access profile response",
                    "value": [
                      {
                        "type": "accessProfile",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "AccessProfile - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD",
                        "entitlementCount": 12,
                        "appDisplayName": "AppName"
                      }
                    ]
                  },
                  "Access Item Account Response": {
                    "description": "An account response",
                    "value": [
                      {
                        "type": "account",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "nativeIdentity": "dr.arden.ogahn.d",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "entitlementCount": 12,
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "Access Item App Response": {
                    "description": "An app response",
                    "value": [
                      {
                        "type": "app",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "appName"
                      }
                    ]
                  },
                  "Access Item Entitlement Response": {
                    "description": "An entitlement event",
                    "value": [
                      {
                        "type": "entitlement",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "attribute": "groups",
                        "value": "Upward mobility access",
                        "entitlementType": "entitlement",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "Entitlement - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "Access Item Role Response": {
                    "description": "A role response",
                    "value": [
                      {
                        "type": "role",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "description": "Role - Workday/Citizenship access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/common-access": {
      "get": {
        "operationId": "getCommonAccess",
        "summary": "Get a paginated list of common access",
        "tags": [
          "IAI Common Access"
        ],
        "description": "This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read",
        "parameters": [
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407)\n\nFiltering is supported for the following fields and operators:\n\n**status**: *eq* \"CONFIRMED\" or \"DENIED\" **reviewedByUser** *eq* true or false **access.id**: *eq* \"id\" **access.type**: *eq* \"ROLE\" or \"ACCESS_PROFILE\" **access.name**: *sw* \"Administrator\" **access.description**: *sw* \"admin\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://community.sailpoint.com/t5/IdentityNow-Wiki/V3-API-Standard-Collection-Parameters/ta-p/156407)\n\nSorting is supported for the following fields: **access.name,status**\n\nBy default the common access items are sorted by name, ascending."
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of common access for a customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "$ref": "#/paths/~1common-access/post/requestBody/content/application~1json/schema/properties/access",
                        "description": "common access item"
                      },
                      "status": {
                        "type": "string",
                        "description": "CONFIRMED or DENIED"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "readOnly": true,
                        "format": "date-time"
                      },
                      "reviewedByUser": {
                        "type": "boolean",
                        "description": "true if user has confirmed or denied status"
                      },
                      "lastReviewed": {
                        "type": "string",
                        "readOnly": true,
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createCommonAccess",
        "summary": "Create common access items",
        "tags": [
          "IAI Common Access"
        ],
        "description": "This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Common access ID"
                      },
                      "type": {
                        "description": "Common access type (ROLE or ACCESS_PROFILE)",
                        "type": "string",
                        "enum": [
                          "ACCESS_PROFILE",
                          "ROLE"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "Common access name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Common access description"
                      },
                      "ownerName": {
                        "type": "string",
                        "description": "Common access owner name"
                      },
                      "ownerId": {
                        "type": "string",
                        "description": "Common access owner ID"
                      }
                    }
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "CONFIRMED",
                      "DENIED"
                    ],
                    "description": "State of common access item."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns details of the common access classification request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Common Access Item ID"
                    },
                    "access": {
                      "$ref": "#/paths/~1common-access/post/requestBody/content/application~1json/schema/properties/access"
                    },
                    "status": {
                      "$ref": "#/paths/~1common-access/post/requestBody/content/application~1json/schema/properties/status"
                    },
                    "lastUpdated": {
                      "type": "string"
                    },
                    "reviewedByUser": {
                      "type": "boolean"
                    },
                    "lastReviewed": {
                      "type": "string"
                    },
                    "createdByUser": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/common-access/update-status": {
      "post": {
        "operationId": "commonAccessBulkUpdateStatus",
        "summary": "Bulk update common access status",
        "tags": [
          "IAI Common Access"
        ],
        "description": "This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update",
        "requestBody": {
          "description": "Confirm or deny in bulk the common access ids that are (or aren't) common access",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "confirmedIds": {
                      "description": "List of confirmed common access ids.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      }
                    },
                    "deniedIds": {
                      "description": "List of denied common access ids.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/events": {
      "get": {
        "operationId": "getEvents",
        "tags": [
          "Identity History"
        ],
        "summary": "Lists all events for the given identity",
        "description": "This method retrieves all access events for the identity Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            },
            "description": "The optional instant from which to return the access events",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "eventTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "An optional list of event types to return.  If null or empty, all events are returned",
            "example": [
              "AccessAddedEvent",
              "AccessRemovedEvent"
            ]
          },
          {
            "in": "query",
            "name": "accessItemTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned "
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of events for the identity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "accessItem": {
                            "type": "object",
                            "oneOf": [
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/0"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/1"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/2"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/3"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/4"
                              }
                            ]
                          },
                          "identityId": {
                            "type": "string",
                            "description": "the identity id"
                          },
                          "eventType": {
                            "type": "string",
                            "description": "the event type"
                          },
                          "dt": {
                            "type": "string",
                            "description": "the date of event"
                          },
                          "governanceEvent": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the governance event, such as the certification name or access request ID."
                              },
                              "dt": {
                                "type": "string",
                                "description": "The date that the certification or access request was completed."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "certification",
                                  "accessRequest"
                                ],
                                "description": "The type of governance event."
                              },
                              "governanceId": {
                                "type": "string",
                                "description": "The ID of the instance that caused the event - either the certification ID or access request ID."
                              },
                              "owners": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1events/get/responses/200/content/application~1json/schema/items/anyOf/4/properties/certifiers/items"
                                }
                              }
                            },
                            "example": {
                              "name": "Manager Certification for Jon Snow",
                              "dt": "2019-03-08T22:37:33.901Z",
                              "type": "certification",
                              "governanceId": "2c91808a77ff216301782327a50f09bf",
                              "owners": [
                                {
                                  "id": "bc693f07e7b645539626c25954c58554",
                                  "displayName": "Jon Snow"
                                }
                              ]
                            }
                          }
                        },
                        "example": {
                          "accessItem": {
                            "id": "8c190e6787aa4ed9a90bd9d5344523fb",
                            "accessType": "account",
                            "nativeIdentity": 127999,
                            "sourceName": "JDBC Entitlements Source",
                            "entitlementCount": 0,
                            "displayName": "Sample Name"
                          },
                          "eventType": "AccessItemAssociated",
                          "identityId": "8c190e6787aa4ed9a90bd9d5344523fb",
                          "dt": "2019-03-08T22:37:33.901Z",
                          "governanceEvent": {
                            "name": "Access Request 58",
                            "dt": "2019-03-08T22:37:33.901Z",
                            "type": "accessRequest",
                            "governanceId": "2c91808a77ff216301782327a50f09e1",
                            "owners": [
                              {
                                "id": "bc693f07e7b645539626c25954c58554",
                                "displayName": "Jon Snow"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "accessItem": {
                            "type": "object",
                            "oneOf": [
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/0"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/1"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/2"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/3"
                              },
                              {
                                "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1access-items/get/responses/200/content/application~1json/schema/items/oneOf/4"
                              }
                            ]
                          },
                          "identityId": {
                            "type": "string",
                            "description": "the identity id"
                          },
                          "eventType": {
                            "type": "string",
                            "description": "the event type"
                          },
                          "dt": {
                            "type": "string",
                            "description": "the date of event"
                          },
                          "governanceEvent": {
                            "$ref": "#/paths/~1historical-identities~1%7Bid%7D~1events/get/responses/200/content/application~1json/schema/items/anyOf/0/properties/governanceEvent"
                          }
                        },
                        "example": {
                          "accessItem": {
                            "id": "8c190e6787aa4ed9a90bd9d5344523fb",
                            "accessType": "account",
                            "nativeIdentity": 127999,
                            "sourceName": "JDBC Entitlements Source",
                            "entitlementCount": 0,
                            "displayName": "Sample Name"
                          },
                          "eventType": "AccessItemRemoved",
                          "identityId": "8c190e6787aa4ed9a90bd9d5344523fb",
                          "dt": "2019-03-08T22:37:33.901Z",
                          "governanceEvent": {
                            "name": "Manager Certification for Jon Snow",
                            "dt": "2019-03-08T22:37:33.901Z",
                            "type": "certification",
                            "governanceId": "2c91808a77ff216301782327a50f09bf",
                            "owners": [
                              {
                                "id": "bc693f07e7b645539626c25954c58554",
                                "displayName": "Jon Snow"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "changes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "the attribute name"
                                },
                                "previousValue": {
                                  "type": "string",
                                  "description": "the old value of attribute"
                                },
                                "newValue": {
                                  "type": "string",
                                  "description": "the new value of attribute"
                                }
                              },
                              "example": {
                                "name": "firstname",
                                "previousValue": "adam",
                                "newValue": "zampa"
                              }
                            }
                          },
                          "eventType": {
                            "type": "string",
                            "description": "the event type"
                          },
                          "identityId": {
                            "type": "string",
                            "description": "the identity id"
                          },
                          "dt": {
                            "type": "string",
                            "description": "the date of event"
                          }
                        },
                        "example": {
                          "attributeChanges": {
                            "name": "firstname",
                            "previousValue": "adam",
                            "newValue": "zampa"
                          },
                          "eventType": "AttributesChanged",
                          "identityId": "8a80828f643d484f01643e14202e206f",
                          "dt": "2019-03-08T22:37:33.901Z"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "accessRequest": {
                            "type": "object",
                            "description": "the access request details",
                            "properties": {
                              "requesterId": {
                                "type": "string",
                                "description": "the requester Id"
                              },
                              "requesterName": {
                                "type": "string",
                                "description": "the requesterName"
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "operation": {
                                      "type": "string",
                                      "description": "the access request item operation"
                                    },
                                    "accessItemType": {
                                      "type": "string",
                                      "description": "the access item type"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "the name of access request item"
                                    },
                                    "decision": {
                                      "type": "string",
                                      "enum": [
                                        "APPROVED",
                                        "REJECTED"
                                      ],
                                      "description": "the final decision for the access request"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "the description of access request item"
                                    },
                                    "sourceId": {
                                      "type": "string",
                                      "description": "the source id"
                                    },
                                    "sourceName": {
                                      "type": "string",
                                      "description": "the source Name"
                                    },
                                    "approvalInfos": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "the id of approver"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "the name of approver"
                                          },
                                          "status": {
                                            "type": "string",
                                            "description": "the status of the approval request"
                                          }
                                        },
                                        "example": {
                                          "name": "John Snow",
                                          "id": "8a80828f643d484f01643e14202e2000",
                                          "status": "Approved"
                                        }
                                      }
                                    }
                                  },
                                  "example": {
                                    "operation": "Add",
                                    "accessItemType": "role",
                                    "name": "Role-1",
                                    "decision": "APPROVED",
                                    "description": "The role descrition",
                                    "sourceId": "8a80828f643d484f01643e14202e206f",
                                    "sourceName": "Source1",
                                    "approvalInfos": [
                                      {
                                        "name": "John Snow",
                                        "id": "8a80828f643d484f01643e14202e2000",
                                        "status": "Approved"
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "example": {
                              "requesterId": "2c91808a77ff216301782327a50f09bf",
                              "requestName": "Bing C",
                              "items": [
                                {
                                  "operation": "Add",
                                  "accessItemType": "role",
                                  "name": "Role-1",
                                  "decision": "APPROVED",
                                  "description": "The role descrition",
                                  "sourceId": "8a80828f643d484f01643e14202e206f",
                                  "sourceName": "Source1",
                                  "approvalInfos": [
                                    {
                                      "name": "John Snow",
                                      "id": "8a80828f643d484f01643e14202e2000",
                                      "status": "Approved"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "identityId": {
                            "type": "string",
                            "description": "the identity id"
                          },
                          "eventType": {
                            "type": "string",
                            "description": "the event type"
                          },
                          "dt": {
                            "type": "string",
                            "description": "the date of event"
                          }
                        },
                        "example": {
                          "accessRequest": {
                            "requesterId": "2c91808a77ff216301782327a50f09bf",
                            "requestName": "Bing C",
                            "items": [
                              {
                                "operation": "Add",
                                "accessItemType": "role",
                                "name": "Role-1",
                                "decision": "APPROVED",
                                "description": "The role descrition",
                                "sourceId": "8a80828f643d484f01643e14202e206f",
                                "sourceName": "Source1",
                                "approvalInfos": [
                                  {
                                    "name": "John Snow",
                                    "id": "8a80828f643d484f01643e14202e2000",
                                    "status": "Approved"
                                  }
                                ]
                              }
                            ]
                          },
                          "eventType": "AccessRequested",
                          "identityId": "8a80828f643d484f01643e14202e206f",
                          "dt": "2019-03-08T22:37:33.901Z"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "certificationId": {
                            "type": "string",
                            "description": "the id of the certification item"
                          },
                          "certificationName": {
                            "type": "string",
                            "description": "the certification item name"
                          },
                          "signedDate": {
                            "type": "string",
                            "description": "the date ceritification was signed"
                          },
                          "certifiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "the id of the certifier"
                                },
                                "displayName": {
                                  "type": "string",
                                  "description": "the name of the certifier"
                                }
                              },
                              "example": {
                                "id": "8a80828f643d484f01643e14202e206f",
                                "displayName": "John Snow"
                              }
                            }
                          },
                          "eventType": {
                            "type": "string",
                            "description": "the event type"
                          },
                          "dt": {
                            "type": "string",
                            "description": "the date of event"
                          }
                        },
                        "example": {
                          "certificationId": "2c91808a77ff216301782327a50f09bf",
                          "certificationName": "Cert name",
                          "signedDate": "2019-03-08T22:37:33.901Z",
                          "certifiers": [
                            {
                              "id": "8a80828f643d484f01643e14202e206f",
                              "name": "Certifier Name",
                              "displayName": "John Snow"
                            }
                          ],
                          "eventType": "IdentityCertified",
                          "identityId": "8a80828f643d484f01643e14202e206f",
                          "dt": "2019-03-08T22:37:33.901Z"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "eventType": {
                            "type": "string",
                            "description": "the event type"
                          },
                          "identityId": {
                            "type": "string",
                            "description": "the identity id"
                          },
                          "dt": {
                            "type": "string",
                            "description": "the date of event"
                          },
                          "account": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "the ID of the account in the database"
                              },
                              "nativeIdentity": {
                                "type": "string",
                                "description": "the native identifier of the account"
                              },
                              "displayName": {
                                "type": "string",
                                "description": "the display name of the account"
                              },
                              "sourceId": {
                                "type": "string",
                                "description": "the ID of the source for this account"
                              },
                              "sourceName": {
                                "type": "string",
                                "description": "the name of the source for this account"
                              },
                              "entitlementCount": {
                                "type": "integer",
                                "description": "the number of entitlements on this account"
                              },
                              "accessType": {
                                "type": "string",
                                "description": "this value is always \"account\""
                              }
                            }
                          },
                          "statusChange": {
                            "type": "object",
                            "properties": {
                              "previousStatus": {
                                "type": "string",
                                "description": "the previous status of the account",
                                "enum": [
                                  "enabled",
                                  "disabled",
                                  "locked"
                                ]
                              },
                              "newStatus": {
                                "type": "string",
                                "description": "the new status of the account",
                                "enum": [
                                  "enabled",
                                  "disabled",
                                  "locked"
                                ]
                              }
                            }
                          }
                        },
                        "example": {
                          "account": {
                            "id": "2c91808a77ff216301782327a50f09bf",
                            "nativeIdentity": 127999,
                            "displayName": "Sample Name",
                            "sourceId": "8a80828f643d484f01643e14202e206f",
                            "sourceName": "JDBC Entitlements Source",
                            "entitlementCount": 0,
                            "accessType": "account"
                          },
                          "statusChange": {
                            "previousStatus": "enabled",
                            "newStatus": "disabled"
                          },
                          "eventType": "AccountStatusChanged",
                          "identityId": "8a80828f643d484f01643e14202e206f",
                          "date": "2019-03-08T22:37:33.901Z"
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "AccessItemAssociated": {
                    "description": "An Access item associated event",
                    "value": [
                      {
                        "accessItem": {
                          "id": "8c190e6787aa4ed9a90bd9d5344523fb",
                          "accessType": "account",
                          "nativeIdentity": 127999,
                          "sourceName": "JDBC Entitlements Source",
                          "entitlementCount": 0,
                          "displayName": "Sample Name"
                        },
                        "eventType": "AccessItemAssociated",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z",
                        "governanceEvent": {
                          "name": "Access Request 58",
                          "dt": "2019-03-08T22:37:33.901Z",
                          "type": "accessRequest",
                          "governanceId": "2c91808a77ff216301782327a50f09e1",
                          "owners": [
                            {
                              "id": "bc693f07e7b645539626c25954c58554",
                              "displayName": "Jon Snow"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "AccessItemRemoved": {
                    "description": "An Access item removed event",
                    "value": [
                      {
                        "accessItem": {
                          "id": "8c190e6787aa4ed9a90bd9d5344523fb",
                          "accessType": "account",
                          "nativeIdentity": 127999,
                          "sourceName": "JDBC Entitlements Source",
                          "entitlementCount": 0,
                          "displayName": "Sample Name"
                        },
                        "eventType": "AccessItemRemoved",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z",
                        "governanceEvent": {
                          "name": "Manager Certification for Jon Snow",
                          "dt": "2019-03-08T22:37:33.901Z",
                          "type": "certification",
                          "governanceId": "2c91808a77ff216301782327a50f09bf",
                          "owners": [
                            {
                              "id": "bc693f07e7b645539626c25954c58554",
                              "displayName": "Jon Snow"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "AttributesChanged": {
                    "description": "An attribute changed event",
                    "value": [
                      {
                        "attributeChanges": [
                          {
                            "name": "firstname",
                            "previousValue": "adam",
                            "newValue": "zampa"
                          }
                        ],
                        "eventType": "AttributesChanged",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z"
                      }
                    ]
                  },
                  "AccessRequested": {
                    "description": "An access requested event",
                    "value": {
                      "accessRequest": {
                        "requesterId": "2c91808a77ff216301782327a50f09bf",
                        "requestName": "Bing C",
                        "items": [
                          {
                            "operation": "Add",
                            "accessItemType": "role",
                            "name": "Role-1",
                            "decision": "APPROVED",
                            "description": "The role descrition",
                            "sourceId": "8a80828f643d484f01643e14202e206f",
                            "sourceName": "Source1",
                            "approvalInfos": [
                              {
                                "name": "John Snow",
                                "id": "8a80828f643d484f01643e14202e2000",
                                "status": "Approved"
                              }
                            ]
                          }
                        ]
                      },
                      "eventType": "AccessRequested",
                      "identityId": "8a80828f643d484f01643e14202e206f",
                      "dt": "2019-03-08T22:37:33.901Z"
                    }
                  },
                  "IdentityCertified": {
                    "description": "An identity certified event",
                    "value": [
                      {
                        "certification": {
                          "id": "2c91808a77ff216301782327a50f09bf",
                          "name": "Cert name",
                          "signedDate": "2019-03-08T22:37:33.901Z",
                          "certifiers": [
                            {
                              "id": "8a80828f643d484f01643e14202e206f",
                              "name": "Certifier Name",
                              "displayName": "John Snow"
                            }
                          ]
                        },
                        "eventType": "IdentityCertified",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z"
                      }
                    ]
                  },
                  "AccountStatusChanged": {
                    "description": "An account status changed event",
                    "value": [
                      {
                        "account": {
                          "id": "2c91808a77ff216301782327a50f09bf",
                          "nativeIdentity": 127999,
                          "displayName": "Sample Name",
                          "sourceId": "8a80828f643d484f01643e14202e206f",
                          "sourceName": "JDBC Entitlements Source",
                          "entitlementCount": 0,
                          "accessType": "account"
                        },
                        "statusChange": {
                          "previousStatus": "ENABLED",
                          "newStatus": "DISABLED"
                        },
                        "eventType": "AccountStatusChanged",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/start-date": {
      "get": {
        "operationId": "getStartDate",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets the start date of the identity",
        "description": "This method retrieves start date of the identity Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "The start date of the identity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "2017-03-01T13:00:00.000Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/compare": {
      "get": {
        "operationId": "compareIdentitySnapshots",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets a difference of count for each access item types for the given identity between 2 snapshots",
        "description": "This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "snapshot1",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 1 of identity",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "snapshot2",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 2 of identity",
            "example": "2008-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "accessItemTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned "
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "A IdentityCompare object with difference details for each access item type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accessItemDiff": {
                        "type": "object",
                        "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.",
                        "additionalProperties": {
                          "type": "object"
                        }
                      }
                    },
                    "example": {
                      "accessItemDiff": {
                        "role": {
                          "accessAdded": 2,
                          "accessRemoved": 3
                        },
                        "entitlement": {
                          "accessAdded": 4,
                          "accessRemoved": 0
                        },
                        "accessProfile": {
                          "accessAdded": 0,
                          "accessRemoved": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/compare/{access-type}": {
      "get": {
        "operationId": "compareIdentitySnapshotsAccessType",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets a list of differences of specific accessType for the given identity between 2 snapshots",
        "description": "This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "path",
            "name": "accessType",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The specific type which needs to be compared",
            "example": "role"
          },
          {
            "in": "query",
            "name": "access-associated",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added & removed",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "snapshot1",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 1 of identity",
            "example": "2008-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "snapshot2",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 2 of identity",
            "example": "2009-03-01T13:00:00Z"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of events for the identity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "the id of the access item"
                      },
                      "eventType": {
                        "type": "string",
                        "enum": [
                          "ADD",
                          "REMOVE"
                        ]
                      },
                      "displayName": {
                        "type": "string",
                        "description": "the display name of the access item"
                      },
                      "sourceName": {
                        "type": "string",
                        "description": "the source name of the access item"
                      }
                    },
                    "example": {
                      "id": "2c91808c7726345b017726a0a2fb013b",
                      "eventType": "ADD",
                      "displayName": "Test",
                      "sourceName": "Source"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/identity-profiles": {
      "get": {
        "operationId": "listIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Identity Profiles list",
        "description": "This returns a list of Identity Profiles based on the specified query parameters.\nA token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ne*\n\n**name**: *eq, ne*\n\n**priority**: *eq, ne*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **id**, **name**, **priority**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identityProfiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProfile"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:read"
            ]
          }
        ]
      },
      "post": {
        "operationId": "createIdentityProfile",
        "summary": "Create an Identity Profile",
        "description": "This creates an Identity Profile\nA token with ORG_ADMIN authority is required to call this API to create an Identity Profile.",
        "tags": [
          "Identity Profiles"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProfile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created Identity Profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:create"
            ]
          }
        ]
      }
    },
    "/identity-profiles/bulk-delete": {
      "post": {
        "operationId": "deleteIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Delete Identity Profiles",
        "description": "This deletes multiple Identity Profiles via a list of supplied IDs.\nOn success, this endpoint will return a reference to the bulk delete task result.\nA token with ORG_ADMIN authority is required to call this API to delete a list of Identity Profiles.",
        "requestBody": {
          "description": "Identity Profile bulk delete request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "List of Identity Profile IDs to delete.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "2c9180867b2a34e0017b3078d60b0699",
                  "2c9180867b2a34e0017b3078d60b0698"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                  "description": "An object with a TaskResult reference of the bulk delete job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:delete"
            ]
          }
        ]
      }
    },
    "/identity-profiles/export": {
      "get": {
        "operationId": "exportIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Export Identity Profiles",
        "description": "This exports existing identity profiles in the format specified by the sp-config service.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ne*\n\n**name**: *eq, ne*\n\n**priority**: *eq, ne*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **id**, **name**, **priority**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of export objects with identity profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1identity-profiles~1import/post/requestBody/content/application~1json/schema/items"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:read"
            ]
          }
        ]
      }
    },
    "/identity-profiles/import": {
      "post": {
        "operationId": "importIdentityProfiles",
        "summary": "Import Identity Profiles",
        "description": "This imports previously exported identity profiles.",
        "tags": [
          "Identity Profiles"
        ],
        "requestBody": {
          "description": "Previously exported Identity Profiles.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Identity Profile exported object",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "example": 1,
                      "description": "Version or object from the target service."
                    },
                    "self": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    },
                    "object": {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "The description of the Identity Profile.",
                              "example": "My custom flat file profile"
                            },
                            "owner": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "The owner of the Identity Profile."
                            },
                            "priority": {
                              "type": "integer",
                              "format": "int64",
                              "description": "The priority for an Identity Profile.",
                              "example": 10
                            },
                            "authoritativeSource": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "description": "The authoritative source for this Identity Profile.",
                              "example": {
                                "type": "SOURCE",
                                "id": "2c9180835d191a86015d28455b4b232a",
                                "name": "HR Active Directory"
                              }
                            },
                            "identityRefreshRequired": {
                              "type": "boolean",
                              "description": "True if a identity refresh is needed. Typically triggered when a change on the source has been made."
                            },
                            "identityCount": {
                              "type": "integer",
                              "description": "The number of identities that belong to the Identity Profile.",
                              "example": 8
                            },
                            "identityAttributeConfig": {
                              "type": "object",
                              "description": "Defines all the identity attribute mapping configurations. This defines how to generate or collect data for each identity attributes in identity refresh process.",
                              "properties": {
                                "enabled": {
                                  "description": "The backend will only promote values if the profile/mapping is enabled.",
                                  "type": "boolean",
                                  "example": true
                                },
                                "attributeTransforms": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines a transformation definition for an identity attribute.",
                                    "properties": {
                                      "identityAttributeName": {
                                        "type": "string",
                                        "description": "Name of the identity attribute.",
                                        "example": "email"
                                      },
                                      "transformDefinition": {
                                        "description": "The seaspray transformation definition.",
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "The type of the transform definition.",
                                            "example": "accountAttribute"
                                          },
                                          "attributes": {
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "object"
                                            },
                                            "description": "Arbitrary key-value pairs to store any metadata for the object",
                                            "example": {
                                              "attributeName": "e-mail",
                                              "sourceName": "MySource",
                                              "sourceId": "2c9180877a826e68017a8c0b03da1a53"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "identityExceptionReportReference": {
                              "type": "object",
                              "properties": {
                                "taskResultId": {
                                  "type": "string",
                                  "format": "uuid",
                                  "description": "The id of the task result.",
                                  "example": "2c918086795cd09201795d5f7d7533df"
                                },
                                "reportName": {
                                  "type": "string",
                                  "example": "My annual report",
                                  "description": "The name of the report."
                                }
                              }
                            },
                            "hasTimeBasedAttr": {
                              "description": "Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The result of importing Identity Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Import Object Response Body",
                  "description": "Response model for import of a single object.",
                  "properties": {
                    "infos": {
                      "description": "Informational messages returned from the target service on import.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Config Import/Export Message",
                        "description": "Message model for Config Import/Export.",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Message key.",
                            "example": "UNKNOWN_REFERENCE_RESOLVER"
                          },
                          "text": {
                            "type": "string",
                            "description": "Message text.",
                            "example": "Unable to resolve reference for object [type: IDENTITY, id: 2c91808c746e9c9601747d6507332ecz, name: random identity]"
                          },
                          "details": {
                            "type": "object",
                            "description": "Message details if any, in key:value pairs.",
                            "additionalProperties": {
                              "type": "object"
                            },
                            "example": {
                              "details": "message details"
                            }
                          }
                        },
                        "required": [
                          "key",
                          "text",
                          "details"
                        ]
                      }
                    },
                    "warnings": {
                      "description": "Warning messages returned from the target service on import.",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1identity-profiles~1import/post/responses/200/content/application~1json/schema/properties/infos/items"
                      }
                    },
                    "errors": {
                      "description": "Error messages returned from the target service on import.",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1identity-profiles~1import/post/responses/200/content/application~1json/schema/properties/infos/items"
                      }
                    },
                    "importedObjects": {
                      "description": "References to objects that were created or updated by the import.",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                      }
                    }
                  },
                  "required": [
                    "infos",
                    "warnings",
                    "errors",
                    "importedObjects"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:create"
            ]
          }
        ]
      }
    },
    "/identity-profiles/identity-preview": {
      "post": {
        "operationId": "generateIdentityPreview",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Generate Identity Profile Preview",
        "description": "This generates a non-persisted IdentityDetails object that will represent as the preview of the identities attribute when the given policy's attribute config is applied.\nA token with ORG_ADMIN authority is required to call this API to generate an identity preview.",
        "requestBody": {
          "description": "Identity Preview request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identityId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "2c9180857893f12901789445619b0366"
                  },
                  "identityAttributeConfig": {
                    "$ref": "#/components/schemas/IdentityProfile/allOf/1/properties/identityAttributeConfig"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Object representing the preview object with all of the identity attributes using the current mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "identity": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    },
                    "previewAttributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the attribute that is being previewed.",
                            "example": "email"
                          },
                          "value": {
                            "type": "object",
                            "description": "Value that was derived during the preview.",
                            "example": "email@mail.com"
                          },
                          "previousValue": {
                            "type": "object",
                            "description": "The value of the attribute before the preview.",
                            "example": "oldEmail@mail.com"
                          },
                          "errorMessages": {
                            "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/errorMessages/items",
                            "description": "A list of errors that may have been encountered"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:preview"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}": {
      "get": {
        "operationId": "getIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Gets a single Identity Profile",
        "description": "This returns a single Identity Profile based on ID.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An Identity Profile object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:read"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Delete an Identity Profile",
        "description": "This deletes an Identity Profile based on ID.\nA token with ORG_ADMIN authority is required to call this API to delete an Identity Profile.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An object with a TaskResult reference of the delete job.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "the application ID",
                      "example": "ff8081814d977c21014da056804a0af3"
                    },
                    "name": {
                      "type": "string",
                      "description": "the application name",
                      "example": "Github"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:delete"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "updateIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Update the Identity Profile",
        "description": "This updates the specified Identity Profile.\nA token with ORG_ADMIN authority is required to call this API to update the Identity Profile. Some fields of the Schema cannot be updated. These fields are listed below.\n* id\n* name\n* created\n* modified",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Updated description!"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Identity Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:update"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/default-identity-attribute-config": {
      "get": {
        "operationId": "getDefaultIdentityAttributeConfig",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Gets the default identity attribute config",
        "description": "This returns the default identity attribute config\nA token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An Identity Attribute Config object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile/allOf/1/properties/identityAttributeConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile-default-mapping:read"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/refresh-identities": {
      "post": {
        "operationId": "refreshIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Refreshes all the identities under this profile",
        "description": "This refreshes all identities under the profile\nA token with ORG_ADMIN authority is required to call this API to refresh identities under this Identity Profile.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The Identity Profile ID to be refreshed",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted status after all refreshes have launched",
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:identity-profile:refresh"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}": {
      "get": {
        "operationId": "listLifecycleStates",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Lifecycle State",
        "description": "This endpoint returns a lifecycle state.\n\nA token with ORG_ADMIN or API authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "lifecycle-state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Lifecycle-state name."
                    },
                    "technicalName": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The technical name for lifecycle state. This is for internal use."
                    },
                    "description": {
                      "type": "string",
                      "description": "Lifecycle state description."
                    },
                    "created": {
                      "type": "string",
                      "readOnly": true,
                      "format": "date-time"
                    },
                    "modified": {
                      "type": "string",
                      "readOnly": true,
                      "format": "date-time"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether the lifecycle state is enabled or disabled."
                    },
                    "identityCount": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Number of identities that have the lifecycle state."
                    },
                    "emailNotificationOption": {
                      "type": "object",
                      "properties": {
                        "notifyManagers": {
                          "type": "boolean",
                          "description": "If true, then the manager is notified of the lifecycle state change."
                        },
                        "notifyAllAdmins": {
                          "type": "boolean",
                          "description": "If true, then all the admins are notified of the lifecycle state change."
                        },
                        "notifySpecificUsers": {
                          "type": "boolean",
                          "description": "If true, then the users specified in \"emailAddressList\" below are notified of lifecycle state change."
                        },
                        "emailAddressList": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of user email addresses. If \"notifySpecificUsers\" option is true, then these users are notified of lifecycle state change."
                        }
                      }
                    },
                    "accountActions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "ENABLE",
                              "DISABLE"
                            ]
                          },
                          "sourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "2c918084660f45d6016617daa9210584",
                              "2c918084660f45d6016617daa9210500"
                            ],
                            "description": "List of source IDs. The sources must have the ENABLE feature or flat file source. See \"/sources\" endpoint for source features."
                          }
                        }
                      }
                    },
                    "accessProfileIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "2c918084660f45d6016617daa9210584",
                        "2c918084660f45d6016617daa9210500"
                      ],
                      "description": "List of access-profile IDs that are associated with the lifecycle state."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateLifecycleStates",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Update Lifecycle State",
        "description": "This API updates individual lifecycle state fields using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nA token with ORG_ADMIN or API authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields can be updated:\n* enabled\n* description\n* accountActions\n* accessProfileIds\n* emailNotificationOption\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Updated description!"
                },
                {
                  "op": "replace",
                  "path": "/accessProfileIds",
                  "value": [
                    "2c918087742bab150174407a80f3125e",
                    "2c918087742bab150174407a80f3124f"
                  ]
                },
                {
                  "op": "replace",
                  "path": "/accountActions",
                  "value": [
                    {
                      "action": "ENABLE",
                      "sourceIds": [
                        "2c9180846a2f82fb016a481c1b1560c5",
                        "2c9180846a2f82fb016a481c1b1560cc"
                      ]
                    },
                    {
                      "action": "DISABLE",
                      "sourceIds": [
                        "2c91808869a0c9980169a207258513fb"
                      ]
                    }
                  ]
                },
                {
                  "op": "replace",
                  "path": "/emailNotificationOption",
                  "value": {
                    "notifyManagers": true,
                    "notifyAllAdmins": false,
                    "notifySpecificUsers": false,
                    "emailAddressList": []
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated lifecycle-state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1identity-profiles~1%7Bidentity-profile-id%7D~1lifecycle-states~1%7Blifecycle-state-id%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-records": {
      "post": {
        "operationId": "nonEmployeeRecordCreation",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create Non-Employee Record",
        "description": "This request will create a non-employee record.\nRequest will require the following security scope:\n'idn:nesr:create'",
        "requestBody": {
          "description": "Non-Employee record creation request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "type": "string",
                    "description": "Requested identity account name.",
                    "example": "william.smith"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "Non-Employee's first name.",
                    "example": "William"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Non-Employee's last name.",
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "description": "Non-Employee's email.",
                    "example": "william.smith@example.com"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Non-Employee's phone.",
                    "example": "5555555555"
                  },
                  "manager": {
                    "type": "string",
                    "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                    "example": "jane.doe"
                  },
                  "sourceId": {
                    "type": "string",
                    "description": "Non-Employee's source id.",
                    "example": "2c91808568c529c60168cca6f90c1313"
                  },
                  "data": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Attribute blob/bag for a non-employee, 10 attributes is the maximum size supported."
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Non-Employee employment start date.",
                    "example": "2020-03-24T00:00:00-05:00"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Non-Employee employment end date.",
                    "example": "2021-03-25T00:00:00-05:00"
                  }
                },
                "required": [
                  "accountName",
                  "firstName",
                  "lastName",
                  "email",
                  "phone",
                  "manager",
                  "sourceId",
                  "startDate",
                  "endDate"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "UUID",
                      "description": "Non-Employee record id."
                    },
                    "accountName": {
                      "type": "string",
                      "description": "Requested identity account name."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Non-Employee's first name.",
                      "example": "William"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Non-Employee's last name.",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "description": "Non-Employee's email.",
                      "example": "william.smith@example.com"
                    },
                    "phone": {
                      "type": "string",
                      "description": "Non-Employee's phone.",
                      "example": "5555555555"
                    },
                    "manager": {
                      "type": "string",
                      "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                      "example": "jane.doe"
                    },
                    "sourceId": {
                      "type": "string",
                      "description": "Non-Employee's source id.",
                      "example": "2c91808568c529c60168cca6f90c1313"
                    },
                    "data": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Attribute blob/bag for a non-employee."
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Non-Employee employment start date.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Non-Employee employment end date.",
                      "example": "2020-08-23T18:52:59.162Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the request was last modified.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the request was created.",
                      "example": "2019-08-23T18:40:35.772Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "nonEmployeeRecordList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Non-Employee Records",
        "description": "This gets a list of non-employee records.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)<br/><br/> Filtering is supported for the following fields and operators:<br/><br/> **sourceId**: *eq* <br/><br/> *Example:* sourceId eq \"2c91808568c529c60168cca6f90c1313\""
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee record objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-records/{id}": {
      "get": {
        "operationId": "nonEmployeeRecordGet",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a Non-Employee Record",
        "description": "This gets a non-employee record.\nRequest will require the following scope:\n'idn:nesr:read'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee record object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "nonEmployeeRecordUpdate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Update Non-Employee Record",
        "description": "This request will update a non-employee record.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1non-employee-records/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An updated non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "nonEmployeeRecordPatch",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch Non-Employee Record",
        "description": "This request will patch a non-employee record.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/endDate",
                  "value": {
                    "2019-08-23T18:40:35.772Z": null
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "A patched non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-records/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "nonEmployeeRecordDelete",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Non-Employee Record",
        "description": "This request will delete a non-employee record.\nRequest will require the following security scope:\n'idn:nesr:delete'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee record id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-records/bulk-delete": {
      "post": {
        "operationId": "nonEmployeeRecordBulkDelete",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Multiple Non-Employee Records",
        "description": "This request will delete multiple non-employee records based on the non-employee ids provided.\nRequest will require the following scope:\n'idn:nesr:delete'",
        "requestBody": {
          "description": "Non-Employee bulk delete request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "List of non-employee ids.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-requests": {
      "post": {
        "operationId": "nonEmployeeRequestCreation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create Non-Employee Request",
        "description": "This request will create a non-employee request and notify the approver",
        "requestBody": {
          "description": "Non-Employee creation request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1non-employee-records/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee request creation object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "Non-Employee source id.",
                          "example": "a0303682-5e4a-44f7-bdc2-6ce6112549c1"
                        },
                        "sourceId": {
                          "type": "string",
                          "description": "Source Id associated with this non-employee source.",
                          "example": "2c91808568c529c60168cca6f90c1313"
                        },
                        "name": {
                          "type": "string",
                          "description": "Source name associated with this non-employee source.",
                          "example": "Retail"
                        },
                        "description": {
                          "type": "string",
                          "description": "Source description associated with this non-employee source.",
                          "example": "Source description"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "accountName": {
                          "type": "string",
                          "description": "Requested identity account name.",
                          "example": "william.smith"
                        },
                        "firstName": {
                          "type": "string",
                          "description": "Non-Employee's first name.",
                          "example": "William"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Non-Employee's last name.",
                          "example": "Smith"
                        },
                        "email": {
                          "type": "string",
                          "description": "Non-Employee's email.",
                          "example": "william.smith@example.com"
                        },
                        "phone": {
                          "type": "string",
                          "description": "Non-Employee's phone.",
                          "example": "5555555555"
                        },
                        "manager": {
                          "type": "string",
                          "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                          "example": "jane.doe"
                        },
                        "nonEmployeeSource": {
                          "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/0"
                        },
                        "data": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Attribute blob/bag for a non-employee."
                        },
                        "approvalItems": {
                          "description": "List of approval item for the request",
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/0"
                          }
                        },
                        "approvalStatus": {
                          "type": "string",
                          "enum": [
                            "APPROVED",
                            "REJECTED",
                            "PENDING",
                            "NOT_READY",
                            "CANCELLED"
                          ],
                          "description": "Enum representing the non-employee request approval status"
                        },
                        "comment": {
                          "type": "string",
                          "description": "comment of requester"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was completely approved.",
                          "example": "2020-03-24T11:11:41.139-05:00"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Non-Employee employment start date.",
                          "example": "2020-03-24T00:00:00-05:00"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Non-Employee employment end date.",
                          "example": "2021-03-25T00:00:00-05:00"
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was last modified.",
                          "example": "2020-03-24T11:11:41.139-05:00"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was created.",
                          "example": "2020-03-24T11:11:41.139-05:00"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "400.1 Bad Request Content": {
                    "description": "Response for bad request content",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "e7eab60924f64aa284175b9fa3309599",
                      "messages": [
                        {
                          "local": "en",
                          "localeOrigin": "REQUEST",
                          "text": "firstName is required; accountName is required;"
                        }
                      ]
                    }
                  },
                  "400.1.409 Reference conflict": {
                    "description": "Response for reference conflict",
                    "value": {
                      "detailCode": "400.1.409 Reference conflict",
                      "trackingId": "e7eab60924f64aa284175b9fa3309599",
                      "messages": [
                        {
                          "local": "en",
                          "localeOrigin": "REQUEST",
                          "text": "Unable to create Non-Employee because the accountName \"existed\" is already being used."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "nonEmployeeRequestList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Non-Employee Requests",
        "description": "This gets a list of non-employee requests.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user."
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)<br/><br/> Filtering is supported for the following fields and operators:<br/><br/> **sourceId**: *eq* <br/><br/> *Example:* sourceId eq \"2c91808568c529c60168cca6f90c1313\""
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-employee request objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-requests/{id}": {
      "get": {
        "operationId": "nonEmployeeRequestGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a Non-Employee Request",
        "description": "This gets a non-employee request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee request id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee request object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "nonEmployeeRequestDeletion",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Non-Employee Request",
        "description": "This request will delete a non-employee request.  \nRequest will require the following scope:\n'idn:nesr:delete'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee request id in the UUID format",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-requests/summary/{requested-for}": {
      "get": {
        "operationId": "nonEmployeeRequestSummaryGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get Summary of Non-Employee Requests",
        "description": "This request will retrieve a summary of non-employee requests.<br><br> There are two contextual uses for the `requested-for` path parameter:<br> 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager's id.<br> 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.",
        "parameters": [
          {
            "in": "path",
            "name": "requested-for",
            "description": "The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid (if user is Org Admin)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee request summary object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "approved": {
                      "type": "number",
                      "description": "The number of approved non-employee requests on all sources that *requested-for* user manages."
                    },
                    "rejected": {
                      "type": "number",
                      "description": "The number of rejected non-employee requests on all sources that *requested-for* user manages."
                    },
                    "pending": {
                      "type": "number",
                      "description": "The number of pending non-employee requests on all sources that *requested-for* user manages."
                    },
                    "nonEmployeeCount": {
                      "type": "number",
                      "description": "The number of non-employee records on all sources that *requested-for* user manages."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources": {
      "post": {
        "operationId": "nonEmployeeSourcesCreation",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create Non-Employee Source",
        "description": "This request will create a non-employee source.\nRequest will require the following security scope:\n'idn:nesr:create'",
        "requestBody": {
          "description": "Non-Employee source creation request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of non-employee source.",
                    "example": "Retail"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of non-employee source.",
                    "example": "Source description"
                  },
                  "owner": {
                    "description": "Owner of non-employee source.",
                    "$ref": "#/paths/~1non-employee-sources/post/requestBody/content/application~1json/schema/properties/approvers/items"
                  },
                  "managementWorkgroup": {
                    "type": "string",
                    "description": "The ID for the management workgroup that contains source sub-admins",
                    "example": "123299"
                  },
                  "approvers": {
                    "description": "List of approvers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "Identity id.",
                          "example": "2c91808570313110017040b06f344ec9"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    "maxItems": 3
                  },
                  "accountManagers": {
                    "description": "List of account managers.",
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1non-employee-sources/post/requestBody/content/application~1json/schema/properties/approvers/items"
                    },
                    "maxItems": 10
                  }
                },
                "required": [
                  "owner",
                  "name",
                  "description"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created non-employee source.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "cloudExternalId": {
                          "type": "string",
                          "description": "Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.",
                          "example": "99999"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "nonEmployeeSourcesList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Non-Employee Sources",
        "description": "This gets a list of non-employee sources.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user."
          },
          {
            "in": "query",
            "name": "non-employee-count",
            "schema": {
              "type": "boolean"
            },
            "description": "The flag to determine whether return a non-employee count associate with source."
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **name, created**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-employee sources objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "nonEmployeeCount": {
                            "type": "number",
                            "description": "Number of non-employee records associated with this source."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}": {
      "get": {
        "operationId": "nonEmployeeSourceGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a Non-Employee Source",
        "description": "This gets a non-employee source.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee source object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "approvers": {
                          "description": "List of approvers",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type"
                              },
                              "id": {
                                "type": "string",
                                "description": "Identity id",
                                "example": "5168015d32f890ca15812c9180835d2e"
                              }
                            }
                          }
                        },
                        "accountManagers": {
                          "description": "List of account managers",
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema/allOf/1/properties/approvers/items"
                          }
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was last modified.",
                          "example": "2019-08-23T18:52:59.162Z"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was created.",
                          "example": "2019-08-23T18:40:35.772Z"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "nonEmployeeSourcePatch",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch a Non-Employee Source (Partial Update)",
        "description": "patch a non-employee source. <br/> Patchable field: **name, description, approvers, accountManagers**\nRequest will require the following security scope:\n'idn:nesr:update'",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": {
                    "new name": null
                  }
                },
                {
                  "op": "replace",
                  "path": "/approvers",
                  "value": [
                    "2c91809f703bb37a017040a2fe8748c7",
                    "48b1f463c9e8427db5a5071bd81914b8"
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "A patched non-employee source object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "nonEmployeeSourceDelete",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete Non-Employee Source",
        "description": "This request will delete a non-employee source.\nRequest will require the following security scope:\n'idn:nesr:delete'",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employees/download": {
      "get": {
        "operationId": "nonEmployeeRecordsExport",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Exports Non-Employee Records to CSV",
        "description": "This requests a CSV download for all non-employees from a provided source.\nRequest will need the following security scope:\n'idn:nesr:read'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported CSV",
            "content": {
              "text/csv": {
                "example": "accountName,firstName,lastName,phone,email,manager,startDate,endDate\nJon.Smith, Jon, Smith, 555-555-5555, jon@jon.doe.nope.com, Jim Smith, 2020-04-05T08:00:00-10:00,2020-08-07T19:00:00-10:00\nWilliam.Chaffin, William, Chaffin, 555-555-5555, william@chaffins.nope.com, Bertram Chaffin, 2020-04-05T08:00:00-10:00,2020-08-07T19:00:00-10:00\n"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employee-bulk-upload": {
      "post": {
        "operationId": "nonEmployeeRecordsBulkUpload",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Imports, or Updates, Non-Employee Records",
        "description": "This post will import, or update, Non-Employee records found in the CSV.\nRequest will need the following security scope:\n'idn:nesr:create'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The form-data \"name\" attribute for the file content must be \"data\". See the schema specification.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "base64"
                  }
                },
                "required": [
                  "data"
                ]
              },
              "example": {
                "data": "accountName,firstName,lastName,phone,email,manager,startDate,endDate Jon.Smith, Jon, Smith, 555-555-5555, jon@jon.doe.nope.com, Jim Smith, 2020-04-05T08:00:00-10:00, 2020-08-07T19:00:00-10:00 William.Chaffin, William, Chaffin, 555-555-5555, william@chaffins.nope.com, Bertram Chaffin, 2020-04-05T08:00:00-10:00, 2020-08-07T19:00:00-10:00"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The CSV was accepted to be bulk inserted now or at a later time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The bulk upload job's ID. (UUID)",
                      "example": "2c91808568c529c60168cca6f90cffff"
                    },
                    "sourceId": {
                      "type": "string",
                      "description": "The ID of the source to bulk-upload non-employees to. (UUID)",
                      "example": "2c91808568c529c60168cca6f90c1313"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time the job was submitted.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time that the job was last updated.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "ERROR"
                      ],
                      "description": "Returns the following values indicating the progress or result of the bulk upload job.\n\"PENDING\" means the job is queued and waiting to be processed.\n\"IN_PROGRESS\" means the job is currently being processed.\n\"COMPLETED\" means the job has been completed without any errors.\n\"ERROR\" means the job failed to process with errors.\n",
                      "example": "PENDING"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\nThe response body will contain the list of specific errors with one on each line.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employee-bulk-upload/status": {
      "get": {
        "operationId": "nonEmployeeBulkUploadStatus",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Obtain the status of bulk upload on the source",
        "description": "The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.\n\nRequest will need the following scope:\n\n'idn:nesr:read'\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source ID (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the newest bulk-upload job, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "ERROR"
                      ],
                      "description": "Returns the following values indicating the progress or result of the bulk upload job.\n\"PENDING\" means the job is queued and waiting to be processed.\n\"IN_PROGRESS\" means the job is currently being processed.\n\"COMPLETED\" means the job has been completed without any errors.\n\"ERROR\" means the job failed to process with errors.\nnull means job has been submitted to the source.\n",
                      "example": "PENDING"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/schema-attributes-template/download": {
      "get": {
        "operationId": "nonEmployeeExportSourceSchemaTemplate",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Exports Source Schema Template",
        "description": "This requests a download for the Source Schema Template for a provided source.\nRequest will require the following security scope:\nidn:nesr:read'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported Source Schema Template",
            "content": {
              "text/csv": {
                "example": "accountName,firstName,lastName,phone,email,manager,startDate,endDate\n"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals": {
      "get": {
        "operationId": "nonEmployeeApprovalList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get List of Non-Employee Approval Requests",
        "description": "This gets a list of non-employee approval requests.",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user.",
            "required": false
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)<br/><br/> Filtering is supported for the following fields and operators:<br/><br/> **approvalStatus**: *eq* <br/><br/> *Example:* approvalStatus eq \"PENDING\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#toc-hId-2058949)<br/><br/> Sorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of approval items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D~1reject/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}": {
      "get": {
        "operationId": "nonEmployeeApprovalGet",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a non-employee approval item detail",
        "description": "Approves a non-employee approval request and notifies the next approver.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include-detail",
            "description": "The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "Non-Employee approval item id",
                          "example": "2c1e388b-1e55-4b0a-ab5c-897f1204159c"
                        },
                        "approver": {
                          "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema/allOf/1/properties/approvers/items",
                          "description": "Reference to the associated Identity"
                        },
                        "accountName": {
                          "type": "string",
                          "description": "Requested identity account name",
                          "example": "test.account"
                        },
                        "approvalStatus": {
                          "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/1/properties/approvalStatus"
                        },
                        "approvalOrder": {
                          "type": "number",
                          "description": "Approval order",
                          "example": 1
                        },
                        "comment": {
                          "type": "string",
                          "description": "comment of approver"
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was last modified.",
                          "example": "2019-08-23T18:52:59.162Z"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the request was created.",
                          "example": "2019-08-23T18:40:35.772Z"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmployeeRequest": {
                          "description": "Non-Employee request associated to this approval",
                          "allOf": [
                            {
                              "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D~1reject/post/responses/200/content/application~1json/schema/allOf/1/properties/nonEmployeeRequest"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "accountName": {
                                  "type": "string",
                                  "description": "Requested identity account name.",
                                  "example": "william.smith"
                                },
                                "firstName": {
                                  "type": "string",
                                  "description": "Non-Employee's first name.",
                                  "example": "William"
                                },
                                "lastName": {
                                  "type": "string",
                                  "description": "Non-Employee's last name.",
                                  "example": "Smith"
                                },
                                "email": {
                                  "type": "string",
                                  "description": "Non-Employee's email.",
                                  "example": "william.smith@example.com"
                                },
                                "phone": {
                                  "type": "string",
                                  "description": "Non-Employee's phone.",
                                  "example": "5555555555"
                                },
                                "manager": {
                                  "type": "string",
                                  "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                                  "example": "jane.doe"
                                },
                                "nonEmployeeSource": {
                                  "allOf": [
                                    {
                                      "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/0"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "schemaAttributes": {
                                          "description": "List of schema attributes associated with this non-employee source.",
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "data": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Attribute blob/bag for a non-employee."
                                },
                                "approvalStatus": {
                                  "$ref": "#/paths/~1non-employee-requests/post/responses/200/content/application~1json/schema/allOf/1/properties/approvalStatus"
                                },
                                "comment": {
                                  "type": "string",
                                  "description": "comment of requester"
                                },
                                "completionDate": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "When the request was completely approved.",
                                  "example": "2020-03-24T11:11:41.139-05:00"
                                },
                                "startDate": {
                                  "type": "string",
                                  "format": "date",
                                  "description": "Non-Employee employment start date.",
                                  "example": "2020-03-24"
                                },
                                "endDate": {
                                  "type": "string",
                                  "format": "date",
                                  "description": "Non-Employee employment end date.",
                                  "example": "2021-03-25"
                                },
                                "modified": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "When the request was last modified.",
                                  "example": "2020-03-24T11:11:41.139-05:00"
                                },
                                "created": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "When the request was created.",
                                  "example": "2020-03-24T11:11:41.139-05:00"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}/approve": {
      "post": {
        "operationId": "nonEmployeeApproveRequest",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Approve a Non-Employee Request",
        "description": "Approves a non-employee approval request and notifies the next approver.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment on the approval item.",
                    "maxLength": 4000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D~1reject/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}/reject": {
      "post": {
        "operationId": "nonEmployeeRejectRequest",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Reject a Non-Employee Request",
        "description": "This endpoint will reject an approval item request and notify user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment on the approval item.",
                    "maxLength": 4000
                  }
                },
                "required": [
                  "comment"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1non-employee-approvals~1%7Bid%7D/get/responses/200/content/application~1json/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nonEmployeeRequest": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "UUID",
                              "description": "Non-Employee request id."
                            },
                            "requester": {
                              "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D/get/responses/200/content/application~1json/schema/allOf/1/properties/approvers/items",
                              "example": {
                                "type": "IDENTITY",
                                "id": "2c9180866166b5b0016167c32ef31a66",
                                "name": "William Smith"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/summary/{requested-for}": {
      "get": {
        "operationId": "nonEmployeeApprovalSummary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get Summary of Non-Employee Approval Requests",
        "description": "This request will retrieve a summary of non-employee approval requests.<br><br> There are two contextual uses for the `requested-for` path parameter:<br> 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver's id.<br> 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.",
        "parameters": [
          {
            "in": "path",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "summary of non-employee approval requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "approved": {
                      "type": "number",
                      "description": "The number of approved non-employee approval requests."
                    },
                    "pending": {
                      "type": "number",
                      "description": "The number of pending non-employee approval requests."
                    },
                    "rejected": {
                      "type": "number",
                      "description": "The number of rejected non-employee approval requests."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}/schema-attributes": {
      "get": {
        "operationId": "getSchemaAttributes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List Schema Attributes Non-Employee Source",
        "description": "This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Schema Attributes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                  },
                  "maxItems": 18
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSchemaAttribute",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create a new Schema Attribute for Non-Employee Source",
        "description": "This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.\nRequest requires a security scope of:\n'idn:nesr:create'",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the attribute. Only type 'TEXT' is supported for custom attributes.",
                    "example": "TEXT"
                  },
                  "label": {
                    "type": "string",
                    "description": "Label displayed on the UI for this schema attribute.",
                    "example": "Account Name"
                  },
                  "technicalName": {
                    "type": "string",
                    "description": "The technical name of the attribute. Must be unique per source.",
                    "example": "account.name"
                  },
                  "helpText": {
                    "type": "string",
                    "description": "help text displayed by UI.",
                    "example": "The unique identifier for the account"
                  },
                  "placeholder": {
                    "type": "string",
                    "description": "Hint text that fills UI box.",
                    "example": "Enter a unique user name for this account."
                  },
                  "required": {
                    "type": "boolean",
                    "description": "If true, the schema attribute is required for all non-employees in the source",
                    "example": true
                  }
                },
                "required": [
                  "type",
                  "technicalName",
                  "label"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema Attribute created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "UUID",
                      "example": "ac110005-7156-1150-8171-5b292e3e0084",
                      "description": "Schema Attribute Id"
                    },
                    "system": {
                      "type": "boolean",
                      "description": "True if this schema attribute is mandatory on all non-employees sources.",
                      "example": true
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the schema attribute was last modified.",
                      "example": "2019-08-23T18:52:59.162Z"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the schema attribute was created.",
                      "example": "2019-08-23T18:40:35.772Z"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "TEXT",
                        "DATE",
                        "IDENTITY"
                      ],
                      "description": "Enum representing the type of data a schema attribute accepts."
                    },
                    "label": {
                      "type": "string",
                      "description": "Label displayed on the UI for this schema attribute.",
                      "example": "Account Name"
                    },
                    "technicalName": {
                      "type": "string",
                      "description": "The technical name of the attribute. Must be unique per source.",
                      "example": "account.name"
                    },
                    "helpText": {
                      "type": "string",
                      "description": "help text displayed by UI.",
                      "example": "The unique identifier for the account"
                    },
                    "placeholder": {
                      "type": "string",
                      "description": "Hint text that fills UI box.",
                      "example": "Enter a unique user name for this account."
                    },
                    "required": {
                      "type": "boolean",
                      "description": "If true, the schema attribute is required for all non-employees in the source",
                      "example": true
                    }
                  },
                  "required": [
                    "type",
                    "technicalName",
                    "label"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaAttributes",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete all custom schema attributes for Non-Employee Source",
        "description": "This end-point deletes all custom schema attributes for a non-employee source.\nRequest requires a security scope of:\n'idn:nesr:delete'",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "All custon Schema Attributes were successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}/schema-attributes/{attributeId}": {
      "get": {
        "operationId": "getSchemaAttribute",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get Schema Attribute Non-Employee Source",
        "description": "This API gets a schema attribute by Id for the specified Non-Employee SourceId.",
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "The Schema Attribute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSchemaAttribute",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch a Schema Attribute for Non-Employee Source",
        "description": "This end-point patches a specific schema attribute for a non-employee SourceId.\n\nRequest will require a security scope of:\n\n'idn:nesr:update'\n",
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "description": "A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update ':' 'label', 'helpText', 'placeholder', 'required'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/label",
                  "value": {
                    "new attribute label": null
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Schema Attribute was successfully patched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1non-employee-sources~1%7BsourceId%7D~1schema-attributes/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaAttribute",
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete a Schema Attribute for Non-Employee Source",
        "description": "This end-point deletes a specific schema attribute for a non-employee source.\n\nRequest will require a security scope of:\n\n'idn:nesr:delete'\n",
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "The Schema Attribute was successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/managed-clients/{id}/status": {
      "get": {
        "tags": [
          "Managed Clients"
        ],
        "summary": "Get a specified Managed Client Status.",
        "description": "Retrieve Managed Client Status by ID.",
        "operationId": "getClientStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Managed Client Status to get",
            "required": true,
            "schema": {
              "type": "string",
              "example": "aClientId"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the Managed Client Status to get",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ManagedClientStatus/properties/type",
              "example": "VA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with Managed Client Status having the given ID and Type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedClientStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:managed-client-status:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Managed Clients"
        ],
        "summary": "Handle a status request from a client",
        "description": "Update a status detail passed in from the client",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Managed Client Status to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "aClientId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagedClientStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the updated Managed Client Status.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Managed Client Status",
                  "type": "object",
                  "required": [
                    "body",
                    "status",
                    "type",
                    "timestamp"
                  ],
                  "properties": {
                    "body": {
                      "description": "ManagedClientStatus body information",
                      "type": "object",
                      "example": {
                        "body": {
                          "id": "1528",
                          "clientId": "1528",
                          "clusterId": "1533",
                          "orgType": "test",
                          "vaDownloadUrl": "https://sptcbu-va-images.s3.amazonaws.com/va-latest.zip",
                          "clusterJobCount": 1,
                          "configuration": {
                            "clusterType": "sqsCluster",
                            "clusterExternalId": "2c91808876dd79120176f758af765c58",
                            "debug": "false",
                            "failureThreshold": "0",
                            "gmtOffset": "-6",
                            "scheduleUpgrade": "false",
                            "va_version": "va-megapod-useast1-595-1627543540",
                            "jobType": "VA_UPGRADE",
                            "cookbook": "va-megapod-useast1-595-1627543540"
                          },
                          "connectorServices": [
                            {
                              "id": "540696",
                              "name": "EndToEnd-ADSource",
                              "connector_host": "host.example.com",
                              "connector_port": "389",
                              "connector_(boolean)useSSL": false,
                              "connectorFileUploadHistory": null
                            },
                            {
                              "id": "540698",
                              "name": "EndToEnd-AzureADSource",
                              "connector_host": null,
                              "connector_port": null,
                              "connector_(boolean)useSSL": null,
                              "connectorFileUploadHistory": null
                            },
                            {
                              "id": "540710",
                              "name": "EndToEnd-OpenLDAP",
                              "connector_host": "10.0.2.64",
                              "connector_port": "389",
                              "connector_(boolean)useSSL": false,
                              "connectorFileUploadHistory": null
                            },
                            {
                              "id": "540713",
                              "name": "Dynamic-ADSource",
                              "connector_host": "host.example.com",
                              "connector_port": "389",
                              "connector_(boolean)useSSL": false,
                              "connectorFileUploadHistory": null
                            },
                            {
                              "id": "540716",
                              "name": "EndToEnd-JdbcADSource",
                              "connector_host": "10.0.5.187",
                              "connector_port": "389",
                              "connector_(boolean)useSSL": false,
                              "connectorFileUploadHistory": null
                            },
                            {
                              "id": "540717",
                              "name": "EndToEnd-JdbcSource",
                              "connector_host": null,
                              "connector_port": null,
                              "connector_(boolean)useSSL": null,
                              "connectorFileUploadHistory": [
                                {
                                  "serviceId": "540717",
                                  "date": "2021-02-05T22:58:15Z",
                                  "file": "temp7081703651350031905mysql-connector-java-8.0.11.jar"
                                }
                              ]
                            }
                          ],
                          "jobs": [
                            {
                              "uuid": "872b622f-5ab5-4836-9172-e3bb77f05b2c",
                              "cookbook": "872b622f-5ab5-4836-9172-e3bb77f05b2c",
                              "state": "FINISHED",
                              "type": "VA_UPGRADE",
                              "targetId": "1528",
                              "managedProcessConfiguration": {
                                "charon": {
                                  "version": "345",
                                  "path": "sailpoint/charon",
                                  "description": null,
                                  "dependencies": null
                                },
                                "ccg": {
                                  "version": "415_583_79.0.0",
                                  "path": "sailpoint/ccg",
                                  "description": null,
                                  "dependencies": null
                                },
                                "toolbox": {
                                  "version": "6",
                                  "path": "sailpoint/toolbox",
                                  "description": null,
                                  "dependencies": null
                                },
                                "fluent": {
                                  "version": "50",
                                  "path": "fluent/va",
                                  "description": null,
                                  "dependencies": null
                                },
                                "va_agent": {
                                  "version": "89",
                                  "path": "sailpoint/va_agent",
                                  "description": null,
                                  "dependencies": null
                                }
                              }
                            }
                          ],
                          "queue": {
                            "name": "megapod-useast1-denali-lwt-cluster-1533",
                            "region": "us-east-1"
                          },
                          "maintenance": {
                            "window": "true",
                            "windowStartTime": "2021-07-29T00:00:00Z",
                            "windowClusterTime": "2021-07-29T01:35:24Z",
                            "windowFinishTime": "2021-07-29T04:00:00Z"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "status of the Managed Client",
                      "$ref": "#/components/schemas/ManagedClient/properties/status/allOf/0"
                    },
                    "type": {
                      "description": "type of the Managed Client",
                      "$ref": "#/components/schemas/ManagedClientStatus/properties/type"
                    },
                    "timestamp": {
                      "description": "timestamp on the Client Status update",
                      "type": "string",
                      "format": "date-time",
                      "example": "2020-01-01T00:00:00.000000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:managed-client-status:update"
            ]
          }
        ]
      }
    },
    "/managed-clusters/{id}": {
      "get": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Get a specified ManagedCluster.",
        "description": "Retrieve a ManagedCluster by ID.",
        "operationId": "getManagedCluster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ManagedCluster to get",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aClusterId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with ManagedCluster having the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Managed Cluster",
                  "type": "object",
                  "required": [
                    "id",
                    "clientType",
                    "ccgVersion"
                  ],
                  "properties": {
                    "id": {
                      "description": "ManagedCluster ID",
                      "type": "string",
                      "example": "aClusterId"
                    },
                    "name": {
                      "description": "ManagedCluster name",
                      "type": "string",
                      "example": "Managed Cluster Name"
                    },
                    "pod": {
                      "description": "ManagedCluster pod",
                      "type": "string",
                      "example": "megapod-useast1"
                    },
                    "org": {
                      "description": "ManagedCluster org",
                      "type": "string",
                      "example": "denali"
                    },
                    "type": {
                      "description": "ManagedCluster type",
                      "type": "string",
                      "example": "idn"
                    },
                    "configuration": {
                      "description": "ManagedProcess configuration map",
                      "type": "object",
                      "example": {
                        "clusterExternalId": "externalId",
                        "ccgVersion": "77.0.0"
                      }
                    },
                    "keyPair": {
                      "description": "key pair for the ManagedCluster",
                      "type": "object",
                      "properties": {
                        "publicKey": {
                          "description": "ManagedCluster publicKey",
                          "type": "string",
                          "example": "-----BEGIN PUBLIC KEY-----******-----END PUBLIC KEY-----"
                        },
                        "publicKeyThumbprint": {
                          "description": "ManagedCluster publicKeyThumbprint",
                          "type": "string",
                          "example": "6CMlaJIV44-xJxcB3CJBjDUUn54"
                        },
                        "publicKeyCertificate": {
                          "description": "ManagedCluster publicKeyCertificate",
                          "type": "string",
                          "example": "-----BEGIN CERTIFICATE-----****-----END CERTIFICATE-----"
                        }
                      }
                    },
                    "attributes": {
                      "description": "Specific Attributes for Configuring a ManagedCluster by Type",
                      "type": "object",
                      "properties": {
                        "queue": {
                          "description": "ManagedCluster keystore for sqsCluster type",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "ManagedCluster queue name",
                              "type": "string",
                              "example": "megapod-useast1-denali-lwt-cluster-1533"
                            },
                            "region": {
                              "description": "ManagedCluster queue aws region",
                              "type": "string",
                              "example": "us-east-1"
                            }
                          }
                        },
                        "keystore": {
                          "description": "ManagedCluster keystore for spConnectCluster type",
                          "type": "string",
                          "example": "/u3+7QAAAAIAAAABAAAAAQAvL3Byb3h5LWNsdXN0ZXIvMmM5MTgwODc3Yjg3MW"
                        }
                      }
                    },
                    "description": {
                      "description": "ManagedCluster description",
                      "type": "string",
                      "example": "A short description of the managed cluster."
                    },
                    "redis": {
                      "description": "Redis configuration for the ManagedCluster",
                      "type": "object",
                      "properties": {
                        "redisHost": {
                          "description": "ManagedCluster redisHost",
                          "type": "string",
                          "example": "megapod-useast1-shared-redis.cloud.sailpoint.com"
                        },
                        "redisPort": {
                          "description": "ManagedCluster redisPort",
                          "type": "integer",
                          "example": 6379
                        }
                      }
                    },
                    "clientType": {
                      "description": "type of client for the ManagedCluster",
                      "$ref": "#/components/schemas/ManagedClientStatus/properties/type"
                    },
                    "ccgVersion": {
                      "description": "CCG version used by the ManagedCluster",
                      "type": "string",
                      "example": "v01"
                    },
                    "pinnedConfig": {
                      "description": "boolean flag indiacting whether or not the cluster configuration is pinned",
                      "type": "boolean",
                      "default": false
                    },
                    "logConfiguration": {
                      "description": "client log configuration for the cluster",
                      "$ref": "#/paths/~1managed-clusters~1%7Bid%7D~1log-config/put/requestBody/content/application~1json/schema"
                    },
                    "operational": {
                      "description": "Whether or not the cluster is operational or not",
                      "type": "boolean",
                      "default": false
                    },
                    "status": {
                      "description": "Cluster status",
                      "type": "string",
                      "example": "NORMAL"
                    },
                    "publicKeyCertificate": {
                      "description": "Public key certificate",
                      "type": "string",
                      "example": "-----BEGIN CERTIFICATE-----TCCAb2gAwIBAgIBADANBgkqhkiG9w0BAQsFADAuMQ0wCwYDVQQD-----END CERTIFICATE-----"
                    },
                    "publicKeyThumbprint": {
                      "description": "Public key thumbprint",
                      "type": "string",
                      "example": "obc6pLiulGbtZ"
                    },
                    "publicKey": {
                      "description": "Public key",
                      "type": "string",
                      "example": "-----BEGIN PUBLIC KEY-----jANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3WgnsxP52MDgBTfHR+5n4-----END PUBLIC KEY-----"
                    },
                    "alertKey": {
                      "description": "Key describing any immediate cluster alerts",
                      "type": "string",
                      "example": "LIMITED_RESOURCES"
                    },
                    "clientIds": {
                      "type": "array",
                      "description": "List of clients in a cluster",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "1244",
                        "1245"
                      ]
                    },
                    "serviceCount": {
                      "description": "Number of services bound to a cluster",
                      "type": "integer",
                      "default": 0,
                      "example": 6
                    },
                    "ccId": {
                      "description": "CC ID only used in calling CC, will be removed without notice when Migration to CEGS is finished",
                      "type": "string",
                      "default": "0",
                      "example": "1533"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:managed-cluster:read"
            ]
          }
        ]
      }
    },
    "/managed-clusters/{id}/log-config": {
      "get": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "get ManagedCluster Log Configuration for a specified cluster",
        "description": "Get log configuration for a managed cluster.",
        "operationId": "getClientLogConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ManagedCluster to get log configuration for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aClusterId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ManagedCluster log configuration matching the given cluster ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1managed-clusters~1%7Bid%7D~1log-config/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:managed-cluster-log-config:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Update log configuration for a specified cluster.",
        "description": "Update log configuration for a managed cluster.",
        "operationId": "updateClientLogConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ManagedCluster to update log configuration for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aClusterId"
            }
          }
        ],
        "requestBody": {
          "description": "ClientLogConfiguration for the given ManagedCluster",
          "content": {
            "application/json": {
              "schema": {
                "description": "Client Runtime Logging Configuration",
                "type": "object",
                "required": [
                  "durationMinutes",
                  "rootLevel"
                ],
                "properties": {
                  "clientId": {
                    "description": "client ID of the Log configuration",
                    "type": "string",
                    "example": "aClientId"
                  },
                  "durationMinutes": {
                    "description": "duration in minutes for the log configuration to remain in effect before resetting to defaults",
                    "type": "integer",
                    "format": "int32",
                    "example": 120,
                    "default": 240,
                    "minimum": 5,
                    "maximum": 1440
                  },
                  "expiration": {
                    "description": "Expiration date-time of the log configuration request",
                    "type": "string",
                    "format": "date-time"
                  },
                  "rootLevel": {
                    "description": "Root Log level to apply",
                    "default": "INFO",
                    "example": "TRACE",
                    "type": "string",
                    "enum": [
                      "OFF",
                      "FATAL",
                      "ERROR",
                      "WARN",
                      "INFO",
                      "DEBUG",
                      "TRACE"
                    ]
                  },
                  "logLevels": {
                    "description": "Map of LogLevel by key",
                    "type": "object",
                    "additionalProperties": {
                      "default": "INFO",
                      "example": "TRACE",
                      "$ref": "#/paths/~1managed-clusters~1%7Bid%7D~1log-config/put/requestBody/content/application~1json/schema/properties/rootLevel"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with updated ClientLogConfiguration for the given ManagedCluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1managed-clusters~1%7Bid%7D~1log-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:managed-cluster-log-config:write"
            ]
          }
        ]
      }
    },
    "/managed-clusters": {
      "get": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Retrieve all Managed Clusters.",
        "description": "Retrieve all Managed Clusters for the current Org, based on request context.",
        "operationId": "getManagedClusters",
        "parameters": [
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filtering is supported for the following fields and operators:\n\n**operational**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a list of ManagedCluster.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1managed-clusters~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:managed-cluster:read"
            ]
          }
        ]
      }
    },
    "/mfa/{method}/config": {
      "get": {
        "operationId": "getMFAConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Get configuration of a MFA method",
        "description": "This API returns the configuration of a given MFA method. </br> A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:mfa-config:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "method",
            "schema": {
              "type": "string",
              "example": "okta-verify"
            },
            "required": true,
            "description": "The name of the MFA method. </br> The currently supported method name is okta-verify."
          }
        ],
        "responses": {
          "200": {
            "description": "MFA configuration of a given method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1mfa~1%7Bmethod%7D~1config/put/requestBody/content/application~1json/schema"
                },
                "example": {
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "dk778Y3QlA5UqocYpdU3rEkzrK2D497y",
                  "identityAttribute": "email"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setMFAConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Set configuration of a MFA method",
        "description": "This API sets the configuration of a given MFA method. </br> A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:mfa-config:write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "method",
            "schema": {
              "type": "string",
              "example": "okta-verify"
            },
            "required": true,
            "description": "The name of the MFA method. </br> The currently supported method name is okta-verify."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "If MFA method is enabled."
                  },
                  "host": {
                    "type": "string",
                    "description": "The server host name or IP address of the MFA provider.",
                    "example": "example.com"
                  },
                  "accessKey": {
                    "type": "string",
                    "description": "The secret key for authenticating requests to the MFA provider."
                  },
                  "identityAttribute": {
                    "type": "string",
                    "description": "Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.",
                    "example": "email"
                  }
                }
              },
              "example": {
                "enabled": true,
                "host": "www.example.com",
                "accessKey": "dk778Y3QlA5UqocYpdU3rEkzrK2D497y",
                "identityAttribute": "email"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA configuration of a given method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1mfa~1%7Bmethod%7D~1config/put/requestBody/content/application~1json/schema"
                },
                "example": {
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "dk778Y3QlA5UqocYpdU3rEkzrK2D497y",
                  "identityAttribute": "email"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/mfa/{method}/test": {
      "get": {
        "operationId": "testMFAConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Test configuration of a MFA method",
        "description": "This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. </br> A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:mfa-config:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "method",
            "schema": {
              "type": "string",
              "example": "okta-verify"
            },
            "required": true,
            "description": "The name of the MFA method. </br> The currently supported method name is okta-verify."
          }
        ],
        "responses": {
          "200": {
            "description": "The result of configuration test for the MFA provider.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response model for configuration test of a given MFA method",
                  "type": "object",
                  "properties": {
                    "state": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ],
                      "description": "The configuration test result.",
                      "example": "SUCCESS",
                      "readOnly": true
                    },
                    "error": {
                      "type": "string",
                      "example": "MFA Method is disabled.",
                      "description": "The error message to indicate the failure of configuration test.",
                      "readOnly": true
                    }
                  }
                },
                "example": {
                  "state": "SUCCESS",
                  "error": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/notification-template-defaults": {
      "get": {
        "operationId": "listNotificationTemplateDefaults",
        "tags": [
          "Notifications"
        ],
        "summary": "List Notification Template Defaults",
        "description": "This lists the default templates used for notifications, such as emails from IdentityNow. Since this is a beta feature, it doesn't include all the templates.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**key**: *eq, in*\n\n**medium**: *eq*\n\n**locale**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the default template objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "example": "cloud_manual_work_item_summary"
                      },
                      "name": {
                        "type": "string",
                        "example": "Task Manager Subscription"
                      },
                      "medium": {
                        "type": "string",
                        "description": "The message medium. More mediums may be added in the future.",
                        "enum": [
                          "EMAIL",
                          "PHONE",
                          "SMS",
                          "SLACK",
                          "TEAMS"
                        ],
                        "example": "EMAIL"
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale for the message text, a BCP 47 language tag.",
                        "example": "en"
                      },
                      "subject": {
                        "type": "string",
                        "example": "You have $numberOfPendingTasks $taskTasks to complete in ${__global.productName}."
                      },
                      "header": {
                        "type": "string",
                        "example": "Dear $__recipient.name,<br/>"
                      },
                      "body": {
                        "type": "string",
                        "example": "Please go to the task manager"
                      },
                      "footer": {
                        "type": "string",
                        "example": "<br/>Thanks,<br/> The $__global.productName Team<br/>"
                      },
                      "from": {
                        "type": "string",
                        "example": "$__global.emailFromAddress"
                      },
                      "replyTo": {
                        "type": "string",
                        "example": "$__global.emailFromAddress"
                      },
                      "description": {
                        "type": "string",
                        "example": "Daily digest - sent if number of outstanding tasks for task owner > 0"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/notification-templates": {
      "get": {
        "operationId": "listNotificationTemplates",
        "tags": [
          "Notifications"
        ],
        "summary": "List Notification Templates For Your Site",
        "description": "This lists the templates that you have modified for your site. Since this is a beta feature, it doesn't include all your modified templates.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**key**: *eq, in*\n\n**medium**: *eq*\n\n**locale**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of template objects for your site",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1notification-templates/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createNotificationTemplate",
        "tags": [
          "Notifications"
        ],
        "summary": "Create Notification Template",
        "description": "This creates a template for your site",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "example": "cloud_manual_work_item_summary"
                  },
                  "name": {
                    "type": "string",
                    "example": "Task Manager Subscription"
                  },
                  "medium": {
                    "type": "string",
                    "description": "The message medium. More mediums may be added in the future.",
                    "enum": [
                      "EMAIL",
                      "PHONE",
                      "SMS",
                      "SLACK",
                      "TEAMS"
                    ],
                    "example": "EMAIL"
                  },
                  "locale": {
                    "type": "string",
                    "description": "The locale for the message text, a BCP 47 language tag.",
                    "example": "en"
                  },
                  "subject": {
                    "type": "string",
                    "example": "You have $numberOfPendingTasks $taskTasks to complete in ${__global.productName}."
                  },
                  "header": {
                    "type": "string",
                    "example": "Dear $__recipient.name,<br/>"
                  },
                  "body": {
                    "type": "string",
                    "example": "Please go to the task manager"
                  },
                  "footer": {
                    "type": "string",
                    "example": "<br/>Thanks,<br/> The $__global.productName Team<br/>"
                  },
                  "from": {
                    "type": "string",
                    "example": "$__global.emailFromAddress"
                  },
                  "replyTo": {
                    "type": "string",
                    "example": "$__global.emailFromAddress"
                  },
                  "description": {
                    "type": "string",
                    "example": "Daily digest - sent if number of outstanding tasks for task owner > 0"
                  },
                  "id": {
                    "type": "string",
                    "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b",
                    "description": "This is auto-generated."
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this template is created. This is auto-generated.",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this template was last modified. This is auto-generated.",
                    "example": "2020-01-01T00:00:00.000000Z"
                  }
                },
                "required": [
                  "key",
                  "medium",
                  "locale"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A template object for your site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1notification-templates/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/notification-templates/{id}": {
      "get": {
        "operationId": "getNotificationTemplate",
        "tags": [
          "Notifications"
        ],
        "summary": "Get Notification Template By Id",
        "description": "This gets a template that you have modified for your site by Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Notification Template",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A template object for your site",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1notification-templates/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/notification-templates/bulk-delete": {
      "post": {
        "operationId": "bulkDeleteNotificationTemplates",
        "tags": [
          "Notifications"
        ],
        "summary": "Bulk Delete Notification Templates",
        "description": "This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, you can only delete a subset of your notifications, i.e. ones that show up in the list call.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "example": "cloud_manual_work_item_summary"
                    },
                    "medium": {
                      "type": "string",
                      "enum": [
                        "EMAIL",
                        "PHONE",
                        "SMS"
                      ],
                      "example": "EMAIL"
                    },
                    "locale": {
                      "type": "string",
                      "description": "The locale for the message text, a BCP 47 language tag.",
                      "example": "en"
                    }
                  },
                  "required": [
                    "key"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/oauth-clients": {
      "get": {
        "operationId": "listOauthClients",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "List OAuth Clients",
        "description": "This gets a list of OAuth clients.\nRequest will require the following security scope:\n- 'idn:oathkeeper-client-list:read'",
        "responses": {
          "200": {
            "description": "List of OAuth clients.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Create OAuth Client",
        "description": "This creates an OAuth client.\nRequest will require the following security scope:\n- 'idn:oathkeeper-client:create' - 'idn:oathkeeper-internal-client:create'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "description": "The name of the business the API Client should belong to",
                    "example": "Acme-Solar"
                  },
                  "homepageUrl": {
                    "type": "string",
                    "description": "The homepage URL associated with the owner of the API Client",
                    "example": "http://localhost:12345"
                  },
                  "name": {
                    "type": "string",
                    "description": "A human-readable name for the API Client",
                    "example": "Demo API Client"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the API Client",
                    "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
                  },
                  "accessTokenValiditySeconds": {
                    "type": "string",
                    "description": "The number of seconds an access token generated for this API Client is valid for",
                    "example": 750
                  },
                  "refreshTokenValiditySeconds": {
                    "type": "string",
                    "description": "The number of seconds a refresh token generated for this API Client is valid for",
                    "example": 86400
                  },
                  "redirectUris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of the approved redirect URIs. Provide one or more URIs when assigning the AUTHORIZATION_CODE grant type to a new OAuth Client.",
                    "example": [
                      "http://localhost:12345"
                    ]
                  },
                  "grantTypes": {
                    "type": "array",
                    "items": {
                      "description": "OAuth2 Grant Type",
                      "type": "string",
                      "example": "CLIENT_CREDENTIALS",
                      "enum": [
                        "CLIENT_CREDENTIALS",
                        "AUTHORIZATION_CODE",
                        "REFRESH_TOKEN"
                      ]
                    },
                    "description": "A list of OAuth 2.0 grant types this API Client can be used with",
                    "example": [
                      "AUTHORIZATION_CODE",
                      "CLIENT_CREDENTIALS",
                      "REFRESH_TOKEN"
                    ]
                  },
                  "accessType": {
                    "description": "The access type (online or offline) of this API Client",
                    "example": "OFFLINE",
                    "type": "string",
                    "enum": [
                      "ONLINE",
                      "OFFLINE"
                    ]
                  },
                  "type": {
                    "description": "The type of the API Client (public or confidential)",
                    "example": "CONFIDENTIAL",
                    "type": "string",
                    "enum": [
                      "CONFIDENTIAL",
                      "PUBLIC"
                    ]
                  },
                  "internal": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client can be used for requests internal within the product.",
                    "example": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client is enabled for use",
                    "example": true
                  },
                  "strongAuthSupported": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client supports strong authentication",
                    "example": false
                  },
                  "claimsSupported": {
                    "type": "boolean",
                    "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
                    "example": false
                  }
                },
                "required": [
                  "name",
                  "description",
                  "accessTokenValiditySeconds",
                  "grantTypes",
                  "accessType",
                  "enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the OAuth client",
                      "example": "2c9180835d2e5168015d32f890ca1581"
                    },
                    "secret": {
                      "type": "string",
                      "description": "Secret of the OAuth client (This field is only returned on the intial create call.)",
                      "example": "5c32dd9b21adb51c77794d46e71de117a1d0ddb36a7ff941fa28014ab7de2cf3"
                    },
                    "businessName": {
                      "type": "string",
                      "description": "The name of the business the API Client should belong to",
                      "example": "Acme-Solar"
                    },
                    "homepageUrl": {
                      "type": "string",
                      "description": "The homepage URL associated with the owner of the API Client",
                      "example": "http://localhost:12345"
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable name for the API Client",
                      "example": "Demo API Client"
                    },
                    "description": {
                      "type": "string",
                      "description": "A description of the API Client",
                      "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
                    },
                    "accessTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds an access token generated for this API Client is valid for",
                      "example": 750
                    },
                    "refreshTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds a refresh token generated for this API Client is valid for",
                      "example": 86400
                    },
                    "redirectUris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of the approved redirect URIs used with the authorization_code flow",
                      "example": [
                        "http://localhost:12345"
                      ]
                    },
                    "grantTypes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/grantTypes/items"
                      },
                      "description": "A list of OAuth 2.0 grant types this API Client can be used with",
                      "example": [
                        "AUTHORIZATION_CODE",
                        "CLIENT_CREDENTIALS",
                        "REFRESH_TOKEN"
                      ]
                    },
                    "accessType": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/accessType",
                      "description": "The access type (online or offline) of this API Client",
                      "example": "OFFLINE"
                    },
                    "type": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/type",
                      "description": "The type of the API Client (public or confidential)",
                      "example": "CONFIDENTIAL"
                    },
                    "internal": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client can be used for requests internal to IDN",
                      "example": false
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client is enabled for use",
                      "example": true
                    },
                    "strongAuthSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports strong authentication",
                      "example": false
                    },
                    "claimsSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
                      "example": false
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was created",
                      "example": "2017-07-11T18:45:37.098Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was last updated",
                      "example": "2018-06-25T20:22:28.104Z"
                    }
                  },
                  "required": [
                    "id",
                    "secret",
                    "businessName",
                    "homepageUrl",
                    "name",
                    "description",
                    "accessTokenValiditySeconds",
                    "refreshTokenValiditySeconds",
                    "redirectUris",
                    "grantTypes",
                    "accessType",
                    "type",
                    "internal",
                    "enabled",
                    "strongAuthSupported",
                    "claimsSupported",
                    "created",
                    "modified"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/oauth-clients/{id}": {
      "get": {
        "operationId": "getOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Get OAuth Client",
        "description": "This gets details of an OAuth client.\nRequest will require the following security scope:\n- 'idn:oathkeeper-client:read'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the OAuth client",
                      "example": "2c9180835d2e5168015d32f890ca1581"
                    },
                    "businessName": {
                      "type": "string",
                      "description": "The name of the business the API Client should belong to",
                      "example": "Acme-Solar"
                    },
                    "homepageUrl": {
                      "type": "string",
                      "description": "The homepage URL associated with the owner of the API Client",
                      "example": "http://localhost:12345"
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable name for the API Client",
                      "example": "Demo API Client"
                    },
                    "description": {
                      "type": "string",
                      "description": "A description of the API Client",
                      "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
                    },
                    "accessTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds an access token generated for this API Client is valid for",
                      "example": 750
                    },
                    "refreshTokenValiditySeconds": {
                      "type": "string",
                      "description": "The number of seconds a refresh token generated for this API Client is valid for",
                      "example": 86400
                    },
                    "redirectUris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of the approved redirect URIs used with the authorization_code flow",
                      "example": [
                        "http://localhost:12345"
                      ]
                    },
                    "grantTypes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/grantTypes/items"
                      },
                      "description": "A list of OAuth 2.0 grant types this API Client can be used with",
                      "example": [
                        "AUTHORIZATION_CODE",
                        "CLIENT_CREDENTIALS",
                        "REFRESH_TOKEN"
                      ]
                    },
                    "accessType": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/accessType",
                      "description": "The access type (online or offline) of this API Client",
                      "example": "OFFLINE"
                    },
                    "type": {
                      "$ref": "#/paths/~1oauth-clients/post/requestBody/content/application~1json/schema/properties/type",
                      "description": "The type of the API Client (public or confidential)",
                      "example": "CONFIDENTIAL"
                    },
                    "internal": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client can be used for requests internal to IDN",
                      "example": false
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client is enabled for use",
                      "example": true
                    },
                    "strongAuthSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports strong authentication",
                      "example": false
                    },
                    "claimsSupported": {
                      "type": "boolean",
                      "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
                      "example": false
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was created",
                      "example": "2017-07-11T18:45:37.098Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when the API Client was last updated",
                      "example": "2018-06-25T20:22:28.104Z"
                    }
                  },
                  "required": [
                    "id",
                    "businessName",
                    "homepageUrl",
                    "name",
                    "description",
                    "accessTokenValiditySeconds",
                    "refreshTokenValiditySeconds",
                    "redirectUris",
                    "grantTypes",
                    "accessType",
                    "type",
                    "internal",
                    "enabled",
                    "strongAuthSupported",
                    "claimsSupported",
                    "created",
                    "modified"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Delete OAuth Client",
        "description": "This deletes an OAuth client.\nRequest will require the following security scopes:\n- 'idn:oathkeeper-client:delete' - 'idn:oathkeeper-internal-client:delete'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchOauthClient",
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Patch OAuth Client",
        "description": "This performs a targeted update to the field(s) of an OAuth client.\nRequest will require a security scope of \n'idn:oathkeeper-client:update'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* tenant\n* businessName\n* homepageUrl\n* name\n* description\n* accessTokenValiditySeconds\n* refreshTokenValiditySeconds\n* redirectUris\n* grantTypes\n* accessType\n* enabled\n* strongAuthSupported\n* claimsSupported\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/strongAuthSupported",
                  "value": true
                },
                {
                  "op": "replace",
                  "path": "/businessName",
                  "value": "acme-solar"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the OAuth client's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1oauth-clients~1%7Bid%7D/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/outlier-summaries": {
      "get": {
        "operationId": "getOutlierSnapshots",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "IAI Identity Outliers Summary",
        "description": "This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier\nRequires authorization scope of 'iai:outliers-management:read'",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ]
            }
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results)\nFiltering is supported for the following field and operators: \n**snapshotDate**: *ge, le*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#sorting-results)\nSorting is supported for the following field: **snapshotDate**",
            "example": "snapshotDate",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object is a summary to give high level statistics/counts of outliers",
            "headers": {
              "X-Total-Count": {
                "description": "The total result count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "LOW_SIMILARITY",
                          "STRUCTURAL"
                        ],
                        "description": "The type of outlier summary",
                        "example": "LOW_SIMILARITY"
                      },
                      "snapshotDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date the bulk outlier detection ran/snapshot was created",
                        "example": "2021-05-01T18:40:35.772Z"
                      },
                      "totalOutliers": {
                        "type": "integer",
                        "description": "Total number of outliers for the customer making the request",
                        "example": 50
                      },
                      "totalIdentities": {
                        "type": "integer",
                        "description": "Total number of identities for the customer making the request",
                        "example": 5000
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/outlier-summaries/latest": {
      "get": {
        "operationId": "getLatestOutlierSnapshots",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "IAI Identity Outliers Latest Summary",
        "description": "This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier\nRequires authorization scope of 'iai:outliers-management:read'",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object is a summary to give high level statistics/counts of outliers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "LOW_SIMILARITY",
                          "STRUCTURAL"
                        ],
                        "description": "The type of outlier summary",
                        "example": "LOW_SIMILARITY"
                      },
                      "snapshotDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date the bulk outlier detection ran/snapshot was created",
                        "example": "2021-05-01T18:40:35.772Z"
                      },
                      "totalOutliers": {
                        "type": "integer",
                        "description": "Total number of outliers for the customer making the request",
                        "example": 50
                      },
                      "totalIdentities": {
                        "type": "integer",
                        "description": "Total number of identities for the customer making the request",
                        "example": 5000
                      },
                      "totalIgnored": {
                        "type": "integer",
                        "description": "Total number of ignored outliers",
                        "example": 10
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/outliers": {
      "get": {
        "operationId": "getOutliers",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "IAI Get Identity Outliers",
        "description": "This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information\nRequires authorization scope of 'iai:outliers-management:read'",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ],
              "example": "LOW_SIMILARITY"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string",
              "example": "attributes.displayName sw \"John\" and certStatus eq \"false\""
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results)\n\nFiltering is supported for the following Entitlement fields and operators:\n**attributes**: *eq, sw, co, in*\n\n**firstDetectionDate**: *ge, le*\n\n**certStatus**: *eq*\n\n**ignored**: *eq*\n\n**score**: *ge, le*"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated",
              "example": "sorters=attributes.displayName,firstDetectionDate,-score"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nSorting is supported for the following fields: **firstDetectionDate, attributes, score**"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object contains information about outliers",
            "headers": {
              "X-Total-Count": {
                "description": "The total result count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The identity's unique identifier for the outlier record",
                        "example": "5be33d3e-c54d-4ed7-af73-2380543e8283"
                      },
                      "identityId": {
                        "type": "string",
                        "description": "The ID of the identity that is detected as an outlier",
                        "example": "5be33d3e-c54d-4ed7-af73-2380543e8283"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "LOW_SIMILARITY",
                          "STRUCTURAL"
                        ],
                        "description": "The type of outlier summary",
                        "example": "LOW_SIMILARITY"
                      },
                      "firstDetectionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The first date the outlier was detected",
                        "example": "2021-05-01T18:40:35.772Z"
                      },
                      "latestDetectionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The most recent date the outlier was detected",
                        "example": "2021-05-03T18:40:35.772Z"
                      },
                      "ignored": {
                        "type": "boolean",
                        "description": "Flag whether or not the outlier has been ignored",
                        "example": false
                      },
                      "attributes": {
                        "type": "object",
                        "description": "Object containing mapped identity attributes",
                        "example": {
                          "displayName": "John Smith",
                          "jobTitle": "Software Engineer",
                          "department": "Engineering"
                        }
                      },
                      "score": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The outlier score determined by the detection engine",
                        "example": 92
                      },
                      "unignoreType": {
                        "type": "string",
                        "enum": [
                          "MANUAL",
                          "AUTOMATIC"
                        ],
                        "description": "Enum value of if the outlier manually or automatically un-ignored. Will be NULL if outlier is not ignored",
                        "example": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/outliers/ignore": {
      "post": {
        "operationId": "ignoreOutliers",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "IAI Identity Outliers Ignore",
        "description": "This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful.\nRequires authorization scope of 'iai:outliers-management:update'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of identity IDs to ignore from outlier listing",
                "example": [
                  "abc123def456",
                  "ghi789jkl012"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content - indicates the request was successful but there is no content to be returned in the response.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/outliers/unignore": {
      "post": {
        "operationId": "unIgnoreOutliers",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "IAI Identity Outliers Unignore",
        "description": "This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful.\nRequires authorization scope of 'iai:outliers-management:update'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of identity IDs to un-ignore from outlier listing",
                "example": [
                  "abc123def456",
                  "ghi789jkl012"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/outliers/export": {
      "get": {
        "operationId": "exportOutliersZip",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "IAI Identity Outliers Export",
        "description": "This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes)\nRequires authorization scope of 'iai:outliers-management:read'",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns zip of 2 CSVs to download. 1 CSV for ignored outliers and 1 for non-ignored outliers",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/password-dictionary": {
      "get": {
        "operationId": "getPasswordDictionary",
        "tags": [
          "Password Dictionary"
        ],
        "summary": "Get Password Dictionary",
        "description": "This gets password dictionary for the organization.\nA token with ORG_ADMIN authority is required to call this API.",
        "responses": {
          "200": {
            "description": "\nThe password dictionary file can contain lines that are:\n1. comment lines - the first character is '#', can be 128 Unicode codepoints in length, and are ignored during processing\n2. empty lines\n3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines\n4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;\n        maximum length of the line is 128 Unicode codepoints\n\n\nPassword dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).\n Password dict file must contain UTF-8 characters only.\n\n# Sample password text file\n\n```\n\n# Password dictionary small test file\n\nlocale=en_US\n\n# Password dictionary prohibited words\n\nqwerty\nabcd\naaaaa\npassword\nqazxsws\n\n```",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "head": {
        "operationId": "getPasswordDictionaryFileStatus",
        "tags": [
          "Password Dictionary"
        ],
        "summary": "Get Password Dictionary Status",
        "description": "Used to check the status of password dictionary.\nA token with ORG_ADMIN authority is required to call this API.",
        "responses": {
          "200": {
            "description": "Password dictionary exists"
          },
          "404": {
            "description": "Password dictionary does not exist"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePasswordDictionary",
        "tags": [
          "Password Dictionary"
        ],
        "summary": "Update Password Dictionary",
        "description": "This updates password dictionary for the organization.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "\nThe password dictionary file can contain lines that are:\n1. comment lines - the first character is '#', can be 128 Unicode codepoints in length, and are ignored during processing\n2. empty lines\n3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines\n4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;\n        maximum length of the line is 128 Unicode codepoints\n\n\nPassword dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).\n Password dict file must contain UTF-8 characters only.\n\n# Sample password text file\n\n```\n\n# Password dictionary small test file\n\nlocale=en_US\n\n# Password dictionary prohibited words\n\nqwerty\nabcd\naaaaa\npassword\nqazxsws\n\n```",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated."
          },
          "201": {
            "description": "Created."
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/query-password-info": {
      "post": {
        "operationId": "queryPasswordInfo",
        "tags": [
          "Password Management"
        ],
        "summary": "Query Password Info",
        "description": "This API is used to query password related information. A token with API authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userName": {
                    "type": "string",
                    "description": "The login name of the user",
                    "example": "Abby.Smith"
                  },
                  "sourceName": {
                    "type": "string",
                    "description": "The display name of the source",
                    "example": "My-AD"
                  }
                }
              },
              "example": {
                "userName": "Abby.Smith",
                "sourceName": "My-AD"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "identityId": {
                      "type": "string",
                      "example": "2c918085744fec4301746f9a5bce4605"
                    },
                    "sourceId": {
                      "type": "string",
                      "example": "2c918083746f642c01746f990884012a"
                    },
                    "publicKeyId": {
                      "type": "string",
                      "example": "N2M1OTJiMGEtMDJlZS00ZWU3LTkyYTEtNjA5YmI5NWE3ZWVh"
                    },
                    "publicKey": {
                      "type": "string",
                      "description": "User's public key with Base64 encoding",
                      "example": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGFkWi2J75TztpbaPKd36bJnIB3J8gZ6UcoS9oSDYsqBzPpTsfZXYaEf4Y4BKGgJIXmE/lwhwuj7mU1itdZ2qTSNFtnXA8Fn75c3UUkk+h+wdZbkuSmqlsJo3R1OnJkwkJggcAy9Jvk9jlcrNLWorpQ1w9raUvxtvfgkSdq153KxotenQ1HciSyZ0nA/Kw0UaucLnho8xdRowZs11afXGXA9IT9H6D8T6zUdtSxm0nAyH+mluma5LdTfaM50W3l/L8q56Vrqmx2pZIiwdx/0+g3Y++jV70zom0ZBkC1MmSoLMrQYG5OICNjr72f78B2PaGXfarQHqARLjKpMVt9YIQIDAQAB"
                    },
                    "accounts": {
                      "type": "array",
                      "description": "Account info related to queried identity and source",
                      "items": {
                        "type": "object",
                        "properties": {
                          "accountId": {
                            "type": "string",
                            "description": "Account ID of the account. This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350",
                            "example": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
                          },
                          "accountName": {
                            "type": "string",
                            "description": "Display name of the account. This is specified per account schema in the source configuration. It is used to display name of the account. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-Name-for/ta-p/74008",
                            "example": "Abby.Smith"
                          }
                        }
                      }
                    },
                    "policies": {
                      "type": "array",
                      "description": "Password constraints",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "passwordRepeatedChar is 3",
                        "passwordMinAlpha is 1",
                        "passwordMinLength is 5",
                        "passwordMinNumeric is 1"
                      ]
                    }
                  }
                },
                "example": {
                  "identityId": "2c918085744fec4301746f9a5bce4611",
                  "sourceId": "2c918083746f642c01746f9908840111",
                  "publicKeyId": "N2M1OTJiMGEtMDJlZS00ZWU3LTkyYTEtNjA5YmI5NWE3ZWVA",
                  "publicKey": "AIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGFkWi2J75TztpbaPKd36bJnIB3J8gZ6UcoS9oSDYsqBzPpTsfZXYaEf4Y4BKGgJIXmE/lwhwuj7mU1itdZ2qTSNFtnXA8Fn75c3UUkk+h+wdZbkuSmqlsJo3R1OnJkwkJggcAy9Jvk9jlcrNLWorpQ1w9raUvxtvfgkSdq153KxotenQ1HciSyZ0nA/Kw0UaucLnho8xdRowZs11afXGXA9IT9H6D8T6zUdtSxm0nAyH+mluma5LdTfaM50W3l/L8q56Vrqmx2pZIiwdx/0+g3Y++jV70zom0ZBkC1MmSoLMrQYG5OICNjr72f78B2PaGXfarQHqARLjKpMVt9YIQIDAQAB",
                  "accounts": [
                    {
                      "accountId": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com",
                      "accountName": "Abby.Smith"
                    }
                  ],
                  "policies": [
                    "passwordRepeatedChar is 3",
                    "passwordMinAlpha is 1",
                    "passwordMinLength is 5",
                    "passwordMinNumeric is 1"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/set-password": {
      "post": {
        "operationId": "setPassword",
        "tags": [
          "Password Management"
        ],
        "summary": "Set Identity's Password",
        "description": "This API is used to set a password for an identity. The password can only be set by the actual identity owner or by a trusted API client application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identityId": {
                    "type": "string",
                    "description": "The identity ID that requested the password change",
                    "example": "8a807d4c73c545510173c545f0a002ff"
                  },
                  "encryptedPassword": {
                    "type": "string",
                    "description": "The RSA encrypted password",
                    "example": "XzN+YwKgr2C+InkMYFMBG3UtjMEw5ZIql/XFlXo8cJNeslmkplx6vn4kd4/43IF9STBk5RnzR6XmjpEO+FwHDoiBwYZAkAZK/Iswxk4OdybG6Y4MStJCOCiK8osKr35IMMSV/mbO4wAeltoCk7daTWzTGLiI6UaT5tf+F2EgdjJZ7YqM8W8r7aUWsm3p2Xt01Y46ZRx0QaM91QruiIx2rECFT2pUO0wr+7oQ77jypATyGWRtADsu3YcvCk/6U5MqCnXMzKBcRas7NnZdSL/d5H1GglVGz3VLPMaivG4/oL4chOMmFCRl/zVsGxZ9RhN8rxsRGFFKn+rhExTi+bax3A=="
                  },
                  "publicKeyId": {
                    "type": "string",
                    "description": "The encryption key ID",
                    "example": "YWQ2NjQ4MTItZjY0NC00MWExLWFjMjktOGNmMzU3Y2VlNjk2"
                  },
                  "accountId": {
                    "type": "string",
                    "description": "Account ID of the account This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350",
                    "example": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
                  },
                  "sourceId": {
                    "type": "string",
                    "description": "The ID of the source for which identity is requesting the password change",
                    "example": "8a807d4c73c545510173c545d4b60246"
                  }
                }
              },
              "example": {
                "identityId": "8a807d4c73c545510173c545f0a002ff",
                "encryptedPassword": "GIAP7TaAg7Y2EJtFojokBDvHQ/iXF3qk0z0+eLusqXMSkEhAfr34GydFLy+BM2uZB94cwbTYKi9rRrCRRdh8610VeqpRDjhuc28nOPYqTJOx09IGJdr8dl4mbhC1f21JCqMBBrFSA4VQQvd6OMVsceoXTjDI0aKahRYNjlMlsOuaIUZeNQxWBydLuR6vYG3qAKEPCzYZbvyYuBUylUWArfqwV4dgwKGDgDkTLBkQU9LVu3rssc+BXaex6l6JcBDiPg7wvKD1G3lZ+BaGrMknbx3j0T2Uivg+HxwTf7PmtAua6O9M7F984c79KM+sYFTU37MAdlWZu/cy+w2DdHVdCg==",
                "publicKeyId": "YWQ2NjQ4MTItZjY0NC00MWExLWFjMjktOGNmMzU3Y2VlNjk2",
                "accountId": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com",
                "sourceId": "8a807d4c73c545510173c545d4b60246"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Reference to the password change.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "requestId": {
                      "type": "string",
                      "nullable": true,
                      "description": "The password change request ID",
                      "example": "089899f13a8f4da7824996191587bab9"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "IN_PROGRESS",
                        "FINISHED",
                        "FAILED"
                      ],
                      "description": "Password change state"
                    }
                  }
                },
                "examples": {
                  "Password change is in progress": {
                    "value": {
                      "state": "IN_PROGRESS",
                      "requestId": "089899f13a8f4da7824996191587bab9"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/password-change-status/{id}": {
      "get": {
        "operationId": "getPasswordChangeStatus",
        "tags": [
          "Password Management"
        ],
        "summary": "Get Password Change Request Status",
        "description": "This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the password change request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "requestId": {
                      "type": "string",
                      "nullable": true,
                      "description": "The password change request ID",
                      "example": "089899f13a8f4da7824996191587bab9"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "IN_PROGRESS",
                        "FINISHED",
                        "FAILED"
                      ],
                      "description": "Password change state"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The errors during the password change request"
                    },
                    "sourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of source IDs in the password change request"
                    }
                  }
                },
                "example": {
                  "status": "IN_PROCESS",
                  "reqeustId": "089899f13a8f4da7824996191587bab9",
                  "error": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/password-sync-groups": {
      "get": {
        "operationId": "getPasswordSyncGroups",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Get Password Sync Group List",
        "description": "This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of password sync groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1password-sync-groups/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Create Password Sync Group",
        "description": "This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "ID of the sync group",
                    "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
                  },
                  "name": {
                    "description": "Name of the sync group",
                    "type": "string",
                    "example": "Password Sync Group 1"
                  },
                  "passwordPolicyId": {
                    "type": "string",
                    "example": "2c91808d744ba0ce01746f93b6204501"
                  },
                  "sourceIds": {
                    "type": "array",
                    "description": "List of password managed sources IDs",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2c918084660f45d6016617daa9210584",
                      "2c918084660f45d6016617daa9210500"
                    ]
                  }
                }
              },
              "example": {
                "name": "Password Sync Group 2",
                "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                "sourceIds": [
                  "2c918084660f45d6016617daa9210584",
                  "2c918084660f45d6016617daa9210500"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password sync group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1password-sync-groups/post/requestBody/content/application~1json/schema"
                },
                "example": {
                  "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                  "name": "Password Sync Group 2",
                  "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                  "sourceIds": [
                    "2c918084660f45d6016617daa9210584",
                    "2c918084660f45d6016617daa9210500"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/password-sync-groups/{id}": {
      "get": {
        "operationId": "getPasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Get Password Sync Group by ID",
        "description": "This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of password sync group to retrieve.",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the password sync group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1password-sync-groups/post/requestBody/content/application~1json/schema"
                },
                "example": {
                  "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                  "name": "Password Sync Group 1",
                  "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                  "sourceIds": [
                    "2c918084660f45d6016617daa9210584",
                    "2c918084660f45d6016617daa9210500"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Update Password Sync Group by ID",
        "description": "This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of password sync group to update.",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1password-sync-groups/post/requestBody/content/application~1json/schema"
              },
              "example": {
                "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                "name": "Password Sync Group 2",
                "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                "sourceIds": [
                  "2c918084660f45d6016617daa9210584",
                  "2c918084660f45d6016617daa9210500"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password sync group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1password-sync-groups/post/requestBody/content/application~1json/schema"
                },
                "example": {
                  "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                  "name": "Password Sync Group 2",
                  "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                  "sourceIds": [
                    "2c918084660f45d6016617daa9210584",
                    "2c918084660f45d6016617daa9210500"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deletePasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Delete Password Sync Group by ID",
        "description": "This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of password sync group to delete.",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/password-org-config": {
      "get": {
        "operationId": "getPasswordOrgConfig",
        "tags": [
          "Password Configuration"
        ],
        "summary": "Get Password Org Config",
        "description": "This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of 'idn:password-org-config:read'",
        "responses": {
          "200": {
            "description": "Reference to the password org config.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1password-org-config/put/requestBody/content/application~1json/schema"
                },
                "example": {
                  "customInstructionsEnabled": true,
                  "digitTokenDurationMinutes": 9,
                  "digitTokenEnabled": false,
                  "digitTokenLength": 6
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePasswordOrgConfig",
        "tags": [
          "Password Configuration"
        ],
        "summary": "Update Password Org Config",
        "description": "This API updates the password org config for specified fields. Other fields will keep original value. Requires ORG_ADMIN, API role or authorization scope of 'idn:password-org-config:write'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customInstructionsEnabled": {
                    "type": "boolean",
                    "description": "Indicator whether custom password instructions feature is enabled. The default value is false."
                  },
                  "digitTokenEnabled": {
                    "type": "boolean",
                    "description": "Indicator whether \"digit token\" feature is enabled. The default value is false.",
                    "example": true
                  },
                  "digitTokenDurationMinutes": {
                    "type": "integer",
                    "description": "The duration of \"digit token\" in minutes. The default value is 5.",
                    "example": 10
                  },
                  "digitTokenLength": {
                    "type": "integer",
                    "description": "The length of \"digit token\". The default value is 6.",
                    "example": 9
                  }
                }
              },
              "example": {
                "digitTokenEnabled": true,
                "digitTokenDurationMinutes": 12
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password org config.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1password-org-config/put/requestBody/content/application~1json/schema"
                },
                "example": {
                  "customInstructionsEnabled": true,
                  "digitTokenDurationMinutes": 12,
                  "digitTokenEnabled": true,
                  "digitTokenLength": 6
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPasswordOrgConfig",
        "tags": [
          "Password Configuration"
        ],
        "summary": "Create Password Org Config",
        "description": "This API creates the password org config. Unspecified fields will use default value. Requires ORG_ADMIN, API role or authorization scope of 'idn:password-org-config:write'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1password-org-config/put/requestBody/content/application~1json/schema"
              },
              "example": {
                "customInstructionsEnabled": true,
                "digitTokenEnabled": true,
                "digitTokenDurationMinutes": 12,
                "digitTokenLength": 9
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password org config.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1password-org-config/put/requestBody/content/application~1json/schema"
                },
                "example": {
                  "customInstructionsEnabled": true,
                  "digitTokenDurationMinutes": 9,
                  "digitTokenEnabled": true,
                  "digitTokenLength": 12
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/peer-group-strategies/{strategy}/identity-outliers": {
      "get": {
        "operationId": "getOutliers",
        "tags": [
          "IAI Peer Group Strategies"
        ],
        "summary": "Identity Outliers List",
        "description": "This API will be used by Identity Governance systems to identify identities that are not included in an organization's peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.",
        "parameters": [
          {
            "in": "path",
            "name": "strategy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The strategy used to create peer groups. Currently, 'entitlement' is supported.",
            "example": "entitlement"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities that are not included in peer groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeerGroupMember"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/personal-access-tokens": {
      "get": {
        "operationId": "listPersonalAccessTokens",
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "List Personal Access Tokens",
        "description": "This gets a collection of personal access tokens associated with the optional <code>owner-id</code>. </br> query parameter. If the <code>owner-id</code> query parameter is omitted, all personal access tokens </br> for a tenant will be retrieved, but the caller must have the 'idn:all-personal-access-tokens:read' right. </br> </br> Any of the following rights are required to access this resource: <ul>\n  <li>idn:my-personal-access-tokens:read</li>\n  <li>idn:all-personal-access-tokens:read</li>\n  <li>idn:managed-personal-access-tokens:read</li>\n</ul>",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "description": "The identity ID of the owner whose personal access tokens should be listed. </br> If \"me\", the caller should have the following right: 'idn:my-personal-access-tokens:read'</br> </br> If an actual owner ID or if the <code>owner-id</code> parameter is omitted in the request, </br> the caller should have the following right: 'idn:all-personal-access-tokens:read'. </br> </br> If the caller has the following right, then managed personal access tokens associated with <code>owner-id</code> </br> will be retrieved: 'idn:managed-personal-access-tokens:read'",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "example": "2c9180867b50d088017b554662fb281e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of personal access tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the personal access token (to be used as the username for Basic Auth).",
                        "example": "86f1dc6fe8f54414950454cbb11278fa"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.",
                        "example": "NodeJS Integration"
                      },
                      "owner": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "description": "Details about the owner of the personal access token."
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time, down to the millisecond, when this personal access token was created.",
                        "example": "2017-07-11T18:45:37.098Z"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "owner",
                      "created"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPersonalAccessToken",
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Create Personal Access Token",
        "description": "This creates a personal access token. </br> </br> Any of the following rights are required to access this resource: <ul>\n  <li>idn:my-personal-access-tokens:create</li>\n  <li>idn:all-personal-access-tokens:create</li>\n  <li>idn:managed-personal-access-tokens:create</li>\n</ul>",
        "requestBody": {
          "description": "Name and scope of personal access token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Object for specifying the name of a personal access token to create",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the personal access token (PAT) to be created. Cannot be the same as another PAT owned by the user for whom this PAT is being created.",
                    "example": "NodeJS Integration"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created. Note - this is the only time Personal Access Tokens' secret attribute will be displayed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the personal access token (to be used as the username for Basic Auth).",
                      "example": "86f1dc6fe8f54414950454cbb11278fa"
                    },
                    "secret": {
                      "type": "string",
                      "description": "The secret of the personal access token (to be used as the password for Basic Auth).",
                      "example": "1d1bef2b9f426383447f64f69349fc7cac176042578d205c256ba3f37c59adb9"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.",
                      "example": "NodeJS Integration"
                    },
                    "owner": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                      "description": "Details about the owner of the personal access token."
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time, down to the millisecond, when this personal access token was created.",
                      "example": "2017-07-11T18:45:37.098Z"
                    }
                  },
                  "required": [
                    "id",
                    "secret",
                    "name",
                    "owner",
                    "created"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}": {
      "delete": {
        "operationId": "deletePersonalAccessToken",
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Delete Personal Access Token",
        "description": "This deletes a personal access token </br> </br> Any of the following rights are required to access this resource: <ul>\n  <li>idn:my-personal-access-tokens:delete</li>\n  <li>idn:all-personal-access-tokens:delete</li>\n  <li>idn:managed-personal-access-tokens:delete</li>\n</ul>",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The personal access token id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/public-identities-config": {
      "get": {
        "operationId": "getPublicIdentityConfig",
        "tags": [
          "Public Identity Config"
        ],
        "summary": "Get Public Identity Config",
        "description": "This gets details of public identity config.",
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1public-identities-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePublicIdentityConfig",
        "tags": [
          "Public Identity Config"
        ],
        "summary": "Update Public Identity Config",
        "description": "This updates the details of public identity config.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Details of up to 5 Identity attributes that will be publicly accessible for all Identities to anyone in the org",
                "properties": {
                  "attributes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Used to map an attribute key for an Identity to its display name.",
                      "properties": {
                        "key": {
                          "type": "string",
                          "example": "country"
                        },
                        "name": {
                          "type": "string",
                          "example": "Country"
                        }
                      }
                    }
                  },
                  "modifiedBy": {
                    "type": "object",
                    "nullable": true,
                    "description": "The manager for the identity.",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type",
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "Identity id",
                        "example": "2c9180a46faadee4016fb4e018c20639"
                      },
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of identity.",
                        "example": "Thomas Edison"
                      }
                    }
                  },
                  "modified": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-06-25T20:22:28.104Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1public-identities-config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/notification-template-context": {
      "get": {
        "operationId": "getNotificationsTemplateContext",
        "tags": [
          "Notifications"
        ],
        "summary": "Get Notification Template Context",
        "description": "The notification service (Hermes) maintains metadata to construct the notification templates or supply any information during the event propagation.  The data-store where this information is retrieved is  called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes\n that will be available per tenant (organization).\n\nRegarding authorization, the access token contains the tenant and will grant access to the one requested.\nRequires the following security scope:  idn:notification-templates:read",
        "responses": {
          "200": {
            "description": "Notification template context attributes for a specific tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "type": "object",
                        "description": "A JSON object that stores the context.",
                        "example": {
                          "productUrl": "https://test-org.identitysoon.com",
                          "brandingConfigs": {
                            "default": {
                              "narrowLogoURL": null,
                              "productName": "SailPoint",
                              "standardLogoURL": null,
                              "navigationColor": "011E64",
                              "actionButtonColor": "20B2DE",
                              "emailFromAddress": null,
                              "activeLinkColor": "20B2DE",
                              "loginInformationalMessage": null
                            }
                          }
                        }
                      },
                      "created": {
                        "type": "string",
                        "description": "When the global context was created",
                        "format": "date-time",
                        "example": "2020-04-15T16:16:47.525Z"
                      },
                      "modified": {
                        "type": "string",
                        "description": "When the global context was last modified",
                        "format": "date-time",
                        "example": "2020-04-15T16:16:47.525Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/notification-preferences/{key}": {
      "get": {
        "operationId": "getNotificationPreference",
        "tags": [
          "Notifications"
        ],
        "summary": "Get Notification Preferences for tenant.",
        "description": "Returns the notification preferences for tenant.  Note that if the key doesn't exist, then a 404 will be returned.\nRequest will require the following legacy roles:  ORG_ADMIN and API",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The notification key."
          }
        ],
        "responses": {
          "200": {
            "description": "Return preference for the given notification key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1notification-preferences~1%7Bkey%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          }
        }
      },
      "put": {
        "operationId": "putNotificationPreference",
        "tags": [
          "Notifications"
        ],
        "summary": "Overwrite the preferences for the given notification key.",
        "description": "In the notification world, a notification flows through these salient stages - \n 1. Interest matching, \n 2. Preferences \n 3. Template Rendering. \n\nThe default notification preferences make up a part of the second stage, along with user preferences (which is a future goal). The expectation is for  admins to be able to set default preferences for their org, like opting in to or out of certain notifications, and configuring future preferences as  we tack on more features. The key in the Dto is not necessary but if it is provided and doesn't match the key in the URI, then a 400 will be thrown. \nRequest will require the following legacy roles:  ORG_ADMIN and API",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The notification key."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Maps an Identity's attribute key to a list of preferred notification mediums.",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The template notification key.",
                    "example": "cloud_manual_work_item_summary"
                  },
                  "mediums": {
                    "type": "array",
                    "description": "List of preferred notification mediums, i.e., the mediums (or method) for which notifications are enabled. More mediums may be added in the future.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "EMAIL",
                        "SMS",
                        "PHONE",
                        "SLACK",
                        "TEAMS"
                      ]
                    },
                    "example": [
                      "EMAIL"
                    ]
                  },
                  "modified": {
                    "type": "string",
                    "description": "Modified date of preference",
                    "format": "date-time",
                    "example": "2020-05-15T14:37:06.909Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The preferences were successfully replaced, and an echo of the new preferences are sent back to caller.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1notification-preferences~1%7Bkey%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          }
        }
      }
    },
    "/recommendations/request": {
      "post": {
        "operationId": "getRecommendations",
        "summary": "Returns a Recommendation Based on Object",
        "tags": [
          "IAI Recommendations"
        ],
        "description": "The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The recommendations for a customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/recommendations/config": {
      "get": {
        "operationId": "getRecommendationsConfig",
        "summary": "Get certification recommendation config values",
        "tags": [
          "IAI Recommendations"
        ],
        "description": "Retrieves configuration attributes used by certification recommendations.",
        "responses": {
          "200": {
            "description": "Cert recommendation configuration attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1recommendations~1config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "operationId": "updateRecommendationsConfig",
        "summary": "Update certification recommendation config values",
        "tags": [
          "IAI Recommendations"
        ],
        "description": "Updates configuration attributes used by certification recommendations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recommenderFeatures": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of identity attributes to use for calculating certification recommendations",
                    "example": [
                      "jobTitle",
                      "location",
                      "peer_group",
                      "department",
                      "active"
                    ]
                  },
                  "peerGroupPercentageThreshold": {
                    "type": "number",
                    "description": "The percent value that the recommendation calculation must surpass to produce a YES recommendation",
                    "minimum": 0,
                    "maximum": 1,
                    "example": 0.5
                  },
                  "forceRefresh": {
                    "type": "boolean",
                    "description": "If true, rulesRecommenderConfig will be refreshed with new programatically selected attribute and threshold values on the next pipeline run",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cert recommendation configuration attributes after update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1recommendations~1config/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/requestable-objects": {
      "get": {
        "operationId": "listRequestableObjects",
        "tags": [
          "Requestable Objects"
        ],
        "summary": "Requestable Objects List",
        "description": "This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param.\nAny authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.",
        "parameters": [
          {
            "in": "query",
            "name": "identity-id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "e7eab60924f64aa284175b9fa3309599",
            "description": "If present, the value returns only requestable objects for the specified identity.\n * Admin users can call this with any identity ID value.\n * Non-admin users can only specify *me* or pass their own identity ID value.\n * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result."
          },
          {
            "in": "query",
            "name": "types",
            "description": "Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCESS_PROFILE",
                  "ROLE"
                ],
                "description": "Enum represented the currently supported requestable object types. Additional values may be added in the future without notice.",
                "example": "ACCESS_PROFILE"
              }
            },
            "explode": false
          },
          {
            "in": "query",
            "name": "term",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Finance Role",
            "description": "It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored."
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AVAILABLE",
                  "PENDING",
                  "ASSIGNED"
                ],
                "description": "Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results."
              }
            },
            "explode": false,
            "example": [
              "ASSIGNED",
              "PENDING"
            ]
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n**id**: *eq, in*\n**name**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nSorting is supported for the following fields: **name**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of requestable objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Id of the requestable object itself",
                        "example": "2c9180835d2e5168015d32f890ca1581"
                      },
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of the requestable object",
                        "example": "Applied Research Access"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2017-07-11T18:45:37.098Z"
                      },
                      "modified": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-06-25T20:22:28.104Z"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the requestable object.",
                        "example": "Access to research information, lab results, and schematics."
                      },
                      "type": {
                        "$ref": "#/paths/~1requestable-objects/get/parameters/1/schema/items"
                      },
                      "requestStatus": {
                        "$ref": "#/paths/~1requestable-objects/get/parameters/3/schema/items"
                      },
                      "identityRequestId": {
                        "type": "string",
                        "description": "If *requestStatus* is *PENDING*, indicates the id of the associated account activity.",
                        "nullable": true,
                        "example": null
                      },
                      "ownerRef": {
                        "$ref": "#/paths/~1certifications~1%7Bid%7D~1reviewers/get/responses/200/content/application~1json/schema/items"
                      },
                      "requestCommentsRequired": {
                        "type": "boolean",
                        "description": "Whether the requester must provide comments when requesting the object."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/requests": {
      "post": {
        "operationId": "roleInsightsRequests",
        "summary": "A request to generate insights for roles",
        "tags": [
          "Role Insights"
        ],
        "description": "This submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.",
        "responses": {
          "201": {
            "description": "Submitted a role insights generation request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Request Id for a role insight generation request",
                      "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
                    },
                    "createdDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time role insights request was created.",
                      "example": "2020-09-16T18:49:32.150Z"
                    },
                    "lastGenerated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time role insights request was completed.",
                      "example": "2020-09-16T18:50:12.150Z"
                    },
                    "numberOfUpdates": {
                      "type": "integer",
                      "description": "Total number of updates for this request. Starts with 0 and will have correct number when request is COMPLETED.",
                      "example": 0
                    },
                    "roleIds": {
                      "description": "The role IDs that are in this request.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "Request status",
                      "enum": [
                        "CREATED",
                        "IN PROGRESS",
                        "COMPLETED",
                        "FAILED"
                      ]
                    }
                  },
                  "example": {
                    "id": "c9aa02f7-86b0-4bc4-84bd-3116a6131e77",
                    "createdDate": "2020-09-16T18:49:32.150Z",
                    "lastGenerated": "2020-09-16T18:49:32.150Z",
                    "numberOfUpdates": 0,
                    "roleIds": [
                      "2c91808e720e94f8017253287c0a44f4",
                      "2c918087723ac2800172532191540e03",
                      "2c9180986e4c8592016e6b15eaef447c"
                    ],
                    "status": "CREATED"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/requests/{id}": {
      "get": {
        "operationId": "getRoleInsightsRequests",
        "summary": "Returns the metadata for a request in order to generate insights for roles.",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint returns details of a prior request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role insights request id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns details of an earlier role insights request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1role-insights~1requests/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/summary": {
      "get": {
        "operationId": "getRoleInsightsSummary",
        "summary": "Get role insights summary information",
        "tags": [
          "Role Insights"
        ],
        "description": "This method returns high level summary information for role insights for a customer.",
        "responses": {
          "200": {
            "description": "Succeeded. Returns high level counts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "numberOfUpdates": {
                      "type": "integer",
                      "description": "Total number of roles with updates"
                    },
                    "lastGenerated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time role insights were last found.",
                      "example": "2020-05-19T13:49:37.385Z"
                    },
                    "entitlementsIncludedInRoles": {
                      "type": "integer",
                      "description": "The number of entitlements included in roles (vs free radicals).",
                      "example": 45
                    },
                    "totalNumberOfEntitlements": {
                      "type": "integer",
                      "description": "The total number of entitlements.",
                      "example": 250
                    },
                    "identitiesWithAccessViaRoles": {
                      "type": "integer",
                      "description": "The number of identities in roles vs. identities with just entitlements and not in roles.",
                      "example": 550
                    },
                    "totalNumberOfIdentities": {
                      "type": "integer",
                      "description": "The total number of identities.",
                      "example": 980
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights": {
      "get": {
        "operationId": "getRoleInsights",
        "summary": "Get role insights",
        "tags": [
          "Role Insights"
        ],
        "description": "This method returns detailed role insights for each role.",
        "parameters": [
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "name": "sorters",
            "in": "query",
            "description": "sort by numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities (default- ascending)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter parameter(s) by \"starts with\" for the name, ownerName and description.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of roles with information about insights for each role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1role-insights~1%7BinsightId%7D/get/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}": {
      "get": {
        "operationId": "getRoleInsight",
        "summary": "Get a single role insight",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint gets role insights information for a role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns information about insights for a single role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Insight id",
                      "example": "1467e61e-f284-439c-ba2d-c6cc11cf0941"
                    },
                    "numberOfUpdates": {
                      "type": "integer",
                      "description": "Total number of updates for this role",
                      "example": 5
                    },
                    "createdDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time insights were last created for this role.",
                      "example": "2020-05-19T13:49:37.385Z"
                    },
                    "role": {
                      "description": "A role",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Role name",
                          "example": "Software Engineer"
                        },
                        "id": {
                          "type": "string",
                          "description": "Role id",
                          "example": "1467e61e-f284-439c-ba2d-c6cc11cf0941"
                        },
                        "description": {
                          "type": "string",
                          "description": "Role description",
                          "example": "Person who develops software"
                        },
                        "ownerName": {
                          "type": "string",
                          "description": "Role owner name",
                          "example": "Bob"
                        },
                        "ownerId": {
                          "type": "string",
                          "description": "Role owner id",
                          "example": "1467e61e-f284-439c-ba2d-c6cc11cf0941"
                        }
                      }
                    },
                    "insight": {
                      "description": "The kind of insight this is and some stats",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The number of identities in this role with the entitlement.",
                          "example": "ADD"
                        },
                        "identitiesWithAccess": {
                          "type": "integer",
                          "description": "The number of identities in this role with the entitlement.",
                          "example": 850
                        },
                        "identitiesImpacted": {
                          "type": "integer",
                          "description": "The number of identities in this role that do not have the specified entitlement.",
                          "example": 150
                        },
                        "totalNumberOfIdentities": {
                          "type": "integer",
                          "description": "The total number of identities.",
                          "example": 1000
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/entitlement-changes": {
      "get": {
        "operationId": "getRoleInsightsEntitlementsChanges",
        "summary": "Get entitlement insights for a role",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint returns entitlement insights for a role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by identitiesWithAccess or name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter(s) by \"starts with\" for the name and description.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of entitlements to be added for a role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the entitlement"
                      },
                      "id": {
                        "type": "string",
                        "description": "Id of the entitlement"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description for the entitlement"
                      },
                      "attribute": {
                        "type": "string",
                        "description": "Attribute for the entitlement"
                      },
                      "value": {
                        "type": "string",
                        "description": "Attribute value for the entitlement"
                      },
                      "source": {
                        "type": "string",
                        "description": "Source or the application for the entitlement"
                      },
                      "insight": {
                        "$ref": "#/paths/~1role-insights~1%7BinsightId%7D/get/responses/200/content/application~1json/schema/properties/insight",
                        "description": "The kind of insight this is and some stats"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/entitlement-changes/download": {
      "get": {
        "operationId": "downloadRoleInsightsEntitlementsChanges",
        "summary": "Download entitlement insights for a role",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint returns the entitlement insights for a role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by identitiesWithAccess, default order descending",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter(s) by \"starts with\" for the name and description.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a csv file containing a list of entitlements to be added for a role.",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/current-entitlements": {
      "get": {
        "operationId": "getRoleInsightsCurrentEntitlements",
        "summary": "Get current entitlement for a role",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter(s) by \"starts with\" for the name and description.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of current or pre-existing entitlements for a role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the entitlement"
                      },
                      "id": {
                        "type": "string",
                        "description": "Id of the entitlement"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description for the entitlement"
                      },
                      "source": {
                        "type": "string",
                        "description": "Source or the application for the entitlement"
                      },
                      "attribute": {
                        "type": "string",
                        "description": "Attribute for the entitlement"
                      },
                      "value": {
                        "type": "string",
                        "description": "Attribute value for the entitlement"
                      }
                    },
                    "example": {
                      "name": "Administrator",
                      "id": "8c190e67-87aa-4ed9-a90b-d9d5344523fb",
                      "description": "Full administrative access to IdentityNow",
                      "source": "IdentityNow",
                      "attribute": "assignedGroups",
                      "value": "ORG_ADMIN"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/entitlement-changes/{entitlementId}/identities": {
      "get": {
        "operationId": "getEntitlementChangesIdentities",
        "summary": "Get identities for a suggested entitlement (for a role)",
        "tags": [
          "Role Insights"
        ],
        "description": "Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The entitlement id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "hasEntitlement",
            "description": "Identity has this entitlement or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter by \"starts with\" for the name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of identities with or without the entitlement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Id for identity"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name for identity"
                      },
                      "attributes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "id": "8c190e67-87aa-4ed9-a90b-d9d5344523fb",
                      "name": "Adam Smith",
                      "attributes": {
                        "department": "Human Resources-tah-mgb-dnd",
                        "firstName": "Adam",
                        "jobTitle": "Sales Analyst",
                        "location": "Mexico"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions": {
      "post": {
        "operationId": "roleMiningSessions",
        "summary": "A request to generate potential roles for a group of identities",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This submits a create role mining session request to the role mining application.",
        "requestBody": {
          "description": "Role mining session parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "description": "The scope of identities for this role mining session",
                    "type": "object",
                    "properties": {
                      "identities": {
                        "description": "The list of identities for this role mining session.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "criteria": {
                        "type": "string",
                        "description": "The \"search\" criteria that produces the list of identities for this role mining session."
                      }
                    },
                    "example": {
                      "identities": [],
                      "criteria": "source.name:DataScienceDataset"
                    }
                  },
                  "minNumIdentitiesInPotentialRole": {
                    "type": "integer",
                    "description": "Minimum number of identities in a potential role",
                    "example": 20
                  },
                  "pruneThreshold": {
                    "type": "integer",
                    "description": "The prune threshold to be used or null to calculate prescribedPruneThreshold",
                    "example": null
                  },
                  "type": {
                    "description": "Role mining session type",
                    "example": "SPECIALIZED",
                    "type": "string",
                    "enum": [
                      "SPECIALIZED",
                      "COMMON"
                    ]
                  }
                },
                "example": {
                  "scope": {
                    "identityIds": [],
                    "criteria": "source.name:DataScienceDataset"
                  },
                  "minNumIdentitiesInPotentialRole": 20,
                  "pruneThreshold": null,
                  "type": "SPECIALIZED"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Submitted a role mining session request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scope": {
                      "$ref": "#/paths/~1role-mining-sessions/post/requestBody/content/application~1json/schema/properties/scope",
                      "description": "The scope of identities for this role mining session"
                    },
                    "minNumIdentitiesInPotentialRole": {
                      "type": "integer",
                      "description": "Minimum number of identities in a potential role",
                      "example": 20
                    },
                    "prescribedPruneThreshold": {
                      "type": "integer",
                      "description": "The computed (or prescribed) prune threshold for this session",
                      "example": 83
                    },
                    "pruneThreshold": {
                      "type": "integer",
                      "description": "The prune threshold to be used for this role mining session",
                      "example": 70
                    },
                    "potentialRoleCount": {
                      "type": "integer",
                      "description": "The number of potential roles",
                      "example": 8
                    },
                    "potentialRolesReadyCount": {
                      "type": "integer",
                      "description": "The number of potential roles which have completed processing",
                      "example": 4
                    },
                    "status": {
                      "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1status/get/responses/200/content/application~1json/schema",
                      "description": "The role mining session status"
                    },
                    "id": {
                      "type": "string",
                      "description": "Session Id for this role mining session",
                      "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
                    },
                    "createdDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time when this role mining session was created."
                    },
                    "modifiedDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date-time when this role mining session was completed."
                    },
                    "type": {
                      "$ref": "#/paths/~1role-mining-sessions/post/requestBody/content/application~1json/schema/properties/type",
                      "description": "Role mining session type"
                    }
                  },
                  "example": {
                    "scope": {
                      "identityIds": [],
                      "criteria": "source.name:DataScienceDataset"
                    },
                    "minNumIdentitiesInPotentialRole": 20,
                    "pruneThreshold": 70,
                    "prescribedPruneThreshold": 83,
                    "potentialRoleCount": 8,
                    "potentialRolesReadyCount": 4,
                    "status": {
                      "state": "POTENTIAL_ROLES_PROCESSING"
                    },
                    "id": "602ba738-cf48-499b-a780-7b67b3fc1ecf",
                    "createdDate": "2021-09-08T16:11:05.348Z",
                    "modifiedDate": "2021-09-08T16:11:05.348Z",
                    "type": "SPECIALIZED"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}": {
      "patch": {
        "operationId": "patchRoleMiningSession",
        "summary": "Patch a specified role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id to be patched",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in  role mining session.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/pruneThreshold",
                  "value": "83"
                },
                {
                  "op": "replace",
                  "path": "/minNumIdentitiesInPotentialRole",
                  "value": "10"
                }
              ]
            }
          }
        },
        "responses": {
          "202": {
            "description": "Success",
            "$ref": "#/paths/~1access-requests/post/responses/202"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      },
      "get": {
        "operationId": "getRoleMiningSession",
        "summary": "Get a specified role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "The  method retrieves a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id to be retrieved.",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a role mining session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1role-mining-sessions/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/status": {
      "get": {
        "operationId": "getRoleMiningSessionStatus",
        "summary": "Get role mining session status state",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns a role mining session status for a customer.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns session status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "state": {
                      "description": "The role mining session status. Can be one of these states - CREATED|UPDATED|IDENTITIES_OBTAINED|PRUNE_THRESHOLD_OBTAINED|POTENTIAL_ROLES_PROCESSING|POTENTIAL_ROLES_CREATED",
                      "type": "string"
                    }
                  },
                  "example": {
                    "status": "CREATED"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries": {
      "get": {
        "operationId": "getPotentialRoleSummaries",
        "summary": "Retrieves the potential role summaries for a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns the potential role summaries for a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by identityCount, density, freshness or quality",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential role summaries for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1potential-roles~1%7BpotentialRoleId%7D~1provision/post/responses/202/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}": {
      "get": {
        "operationId": "getPotentialRoleSummary",
        "summary": "Retrieves a specific potential role for a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns a specific potential role for a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential roles for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1potential-roles~1%7BpotentialRoleId%7D~1provision/post/responses/202/content/application~1json/schema"
                    },
                    {
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "identityDistribution": {
                      "description": "Identity attribute distribution",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "attributeName": {
                            "type": "string",
                            "description": "Id of the potential role"
                          },
                          "distribution": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "potentialRoleRef": {
                      "id": "dd4c13c6-8237-4753-bfb7-f627e489f9ec",
                      "name": "Potential Role - dd4c13"
                    },
                    "identityCount": "25",
                    "entitlementCount": "15",
                    "identityGroupStatus": "OBTAINED",
                    "roleId": null,
                    "density": 100,
                    "freshness": 90,
                    "quality": 95,
                    "identityDistribution": []
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}/applications": {
      "get": {
        "operationId": "getPotentialRoleApplications",
        "summary": "Retrieves the applications of a potential role for a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns the applications of a potential role for a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential roles for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Id of the potential role"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the potential role"
                      }
                    },
                    "example": {
                      "id": "2c9180877212632a017228d5a796292b",
                      "name": "Slack"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularities": {
      "get": {
        "operationId": "getEntitlementsPotentialRole",
        "summary": "Retrieves entitlements for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns entitlements for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "includeCommonAccess",
            "description": "Boolean determining whether common access entitlements will be included or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by popularity, default order descending",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter by \"starts with\" for the applicationName and entitlementRef.name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of entitlements for a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1potential-roles~1%7BpotentialRoleId%7D~1excluded-entitlements/get/responses/200/content/application~1json/schema/items"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularity-distribution": {
      "get": {
        "operationId": "getEntitlementDistributionPotentialRole",
        "summary": "Retrieves entitlement popularity distribution for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns entitlement popularity distribution for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "includeCommonAccess",
            "description": "Boolean determining whether common access entitlements will be included or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a map containing entitlement popularity distribution for a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/edit-entitlements": {
      "post": {
        "operationId": "editEntitlementsPotentialRole",
        "summary": "Edit entitlements for a potential role to exclude some entitlements",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint adds or removes entitlements from an exclusion list for a potential role.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "requestBody": {
          "description": "Role mining session parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "The list of entitlement ids to be edited",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude": {
                    "type": "boolean",
                    "description": "If true, add ids to be exclusion list. If false, remove ids from the exclusion list."
                  }
                },
                "example": {
                  "ids": [
                    "entId1",
                    "entId2"
                  ],
                  "exclude": true
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Adds or removes entitlements from a potential role's entitlement exclusion list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "createDate": {
                      "description": "The creation date for a potential role",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "entitlementCount": {
                      "type": "integer",
                      "description": "The number of entitlements in a potential role.",
                      "example": 25
                    },
                    "excludedEntitlements": {
                      "description": "The list of entitlement ids to be excluded.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "id": {
                      "type": "string",
                      "description": "Id of the potential role"
                    },
                    "identityCount": {
                      "type": "integer",
                      "description": "The number of identities in a potential role.",
                      "example": 25
                    },
                    "identityDistribution": {
                      "description": "Identity attribute distribution",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1potential-role-summaries~1%7BpotentialRoleId%7D/get/responses/200/content/application~1json/schema/properties/identityDistribution/items"
                      }
                    },
                    "identityIds": {
                      "description": "The list of ids in a potential role.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "modifiedDate": {
                      "description": "The modified date for a potential role",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the potential role"
                    },
                    "type": {
                      "$ref": "#/paths/~1role-mining-sessions/post/requestBody/content/application~1json/schema/properties/type",
                      "description": "Role mining potential type"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/identities": {
      "get": {
        "operationId": "getIdentitiesPotentialRole",
        "summary": "Retrieves identities for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns identities for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by name, default order ascending",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter by \"starts with\" for the name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of identities for a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Id of the identity"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the identity"
                      },
                      "attributes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "id": "2c9180877212632a017228d5934525e6",
                      "name": "Allene Abernathy-Welch",
                      "attributes": {
                        "jobTitle": "SQL Developer",
                        "department": "IT",
                        "location": "NYC",
                        "firstName": "Allene"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export": {
      "get": {
        "operationId": "exportRoleMiningPotentialRole",
        "summary": "Export (download) details for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a zip file containing csv files for identities and entitlements for the potential role.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async": {
      "post": {
        "operationId": "exportRoleMiningPotentialRoleAsync",
        "summary": "Asynchronously export details for a potential role in a role mining session and upload to S3",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "278359a6-04b7-4669-9468-924cf580964a"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "minEntitlementPopularity": {
                    "type": "integer",
                    "description": "The minimum popularity among identities in the role which an entitlement must have to be included in the report",
                    "example": 0
                  },
                  "includeCommonAccess": {
                    "type": "boolean",
                    "description": "If false, do not include entitlements that are highly popular among the entire orginization",
                    "example": true
                  }
                },
                "example": {
                  "minEntitlementPopularity": 0,
                  "includeCommonAccess": true
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Job Submitted. Returns a reportId that can be used to download the zip once complete",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1potential-roles~1%7BpotentialRoleId%7D~1export-async/post/requestBody/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "exportId": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID used to reference this export",
                          "example": "0c6cdb76-1227-4aaf-af21-192dbdfbfa04"
                        },
                        "status": {
                          "description": "The status of this export",
                          "example": "QUEUED",
                          "type": "string",
                          "enum": [
                            "QUEUED",
                            "IN_PROGRESS",
                            "SUCCESS",
                            "ERROR"
                          ]
                        }
                      }
                    }
                  ],
                  "example": {
                    "exportId": "0c6cdb76-1227-4aaf-af21-192dbdfbfa04",
                    "status": "QUEUED",
                    "minEntitlementPopularity": 0,
                    "includeCommonAccess": true
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}": {
      "get": {
        "operationId": "exportRoleMiningPotentialRoleStatus",
        "summary": "Retrieve status of a potential role export job",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint retrieves information about the current status of a potential role export.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "278359a6-04b7-4669-9468-924cf580964a"
          },
          {
            "in": "path",
            "name": "exportId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of a previously run export job for this potential role",
            "example": "4940ffd4-836f-48a3-b2b0-6d498c3fdf40"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the current status of this export",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1role-mining-sessions~1%7BsessionId%7D~1potential-roles~1%7BpotentialRoleId%7D~1export-async/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}/download": {
      "get": {
        "operationId": "downloadRoleMiningPotentialRoleZip",
        "summary": "Export (download) details for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint downloads a completed export of information for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "278359a6-04b7-4669-9468-924cf580964a"
          },
          {
            "in": "path",
            "name": "exportId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of a previously run export job for this potential role",
            "example": "4940ffd4-836f-48a3-b2b0-6d498c3fdf40"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a zip file containing csv files for identities and entitlements for the potential role.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/provision": {
      "post": {
        "operationId": "createPotentialRoleProvisionRequest",
        "summary": "Create request to provision a potential role into an actual role.",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method starts a job to provision a potential role",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "min-entitlement-popularity",
            "description": "Minimum popularity required for an entitlement to be included in the provisioned role.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "include-common-access",
            "description": "Boolean determining whether common access entitlements will be included in the provisioned role.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "Required information to create a new role",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleName": {
                    "type": "string",
                    "description": "Name of the new role being created",
                    "example": "Finance - Accounting"
                  },
                  "roleDescription": {
                    "type": "string",
                    "description": "Short description of the new role being created",
                    "example": "General access for accounting department"
                  },
                  "ownerId": {
                    "type": "string",
                    "description": "ID of the identity that will own this role",
                    "example": "2b568c65bc3c4c57a43bd97e3a8e41"
                  }
                },
                "example": {
                  "roleName": "Finance - Accounting",
                  "roleDescription": "General access for accounting department",
                  "ownerId": "2b568c65bc3c4c57a43bd97e3a8e41"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. Returns a potential role summary including the status of the provison request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "potentialRoleRef": {
                      "description": "Details about the potential role",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Id of the potential role"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the potential role"
                        }
                      }
                    },
                    "identityCount": {
                      "type": "integer",
                      "description": "The number of identities in a potential role.",
                      "example": 25
                    },
                    "entitlementCount": {
                      "type": "integer",
                      "description": "The number of entitlements in a potential role.",
                      "example": 15
                    },
                    "identityGroupStatus": {
                      "type": "string",
                      "description": "The status for this identity group which can be \"REQUESTED\" or \"OBTAINED\"",
                      "example": "OBTAINED"
                    },
                    "provisionState": {
                      "description": "The status of provisioning for this potential role. Can be \"POTENTIAL\", \"PENDING\", \"FAILED\", or \"COMPLETE\".",
                      "example": "PENDING",
                      "type": "string",
                      "enum": [
                        "POTENTIAL",
                        "PENDING",
                        "COMPLETE",
                        "FAILED"
                      ]
                    },
                    "roleId": {
                      "type": "string",
                      "description": "ID of the provisioned role in IIQ or IDN.  Null if this potential role has not been provisioned.",
                      "example": "2a4be6fbcf3c4e66b95a0c15ffd591"
                    },
                    "density": {
                      "type": "integer",
                      "description": "The density metric (0-100) of this potential role. Higher density values indicate higher similarity amongst the identities.",
                      "example": 90
                    },
                    "freshness": {
                      "type": "integer",
                      "description": "The freshness metric (0-100) of this potential role. Higher freshness values indicate this potential role is more distinctive compared to existing roles.",
                      "example": 70
                    },
                    "quality": {
                      "type": "integer",
                      "description": "The quality metric (0-100) of this potential role. Higher quality values indicate this potential role has high density and freshness.",
                      "example": 80
                    }
                  },
                  "example": {
                    "potentialRoleRef": {
                      "id": "dd4c13c6-8237-4753-bfb7-f627e489f9ec",
                      "name": "Potential Role - dd4c13"
                    },
                    "identityCount": "25",
                    "entitlementCount": "15",
                    "identityGroupStatus": "OBTAINED",
                    "provisionState": "PENDING",
                    "roleId": "2a4be6fbcf3c4e66b95a0c15ffd591"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/excluded-entitlements": {
      "get": {
        "operationId": "getExcludedEntitlementsPotentialRole",
        "summary": "Retrieves excluded entitlements for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns excluded entitlements for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "sort by popularity, default order descending",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter parameter by \"starts with\" for the applicationName and entitlementRef.name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of excluded entitlements for a potential roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entitlementRef": {
                        "description": "Details about the entitlement",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the entitlement"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the entitlement"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description forthe entitlement"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the entitlement"
                      },
                      "applicationName": {
                        "type": "string",
                        "description": "Application name of the entitlement"
                      },
                      "identityCount": {
                        "type": "integer",
                        "description": "The number of identities with this entitlement in a role.",
                        "example": 45
                      },
                      "popularity": {
                        "type": "integer",
                        "description": "The % popularity of this entitlement in a role.",
                        "example": 65
                      },
                      "popularityInOrg": {
                        "type": "integer",
                        "description": "TThe % popularity of this entitlement in the org.",
                        "example": 35
                      }
                    },
                    "example": {
                      "entitlementRef": {
                        "id": "2c9180877212632a017228d5a796292b",
                        "name": "entitlement.10",
                        "description": "Read access"
                      },
                      "name": "Administrator",
                      "applicationName": "Slack",
                      "identityCount": "8",
                      "popularity": "65",
                      "popularityInOrg": "35"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "operationId": "listRoles",
        "tags": [
          "Roles"
        ],
        "summary": "List Roles",
        "description": "This API returns a list of Roles.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "description": "If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.",
            "example": "5168015d32f890ca15812c9180835d2e",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": 50,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 50,
              "default": 50
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": 0,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "count",
            "description": "If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.\n\nSince requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.\n\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html) for more information.",
            "required": false,
            "example": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results) Filtering is supported for the following fields and operators:\n**id**: *eq, in* **name**: *eq, sw* **created, modified**: *gt, lt, ge, le* **owner.id**: *eq, in* **requestable**: *eq*",
            "example": "requestable eq false",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#sorting-results) Sorting is supported for the following fields: **name, created, modified**",
            "example": "name,-modified",
            "required": false
          },
          {
            "in": "query",
            "name": "for-segment-ids",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.\n\nIf segmentation is currently unavailable, specifying this parameter results in an error.",
            "example": "0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d",
            "required": false
          },
          {
            "in": "query",
            "name": "include-unsegmented",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.",
            "example": false,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Returned if there is no authorization header, or if the JWT token is expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "A message describing the error",
                      "example": "JWT validation failed: JWT is expired"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Returned if the user you are running as, doesn't have access to this end-point.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "403": {
                    "summary": "An example of a 403 response object",
                    "value": {
                      "detailCode": "403 Forbidden",
                      "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The server understood the request but refuses to authorize it."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Returned in response to too many requests in a given period of time - rate limited. The Retry-After header in the response includes how long to wait before trying again.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "A message describing the error",
                      "example": " Rate Limit Exceeded "
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Returned if there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "500": {
                    "summary": "An example of a 500 response object",
                    "value": {
                      "detailCode": "500.0 Internal Fault",
                      "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "An internal fault occurred."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createRole",
        "tags": [
          "Roles"
        ],
        "summary": "Create a Role",
        "description": "This API creates a Role.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a ROLE_SUBADMIN may not create a Role including an Access Profile if that Access Profile is associated with a Source with which the ROLE_SUBADMIN is not themselves associated.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A Role",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the Role",
                    "example": "2c918086749d78830174a1a40e121518"
                  },
                  "name": {
                    "type": "string",
                    "description": "The human-readable display name of the Role",
                    "maxLength": 128,
                    "example": "Role 2567"
                  },
                  "created": {
                    "type": "string",
                    "description": "Date the Role was created",
                    "format": "date-time",
                    "example": "2021-03-01T22:32:58.104Z",
                    "readOnly": true
                  },
                  "modified": {
                    "type": "string",
                    "description": "Date the Role was last modified.",
                    "format": "date-time",
                    "example": "2021-03-02T20:22:28.104Z",
                    "readOnly": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "A human-readable description of the Role",
                    "example": "Urna amet cursus pellentesque nisl orci maximus lorem nisl euismod fusce morbi placerat adipiscing maecenas nisi tristique et metus et lacus sed morbi nunc nisl maximus magna arcu varius sollicitudin elementum enim maecenas nisi id ipsum tempus fusce diam ipsum tortor."
                  },
                  "owner": {
                    "type": "object",
                    "description": "The owner of this object.",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type",
                        "description": "Type of requested object.",
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "Identity id",
                        "example": "2c9180a46faadee4016fb4e018c20639"
                      },
                      "name": {
                        "type": "string",
                        "description": "Human-readable display name of the owner. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner's display name, otherwise a 400 Bad Request error will result.",
                        "example": "support"
                      }
                    }
                  },
                  "accessProfiles": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the Access Profile",
                          "example": "ff808081751e6e129f1518161919ecca"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of requested object.",
                          "enum": [
                            "ACCESS_PROFILE"
                          ],
                          "example": "ACCESS_PROFILE"
                        },
                        "name": {
                          "type": "string",
                          "description": "Human-readable display name of the Access Profile",
                          "example": "Access Profile 2567"
                        }
                      }
                    },
                    "nullable": true
                  },
                  "membership": {
                    "nullable": true,
                    "type": "object",
                    "description": "When present, specifies that the Role is to be granted to Identities which either satisfy specific criteria or which are members of a given list of Identities.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "STANDARD",
                          "IDENTITY_LIST"
                        ],
                        "description": "This enum characterizes the type of a Role's membership selector. Only the following two are fully supported:\n\nSTANDARD: Indicates that Role membership is defined in terms of a criteria expression\n\nIDENTITY_LIST: Indicates that Role membership is conferred on the specific identities listed",
                        "example": "IDENTITY_LIST"
                      },
                      "criteria": {
                        "nullable": true,
                        "type": "object",
                        "description": "Defines STANDARD type Role membership",
                        "properties": {
                          "operation": {
                            "type": "string",
                            "enum": [
                              "EQUALS",
                              "NOT_EQUALS",
                              "CONTAINS",
                              "STARTS_WITH",
                              "ENDS_WITH",
                              "AND",
                              "OR"
                            ],
                            "description": "An operation",
                            "example": "EQUALS"
                          },
                          "key": {
                            "type": "object",
                            "description": "Refers to a specific Identity attribute, Account attibute, or Entitlement used in Role membership criteria",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "IDENTITY",
                                  "ACCOUNT",
                                  "ENTITLEMENT"
                                ],
                                "description": "Indicates whether the associated criteria represents an expression on identity attributes, account attributes, or entitlements, respectively.",
                                "example": "ACCOUNT"
                              },
                              "property": {
                                "type": "string",
                                "description": "The name of the attribute or entitlement to which the associated criteria applies.",
                                "example": "attribute.email"
                              },
                              "sourceId": {
                                "type": "string",
                                "nullable": true,
                                "description": "ID of the Source from which an account attribute or entitlement is drawn. Required if type is ACCOUNT or ENTITLEMENT",
                                "example": "2c9180867427f3a301745aec18211519"
                              }
                            },
                            "required": [
                              "type",
                              "property"
                            ]
                          },
                          "stringValue": {
                            "type": "string",
                            "description": "String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.",
                            "example": "carlee.cert1c9f9b6fd@mailinator.com"
                          },
                          "children": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "description": "Defines STANDARD type Role membership",
                              "properties": {
                                "operation": {
                                  "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/membership/properties/criteria/properties/operation"
                                },
                                "key": {
                                  "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/membership/properties/criteria/properties/key"
                                },
                                "stringValue": {
                                  "type": "string",
                                  "description": "String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.",
                                  "example": "carlee.cert1c9f9b6fd@mailinator.com"
                                },
                                "children": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines STANDARD type Role membership",
                                    "properties": {
                                      "operation": {
                                        "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/membership/properties/criteria/properties/operation"
                                      },
                                      "key": {
                                        "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/membership/properties/criteria/properties/key"
                                      },
                                      "stringValue": {
                                        "type": "string",
                                        "description": "String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.",
                                        "example": "carlee.cert1c9f9b6fd@mailinator.com"
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "description": "Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa."
                                }
                              }
                            },
                            "nullable": true,
                            "description": "Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa."
                          }
                        }
                      },
                      "identities": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "A reference to an Identity in an IDENTITY_LIST role membership criteria.",
                          "properties": {
                            "type": {
                              "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type",
                              "nullable": true,
                              "example": "IDENTITY"
                            },
                            "id": {
                              "type": "string",
                              "description": "Identity id",
                              "example": "2c9180a46faadee4016fb4e018c20639"
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "description": "Human-readable display name of the Identity.",
                              "example": "Thomas Edison"
                            },
                            "aliasName": {
                              "type": "string",
                              "nullable": true,
                              "description": "User name of the Identity",
                              "example": "t.edison"
                            }
                          }
                        },
                        "nullable": true,
                        "description": "Defines role membership as being exclusive to the specified Identities, when type is IDENTITY_LIST."
                      }
                    }
                  },
                  "legacyMembershipInfo": {
                    "type": "object",
                    "nullable": true,
                    "description": "This field is not directly modifiable and is generally expected to be *null*. In very rare instances, some Roles may have been created using membership selection criteria that are no longer fully supported. While these Roles will still work, they should be migrated to STANDARD or IDENTITY_LIST selection criteria. This field exists for informational purposes as an aid to such migration.",
                    "example": {
                      "type": "IDENTITY_LIST"
                    },
                    "additionalProperties": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the Role is enabled or not.",
                    "example": true
                  },
                  "requestable": {
                    "type": "boolean",
                    "description": "Whether the Role can be the target of Access Requests",
                    "example": true
                  },
                  "accessRequestConfig": {
                    "nullable": true,
                    "description": "Access request configuration for this object",
                    "type": "object",
                    "properties": {
                      "commentsRequired": {
                        "type": "boolean",
                        "description": "Whether the requester of the containing object must provide comments justifying the request",
                        "example": true
                      },
                      "denialCommentsRequired": {
                        "type": "boolean",
                        "description": "Whether an approver must provide comments when denying the request",
                        "example": true
                      },
                      "approvalSchemes": {
                        "type": "array",
                        "description": "List describing the steps in approving the request",
                        "items": {
                          "type": "object",
                          "properties": {
                            "approverType": {
                              "type": "string",
                              "enum": [
                                "OWNER",
                                "SOURCE_OWNER",
                                "MANAGER",
                                "GOVERNANCE_GROUP"
                              ],
                              "description": "Describes the individual or group that is responsible for an approval step. Values are as follows.\n\n**OWNER**: Owner of the associated Access Profile or Role\n\n**SOURCE_OWNER**: Owner of the Source associated with an Access Profile\n\n**MANAGER**: Manager of the Identity making the request\n\n**GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field",
                              "example": "GOVERNANCE_GROUP"
                            },
                            "approverId": {
                              "type": "string",
                              "description": "Id of the specific approver, used only when approverType is GOVERNANCE_GROUP",
                              "example": "46c79819-a69f-49a2-becb-12c971ae66c6"
                            }
                          }
                        }
                      }
                    }
                  },
                  "revocationRequestConfig": {
                    "nullable": true,
                    "description": "Revocation request configuration for this object.",
                    "type": "object",
                    "properties": {
                      "approvalSchemes": {
                        "type": "array",
                        "description": "List describing the steps in approving the revocation request",
                        "items": {
                          "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/accessRequestConfig/properties/approvalSchemes/items"
                        }
                      }
                    }
                  },
                  "segments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "description": "List of IDs of segments, if any, to which this Role is assigned.",
                    "example": [
                      "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
                      "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "getRole",
        "tags": [
          "Roles"
        ],
        "summary": "Get a Role",
        "description": "This API returns a Role by its ID.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Role",
            "example": "2c91808a7813090a017814121e121518"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all Roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchRole",
        "tags": [
          "Roles"
        ],
        "summary": "Patch a specified Role",
        "description": "This API updates an existing Role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\n\nThe following fields are patchable: **name**, **description**, **enabled**, **owner**, **accessProfiles**, **membership**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "examples": {
                "Make a Role Requestable and Enable it in One Call": {
                  "description": "This example shows how multiple fields may be updated with a single patch call.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/requestable",
                      "value": true
                    },
                    {
                      "op": "replace",
                      "path": "/enabled",
                      "value": true
                    }
                  ]
                },
                "Assign a Role to a Segment": {
                  "description": "This example illustrates the use of patch to assign a Role to a Segment by adding the Segment's ID to the Role's segments array.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/segments/-",
                      "value": "f7b1b8a3-5fed-4fd4-ad29-82014e137e19"
                    }
                  ]
                },
                "Set the Membership Selection Criteria to a List of Identities": {
                  "description": "This example shows how to define a Role's membershp by providing a list of Identities, referenced by their IDs.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/membership",
                      "value": {
                        "type": "IDENTITY_LIST",
                        "identities": [
                          {
                            "id": "2c91808973fe906c0174262092014ed9"
                          },
                          {
                            "id": "2c918086262092014ed94fb8a47612f3"
                          }
                        ]
                      }
                    }
                  ]
                },
                "Set the Membership Selection Criteria to a Standard Expression": {
                  "description": "This example shows how to define a Role's membership using STANDARD criteria. In this case, the Role will be granted to all Identities which have the *Engineering* attribute from the indicated Source.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/membership",
                      "value": {
                        "type": "STANDARD",
                        "criteria": {
                          "operation": "OR",
                          "children": [
                            {
                              "operation": "EQUALS",
                              "key": {
                                "type": "ENTITLEMENT",
                                "property": "attribute.memberOf",
                                "sourceId": "2c9180887701fb2014213e122092014e"
                              },
                              "stringValue": "Engineering"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "Add a New Clause as the Child of an Existing Standard Expression": {
                  "description": "This example shows how to add a child clause to an existing STANDARD criteria expression.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/membership/criteria/children/-",
                      "value": {
                        "operation": "ENDS_WITH",
                        "key": {
                          "type": "IDENTITY",
                          "property": "attribute.email"
                        },
                        "stringValue": "@identitynow.com"
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the Role as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteRole",
        "tags": [
          "Roles"
        ],
        "summary": "Delete a Role",
        "description": "This API deletes a Role by its ID.\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Role",
            "example": "2c91808a7813090a017814121e121518"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                  "description": "A DTO with a TaskResult reference of the delete job"
                },
                "example": {
                  "type": "TASK_RESULT",
                  "id": "402881fc7e73d5df017e73d93f1b0002",
                  "name": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/roles/{id}/assigned-identities": {
      "get": {
        "operationId": "getRoleAssignedIdentities",
        "tags": [
          "Roles"
        ],
        "summary": "Get a list of Identities assigned a Role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "ID of the Role for which the assigned Identities are to be listed",
            "example": "2c91808a7813090a017814121e121518",
            "required": true
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**aliasName**: *eq, sw*\n\n**email**: *eq, sw*\n\n**name**: *eq, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **id**, **name**, **aliasName**, **email**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Identities assigned the Role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "A subset of the fields of an Identity which is a member of a Role.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the Identity",
                        "example": "2c9180a46faadee4016fb4e018c20639"
                      },
                      "aliasName": {
                        "type": "string",
                        "description": "The alias / username of the Identity",
                        "example": "t.edison"
                      },
                      "name": {
                        "type": "string",
                        "description": "The human-readable display name of the Identity",
                        "example": "Thomas Edison"
                      },
                      "email": {
                        "type": "string",
                        "description": "Email address of the Identity",
                        "example": "t.edison@identitynow.com"
                      },
                      "roleAssignmentSource": {
                        "type": "string",
                        "enum": [
                          "ACCESS_REQUEST",
                          "ROLE_MEMBERSHIP"
                        ],
                        "description": "Type which indicates how a particular Identity obtained a particular Role",
                        "example": "ACCESS_REQUEST"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/segments": {
      "post": {
        "operationId": "createSegment",
        "tags": [
          "Segments"
        ],
        "summary": "Create Segment",
        "description": "This API creates a segment.\n\nNote that segment definitions may take time to propagate to all identities.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "name": {
                    "type": "string",
                    "description": "Segment Business Name",
                    "example": "segment-xyz"
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this Segment is created",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this Segment is modified",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of the Segment",
                    "example": "This segment represents xyz"
                  },
                  "owner": {
                    "$ref": "#/paths/~1roles/post/requestBody/content/application~1json/schema/properties/owner"
                  },
                  "visibilityCriteria": {
                    "type": "object",
                    "properties": {
                      "expression": {
                        "type": "object",
                        "properties": {
                          "operator": {
                            "type": "string",
                            "description": "Operator for the expression",
                            "enum": [
                              "AND",
                              "EQUALS"
                            ],
                            "example": "EQUALS"
                          },
                          "attribute": {
                            "type": "string",
                            "description": "Name for the attribute",
                            "example": "location"
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of attribute value",
                                "example": "STRING"
                              },
                              "value": {
                                "type": "string",
                                "description": "The attribute value",
                                "example": "Austin"
                              }
                            }
                          },
                          "children": {
                            "type": "array",
                            "description": "List of expressions",
                            "items": {
                              "$ref": "#/paths/~1segments/post/requestBody/content/application~1json/schema/properties/visibilityCriteria/properties/expression/properties/value"
                            },
                            "example": []
                          }
                        }
                      }
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Whether the Segment is currently active. Inactive segments have no effect."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Segment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1segments/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listSegments",
        "tags": [
          "Segments"
        ],
        "summary": "List Segments",
        "description": "This API returns a list of all segments.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all Segments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1segments/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/segments/{id}": {
      "get": {
        "operationId": "getSegmentById",
        "tags": [
          "Segments"
        ],
        "summary": "Get a Segment by its ID",
        "description": "This API returns the segment specified by the given ID.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Segment to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Segment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1segments/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSegmentById",
        "tags": [
          "Segments"
        ],
        "summary": "Delete Segment by ID",
        "description": "This API deletes the segment specified by the given ID.\n\nNote that segment deletion may take some time to become effective.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Segment to delete.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSegment",
        "tags": [
          "Segments"
        ],
        "summary": "Update a Segment",
        "description": "Allows updating Segment fields using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nNote that changes to a segment may take some time to propagate to all identities, and that segments will have no effect if segmentation is not enabled for your org.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Segment being modified.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of Segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\n\nThe following fields are patchable:\n* name\n* description\n* owner\n* visibilityCriteria\n* active\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "examples": {
                "Set Visibility Criteria": {
                  "description": "Set the visibility criteria",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/visibilityCriteria",
                      "value": {
                        "expression": {
                          "operator": "AND",
                          "children": [
                            {
                              "operator": "EQUALS",
                              "attribute": "location",
                              "value": {
                                "type": "STRING",
                                "value": "Philadelphia"
                              }
                            },
                            {
                              "operator": "EQUALS",
                              "attribute": "department",
                              "value": {
                                "type": "STRING",
                                "value": "HR"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the Segment's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1segments/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/send-test-notification": {
      "post": {
        "operationId": "sendTestNotification",
        "tags": [
          "Notifications"
        ],
        "summary": "Send Test Notification",
        "description": "Send a Test Notification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The template notification key.",
                    "example": "cloud_manual_work_item_summary"
                  },
                  "medium": {
                    "type": "string",
                    "description": "The notification medium. Has to be one of the following enum values.",
                    "enum": [
                      "EMAIL",
                      "SLACK",
                      "TEAMS"
                    ]
                  },
                  "context": {
                    "type": "object",
                    "description": "A Json object that denotes the context specific to the template."
                  }
                }
              },
              "example": {
                "key": "cloud_manual_work_item_summary",
                "medium": "EMAIL",
                "context": {
                  "numberOfPendingTasks": "4",
                  "ownerId": "201327fda1c44704ac01181e963d463c"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/service-desk-integrations": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "List existing Service Desk Integrations",
        "description": "Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegrationList",
        "parameters": [
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "name": "sorters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **name**"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq*\n\n**type**: *eq, in*\n\n**cluster**: *eq, in*"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ServiceDeskIntegrationDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Create a new Service Desk integration",
        "description": "Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "createServiceDeskIntegration",
        "requestBody": {
          "description": "The specifics of a new integration to create",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                  },
                  {
                    "type": "object",
                    "description": "Specification of a Service Desk integration",
                    "required": [
                      "description",
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "description": {
                        "description": "Description of the Service Desk integration",
                        "type": "string",
                        "example": "A very nice Service Desk integration"
                      },
                      "type": {
                        "description": "Type of the Service Desk integration",
                        "type": "string",
                        "default": "ServiceNowSDIM"
                      },
                      "ownerRef": {
                        "description": "Reference to the identity that is the owner of this Service Desk integration",
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "default": {
                          "type": "IDENTITY"
                        }
                      },
                      "clusterRef": {
                        "description": "Reference to the source cluster for this Service Desk integration",
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "default": {
                          "type": "CLUSTER"
                        }
                      },
                      "cluster": {
                        "description": "ID of the cluster for the Service Desk integration (replaced by clusterRef, retained for backward compatibility)",
                        "type": "string",
                        "example": "xyzzy999",
                        "deprecated": true
                      },
                      "managedSources": {
                        "description": "Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility)",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "deprecated": true
                      },
                      "provisioningConfig": {
                        "description": "The 'provisioningConfig' property specifies the configuration used to provision integrations.",
                        "type": "object",
                        "properties": {
                          "universalManager": {
                            "description": "Specifies whether this configuration is used to manage provisioning requests for all sources from the org.  If true, no managedResourceRefs are allowed.",
                            "type": "boolean",
                            "readOnly": true
                          },
                          "managedResourceRefs": {
                            "description": "References to sources for the Service Desk integration template.  May only be specified if universalManager is false.",
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                              "default": {
                                "type": "SOURCE"
                              }
                            }
                          },
                          "planInitializerScript": {
                            "description": "This is a reference to a plan initializer script.",
                            "type": "object",
                            "properties": {
                              "source": {
                                "description": "This is a Rule that allows provisioning instruction changes.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "attributes": {
                        "description": "Attributes of the Service Desk integration.  Validation constraints enforced by the implementation.",
                        "type": "object",
                        "additionalProperties": true
                      },
                      "beforeProvisioningRule": {
                        "description": "Reference to beforeProvisioningRule for this Service Desk integration",
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                        "default": {
                          "type": "RULE"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "details of the created integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/{id}": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Get a Service Desk integration by ID",
        "description": "Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to get",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Update a Service Desk integration by ID",
        "description": "Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "updateServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "description": "The specifics of the integration to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Delete a Service Desk integration by ID",
        "description": "Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "deleteServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Service Desk integration to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service Desk integration with the given ID successfully deleted"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchServiceDeskIntegration",
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service Desk Integration Update - PATCH",
        "description": "Update an existing ServiceDeskIntegration by ID with a PATCH request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nPATCH can only be applied to the following fields:\n  *   \"beforeProvisioningRule\"\n\nA 403 Forbidden Error indicates that you attempted to PATCH a field that is not allowed.\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7Bid%7D/patch/requestBody/content/application~1json-patch%2Bjson/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/types": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service Desk Integration Types List.",
        "description": "This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegrationTypes",
        "responses": {
          "200": {
            "description": "Responds with an array of the currently supported Service Desk integration types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "This represents a Service Desk Integration template type.",
                    "required": [
                      "type",
                      "scriptName"
                    ],
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "This is the name of the type.",
                        "example": "aName",
                        "type": "string"
                      },
                      "type": {
                        "description": "This is the type value for the type.",
                        "example": "aType",
                        "type": "string"
                      },
                      "scriptName": {
                        "description": "This is the scriptName attribute value for the type.",
                        "example": "aScriptName",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/templates/{scriptName}": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service Desk integration template by scriptName.",
        "description": "This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getServiceDeskIntegrationTemplate",
        "parameters": [
          {
            "name": "scriptName",
            "in": "path",
            "description": "The scriptName value of the Service Desk integration template to get",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aScriptName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the ServiceDeskIntegrationTemplateDto with the specified scriptName.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IdentityProfile/allOf/0"
                    },
                    {
                      "type": "object",
                      "description": "This is the model for a Service Desk integration template, used to create and edit Service Desk Integrations.",
                      "required": [
                        "type",
                        "attributes",
                        "provisioningConfig"
                      ],
                      "properties": {
                        "type": {
                          "description": "The 'type' property specifies the type of the Service Desk integration template.",
                          "type": "string",
                          "example": "Web Service SDIM",
                          "default": "Web Service SDIM"
                        },
                        "attributes": {
                          "description": "The 'attributes' property value is a map of attributes available for integrations using this Service Desk integration template.",
                          "type": "object",
                          "additionalProperties": true
                        },
                        "provisioningConfig": {
                          "description": "The 'provisioningConfig' property specifies the configuration used to provision integrations using the template.",
                          "$ref": "#/paths/~1service-desk-integrations/post/requestBody/content/application~1json/schema/allOf/1/properties/provisioningConfig"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      }
    },
    "/service-desk-integrations/status-check-configuration": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Get the time check configuration of queued SDIM tickets",
        "description": "Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getStatusCheckDetails",
        "responses": {
          "200": {
            "description": "QueuedCheckConfigDetails containing the configured values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1service-desk-integrations~1status-check-configuration/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:read",
              "idn:service-desk-integration:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Update the time check configuration of queued SDIM tickets",
        "description": "Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "updateStatusCheckDetails",
        "requestBody": {
          "description": "the modified time check configuration",
          "content": {
            "application/json": {
              "schema": {
                "description": "Configuration of maximum number days and interval for checking Service Desk integration queue status",
                "required": [
                  "provisioningStatusCheckIntervalMinutes",
                  "provisioningMaxStatusCheckDays"
                ],
                "type": "object",
                "properties": {
                  "provisioningStatusCheckIntervalMinutes": {
                    "description": "interval in minutes between status checks",
                    "type": "string",
                    "example": 30
                  },
                  "provisioningMaxStatusCheckDays": {
                    "description": "maximum number of days to check",
                    "type": "string",
                    "example": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "QueuedCheckConfigDetails as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1service-desk-integrations~1status-check-configuration/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:service-desk-admin:write",
              "idn:service-desk-integration:write"
            ]
          }
        ]
      }
    },
    "/sp-config/export": {
      "post": {
        "operationId": "spConfigExport",
        "tags": [
          "SP-Config"
        ],
        "summary": "Initiates Configuration Objects Export Job.",
        "description": "This post will export objects from the tenant to a JSON configuration file.\nRequest will need the following security scope:\n'sp:config:export'",
        "requestBody": {
          "description": "Export options control what will be included in the export.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "excludeTypes": {
                        "description": "Object type names to be excluded from an sp-config export command.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "SOURCE"
                        }
                      },
                      "includeTypes": {
                        "description": "Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "TRIGGER_SUBSCRIPTION"
                        }
                      },
                      "objectOptions": {
                        "description": "Additional options targeting specific objects related to each item in the includeTypes field",
                        "type": "object",
                        "additionalProperties": {
                          "$ref": "#/paths/~1sp-config~1import/post/requestBody/content/multipart~1form-data/schema/properties/options/properties/objectOptions/additionalProperties"
                        },
                        "example": {
                          "TRIGGER_SUBSCRIPTION": {
                            "includedIds": [
                              "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                            ],
                            "includedNames": [
                              "Test 2"
                            ]
                          }
                        }
                      }
                    }
                  }
                ],
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Optional user defined description/name for export job.",
                    "example": "Export Job 1 Test"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Export job accepted and queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique id assigned to this job.",
                      "example": "3469b87d-48ca-439a-868f-2160001da8c1"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the job.",
                      "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "COMPLETE",
                        "CANCELLED",
                        "FAILED"
                      ],
                      "example": "COMPLETE"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the job, either export or import.",
                      "enum": [
                        "EXPORT",
                        "IMPORT"
                      ],
                      "example": "IMPORT"
                    },
                    "message": {
                      "type": "string",
                      "description": "This message contains additional information about the overall status of the job.",
                      "example": "Download import results for details."
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional user defined description/name for export job.",
                      "example": "ETS configuration objects from Acme-Solar sandbox"
                    },
                    "expiration": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The time until which the artifacts will be available for download.",
                      "example": "2021-05-11T22:23:16Z"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The time the job was started.",
                      "example": "2021-05-11T22:23:16Z"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The time of the last update to the job.",
                      "example": "2021-05-11T22:23:16Z"
                    },
                    "completed": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The time the job was completed.",
                      "example": "2021-05-11T22:23:16Z"
                    }
                  },
                  "required": [
                    "jobId",
                    "status",
                    "type",
                    "message",
                    "description",
                    "expiration",
                    "created",
                    "modified",
                    "completed"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "description": "Fine-grained error code providing more detail of the error.",
                      "example": "400.1 Bad Request Content"
                    },
                    "trackingId": {
                      "type": "string",
                      "description": "Unique tracking id for the error.",
                      "example": "e7eab60924f64aa284175b9fa3309599"
                    },
                    "messages": {
                      "type": "array",
                      "description": "Generic localized reason for error",
                      "items": {
                        "$ref": "#/components/schemas/fullcampaign/allOf/1/properties/alerts/items/properties/localizations/items"
                      }
                    },
                    "causes": {
                      "type": "array",
                      "description": "Plain-text descriptive reasons to provide additional detail to the text provided in the messages field",
                      "items": {
                        "$ref": "#/components/schemas/fullcampaign/allOf/1/properties/alerts/items/properties/localizations/items"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sp-config/export/{id}": {
      "get": {
        "operationId": "spConfigExportJobStatus",
        "tags": [
          "SP-Config"
        ],
        "summary": "Get Status of Export Job",
        "description": "This gets the status of the export job identified by the id parameter.\nRequest will need the following security scope:\n'sp:config:export'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the export job for which status will be returned.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Export job status successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/202/content/application~1json/schema"
                },
                "example": {
                  "jobId": "1e824aa0-4c6e-4f14-95e9-e7dc5234aa51",
                  "status": "COMPLETE",
                  "type": "EXPORT",
                  "message": null,
                  "description": "Export Job 1 Test",
                  "expiration": "2021-05-20T15:04:24Z",
                  "created": "2021-05-13T15:04:24.112Z",
                  "modified": "2021-05-13T15:04:27.363Z",
                  "completed": "2021-05-13T15:04:27.358Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sp-config/export/{id}/download": {
      "get": {
        "operationId": "spConfigExportDownload",
        "tags": [
          "SP-Config"
        ],
        "summary": "Download Result of Export Job",
        "description": "This gets export file resulting from the export job with the requested id and downloads it to a file.\nRequest will need the following security scope:\n'sp:config:export'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the export job for which the results will be downloaded.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported JSON objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Config Export Response Body",
                  "description": "Response model for config export download response.",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "description": "Current version of the export results object.",
                      "example": 1
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Time the export was completed.",
                      "example": "2021-05-11T22:23:16Z"
                    },
                    "tenant": {
                      "type": "string",
                      "description": "Name of the tenant where this export originated.",
                      "example": "sample-tenant"
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional user defined description/name for export job.",
                      "example": "Export Job 1 Test"
                    },
                    "options": {
                      "$ref": "#/paths/~1sp-config~1export/post/requestBody/content/application~1json/schema/allOf/0",
                      "description": "Options used to create this export."
                    },
                    "objects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Config Object for Export and Import",
                        "description": "Config export and import format for individual object configurations.",
                        "properties": {
                          "version": {
                            "type": "integer",
                            "description": "Current version of configuration object.",
                            "example": 1
                          },
                          "self": {
                            "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                          },
                          "object": {
                            "description": "Object details. Format dependant on the object type.",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sp-config/import": {
      "post": {
        "operationId": "spConfigImport",
        "tags": [
          "SP-Config"
        ],
        "summary": "Initiates Configuration Objects Import Job.",
        "description": "This post will import objects from a JSON configuration file into a tenant.\nRequest will need the following security scope:\n'sp:config:import'",
        "parameters": [
          {
            "in": "query",
            "name": "preview",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "description": "This option is intended to give the user information about how an import operation would proceed, without having any affect on the target tenant. If true, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.",
            "example": "true"
          }
        ],
        "requestBody": {
          "description": "The form-data \"name\" attribute for the file content must be \"data\".\n\n__Example__\n\n    data: \"config_export_0340b957-5caa-44f6-ada2-d3c4c5bd0b19.json\",\n    options: {\n      \"excludeTypes\": [],\n      \"includeTypes\": [\"TRIGGER_SUBSCRIPTION\"],\n      \"objectOptions\": {\n        \"TRIGGER_SUBSCRIPTION\": {\n          \"includedIds\": [ \"193446a1-c431-4326-8ba7-d6eebf922948\"],\n          \"includedNames\":[]\n        }\n      },\n      \"defaultReferences\": [\n        {\n          \"type\": \"TRIGGER_SUBSCRIPTION\",\n          \"id\": \"be9e116d-08e1-49fc-ab7f-fa585e96c9e4\",\n          \"name\": \"Test Trigger\"\n        }\n      ]\n    }\n\n__Sample Import File__\n\n    {\n    \t\"version\": 1,\n    \t\"timestamp\": \"2021-05-10T15:19:23.425041-05:00\",\n    \t\"tenant\": \"sampleTenant\",\n    \t\"options\": {\n    \t\t\"excludeTypes\": [],\n    \t\t\"includeTypes\": [\"TRIGGER_SUBSCRIPTION\"],\n    \t\t\"objectOptions\": null\n    \t},\n    \t\"objects\": [{\n    \t\t\t\"version\": 1,\n    \t\t\t\"self\": {\n    \t\t\t\t\"type\": \"TRIGGER_SUBSCRIPTION\",\n    \t\t\t\t\"name\": \"test trigger\",\n    \t\t\t\t\"id\": \"193446a1-c431-4326-8ba7-d6eebf922948\"\n    \t\t\t},\n    \t\t\t\"object\": {\n    \t\t\t\t\"type\": \"HTTP\",\n    \t\t\t\t\"enabled\": true,\n    \t\t\t\t\"httpConfig\": {\n    \t\t\t\t\t\"url\": \"https://localhost\",\n    \t\t\t\t\t\"httpAuthenticationType\": \"NO_AUTH\",\n    \t\t\t\t\t\"basicAuthConfig\": null,\n    \t\t\t\t\t\"bearerTokenAuthConfig\": null,\n    \t\t\t\t\t\"httpDispatchMode\": \"SYNC\"\n    \t\t\t\t},\n    \t\t\t\t\"triggerName\": \"Access Request Submitted\",\n    \t\t\t\t\"responseDeadline\": \"PT1H\",\n    \t\t\t\t\"name\": \"test trigger\",\n    \t\t\t\t\"triggerId\": \"idn:access-request-pre-approval\"\n    \t\t\t}\n    \t\t}\n    \t]\n    }\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "description": "Name of JSON file containing the objects to be imported."
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "excludeTypes": {
                        "description": "Object type names to be excluded from an sp-config export command.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "SOURCE"
                        }
                      },
                      "includeTypes": {
                        "description": "Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "TRIGGER_SUBSCRIPTION"
                        }
                      },
                      "objectOptions": {
                        "description": "Additional options targeting specific objects related to each item in the includeTypes field",
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "includedIds": {
                              "description": "Object ids to be included in an import or export.",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                              }
                            },
                            "includedNames": {
                              "description": "Object names to be included in an import or export.",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "Test Object"
                              }
                            }
                          }
                        },
                        "example": {
                          "TRIGGER_SUBSCRIPTION": {
                            "includedIds": [
                              "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                            ],
                            "includedNames": [
                              "Test 2"
                            ]
                          }
                        }
                      },
                      "defaultReferences": {
                        "description": "List of BaseRefenceDtos that can be used to resolve references on import.",
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "data"
                ]
              },
              "example": {
                "data": "config_export_0340b957-5caa-44f6-ada2-d3c4c5bd0b19.json",
                "options": {
                  "excludeTypes": [],
                  "includeTypes": [
                    "TRIGGER_SUBSCRIPTION"
                  ],
                  "objectOptions": {
                    "TRIGGER_SUBSCRIPTION": {
                      "includedIds": [
                        "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                      ],
                      "includedNames": [
                        "Lori Test 2"
                      ]
                    }
                  },
                  "defaultReferences": [
                    {
                      "type": "TRIGGER_SUBSCRIPTION",
                      "id": "be9e116d-08e1-49fc-ab7f-fa585e96c9e4",
                      "name": "Test Trigger"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Import job accepted and queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/202/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sp-config/import/{id}": {
      "get": {
        "operationId": "spConfigImportJobStatus",
        "tags": [
          "SP-Config"
        ],
        "summary": "Get Status of Import Job",
        "description": "This gets the status of the import job identified by the id parameter.\nRequest will need the following security scope:\n'sp:config:import'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the import job for which status will be returned.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Import job status successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/202/content/application~1json/schema"
                },
                "example": {
                  "jobId": "4fb10503-1c49-4603-8f8d-886e1f6aa47b",
                  "status": "COMPLETE",
                  "type": "IMPORT",
                  "message": "Download import results for details.",
                  "description": null,
                  "expiration": "2021-05-20T16:42:39Z",
                  "created": "2021-05-13T16:42:39.333Z",
                  "modified": "2021-05-13T16:42:40.71Z",
                  "completed": "2021-05-13T16:42:40.705Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sp-config/import/{id}/download": {
      "get": {
        "operationId": "spConfigImportDownload",
        "tags": [
          "SP-Config"
        ],
        "summary": "Download Result of Import Job",
        "description": "This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import.\nRequest will need the following security scope:\n'sp:config:import'",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the import job for which the results will be downloaded.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Import Results JSON object, containing detailed results of the import operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Config Import Response Body",
                  "description": "Response Body for Config Import command.",
                  "properties": {
                    "results": {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/paths/~1identity-profiles~1import/post/responses/200/content/application~1json/schema"
                      },
                      "description": "The results of an object configuration import job.",
                      "example": {
                        "results": {
                          "TRIGGER_SUBSCRIPTION": {
                            "infos": [
                              {
                                "key": "IMPORT_PREVIEW",
                                "text": "Object to be imported: [c953134c-2224-42f2-a84e-fa5cbb395904, Test 2]",
                                "detail": null
                              },
                              {
                                "key": "IMPORT_PREVIEW",
                                "text": "Object to be imported: [be9e116d-08e1-49fc-ab7f-fa585e96c9e4, Test 1]",
                                "detail": null
                              }
                            ],
                            "warnings": [],
                            "errors": [],
                            "importedObjects": []
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "results"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sp-config/config-objects": {
      "get": {
        "operationId": "spConfigObjects",
        "tags": [
          "SP-Config"
        ],
        "summary": "Get Config Object details",
        "description": "This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.\nRequest will need the following security scope:\n'sp:config:export'",
        "responses": {
          "200": {
            "description": "Object configurations returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Object Configuration Model",
                    "description": "Response model for get object configuration.",
                    "type": "object",
                    "properties": {
                      "objectType": {
                        "type": "string",
                        "description": "The object type this configuration is for."
                      },
                      "resolveByIdUrl": {
                        "description": "Url and query parameters to be used to resolve this type of object by Id.",
                        "type": "object",
                        "title": "Resolver URL Format for Object Configuration.",
                        "properties": {
                          "url": {
                            "description": "URL for the target object endpoint.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Any query parameters that are needed for the URL.",
                            "type": "object"
                          }
                        }
                      },
                      "resolveByNameUrl": {
                        "$ref": "#/paths/~1sp-config~1config-objects/get/responses/200/content/application~1json/schema/items/properties/resolveByIdUrl",
                        "description": "Url and query parameters to be used to resolve this type of object by name."
                      },
                      "exportUrl": {
                        "type": "string",
                        "description": "Url to export this type of object."
                      },
                      "exportRight": {
                        "type": "string",
                        "description": "Rights needed by the invoker of sp-config/export in order to export this type of object."
                      },
                      "exportLimit": {
                        "type": "integer",
                        "description": "Pagination limit imposed by the target service for this object type."
                      },
                      "importUrl": {
                        "type": "string",
                        "description": "Url to import this type of object."
                      },
                      "importRight": {
                        "type": "string",
                        "description": "Rights needed by the invoker of sp-config/import in order to import this type of object."
                      },
                      "importLimit": {
                        "type": "integer",
                        "description": "Pagination limit imposed by the target service for this object type."
                      },
                      "referenceExtractors": {
                        "type": "array",
                        "description": "List of json paths within an exported object of this type that represent references that need to be resolved.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "signatureRequired": {
                        "type": "boolean",
                        "description": "If true, this type of object will be JWS signed and cannot be modified before import."
                      }
                    }
                  }
                },
                "example": [
                  {
                    "objectType": "TRIGGER_SUBSCRIPTION",
                    "resolveByIdUrl": {
                      "url": "ets://trigger-subscriptions/$id",
                      "query": null
                    },
                    "resolveByNameUrl": {
                      "url": "ets://trigger-subscriptions/",
                      "query": {
                        "filters": "name eq \"$name\""
                      }
                    },
                    "exportUrl": "ets://trigger-subscriptions/export",
                    "exportRight": "idn:trigger-service-subscriptions:read",
                    "exportLimit": 10,
                    "importUrl": "ets://trigger-subscriptions/import",
                    "importRight": "idn:trigger-service-subscriptions:create",
                    "importLimit": 10,
                    "referenceExtractors": [
                      "$.owner"
                    ],
                    "signatureRequired": false
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources": {
      "get": {
        "operationId": "listSources",
        "tags": [
          "Sources"
        ],
        "summary": "Lists all sources in IdentityNow.",
        "description": "This end-point lists all the sources in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/paths/~1roles/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "name eq \"#Employees\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *co, eq, in, sw*\n\n**type**: *eq, in*\n\n**owner.id**: *eq, in*\n\n**features**: *ca, co*\n\n**created**: *eq*\n\n**modified**: *eq*\n\n**managementWorkgroup.id**: *eq*\n\n**description**: *eq*\n\n**authoritative**: *eq*\n\n**healthy**: *eq*\n\n**status**: *eq, in*\n\n**connectionType**: *eq*\n\n**connectorName**: *eq*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "name",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status**"
          },
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "example": "name",
            "description": "Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user.\nSubadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "List of Source objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "description": "Not Found - returned if the request URL refers to a resource or object that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sp-config~1export/post/responses/400/content/application~1json/schema"
                },
                "examples": {
                  "404": {
                    "summary": "An example of a 404 response object",
                    "value": {
                      "detailCode": "404 Not found",
                      "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The server did not find a current representation for the target resource."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSource",
        "tags": [
          "Sources"
        ],
        "summary": "Creates a source in IdentityNow.",
        "description": "This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "provisionAsCsv",
            "description": "Configures the source as a DelimitedFile type of source.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "the id of the Source",
                    "example": "2c91808568c529c60168cca6f90c1324"
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the source",
                    "example": "This is the corporate directory."
                  },
                  "owner": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Reference to an owning Identity Object"
                  },
                  "cluster": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Reference to the associated Cluster",
                    "example": {
                      "type": "CLUSTER",
                      "id": "2c9180866166b5b0016167c32ef31a66",
                      "name": "Corporate Cluster"
                    }
                  },
                  "accountCorrelationConfig": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Reference to a Correlation Config object",
                    "example": {
                      "type": "ACCOUNT_CORRELATION_CONFIG",
                      "id": "2c9180855d191c59015d28583727245a",
                      "name": "Directory [source-62867] Account Correlation"
                    }
                  },
                  "accountCorrelationRule": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Reference to a Rule that can do COMPLEX the correlation, should only be used when accountCorrelationConfig can't be used."
                  },
                  "managerCorrelationMapping": {
                    "description": "Filter Object used during manager correlation to match incoming manager values to an existing manager's Account/Identity",
                    "type": "object",
                    "properties": {
                      "accountAttribute": {
                        "type": "string",
                        "description": "Name of the attribute to use for manager correlation. The value found on the account attribute will be used to lookup the manager's identity.",
                        "example": "manager"
                      },
                      "identityAttribute": {
                        "type": "string",
                        "description": "Name of the identity attribute to search when trying to find a manager using the value from the accountAttribute.",
                        "example": "manager"
                      }
                    }
                  },
                  "managerCorrelationRule": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Reference to the ManagerCorrelationRule, only used when a simple filter isn't sufficient."
                  },
                  "beforeProvisioningRule": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Rule that runs on the CCG and allows for customization of provisioning plans before the connector is called."
                  },
                  "schemas": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    },
                    "description": "List of references to Schema objects",
                    "example": [
                      {
                        "type": "CONNECTOR_SCHEMA",
                        "id": "2c9180835d191a86015d28455b4b232a",
                        "name": "account"
                      },
                      {
                        "type": "CONNECTOR_SCHEMA",
                        "id": "2c9180835d191a86015d28455b4b232b",
                        "name": "group"
                      }
                    ]
                  },
                  "passwordPolicies": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    },
                    "description": "List of references to the associated PasswordPolicy objects.",
                    "example": [
                      {
                        "type": "PASSWORD_POLICY",
                        "id": "2c9180855d191c59015d291ceb053980",
                        "name": "Corporate Password Policy"
                      }
                    ]
                  },
                  "features": {
                    "type": "array",
                    "description": "Optional features that can be supported by a source.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "AUTHENTICATE",
                        "COMPOSITE",
                        "DIRECT_PERMISSIONS",
                        "DISCOVER_SCHEMA",
                        "ENABLE",
                        "MANAGER_LOOKUP",
                        "NO_RANDOM_ACCESS",
                        "PROXY",
                        "SEARCH",
                        "TEMPLATE",
                        "UNLOCK",
                        "UNSTRUCTURED_TARGETS",
                        "SHAREPOINT_TARGET",
                        "PROVISIONING",
                        "GROUP_PROVISIONING",
                        "SYNC_PROVISIONING",
                        "PASSWORD",
                        "CURRENT_PASSWORD",
                        "ACCOUNT_ONLY_REQUEST",
                        "ADDITIONAL_ACCOUNT_REQUEST",
                        "NO_AGGREGATION",
                        "GROUPS_HAVE_MEMBERS",
                        "NO_PERMISSIONS_PROVISIONING",
                        "NO_GROUP_PERMISSIONS_PROVISIONING",
                        "NO_UNSTRUCTURED_TARGETS_PROVISIONING",
                        "NO_DIRECT_PERMISSIONS_PROVISIONING"
                      ],
                      "description": "Optional features that can be supported by an source.\n* AUTHENTICATE: The source supports pass-through authentication.\n* COMPOSITE: The source supports composite source creation.\n* DIRECT_PERMISSIONS: The source supports returning DirectPermissions.\n* DISCOVER_SCHEMA: The source supports discovering schemas for users and groups.\n* ENABLE The source supports reading if an account is enabled or disabled.\n* MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS.\n* NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform.\n* PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source.\n* SEARCH\n* TEMPLATE\n* UNLOCK: The source supports reading if an account is locked or unlocked.\n* UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets.\n* SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources.\n* PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation.\n* GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented.\n* SYNC_PROVISIONING: The source can provision accounts synchronously.\n* PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature.\n* CURRENT_PASSWORD: Some source types support verification of the current password\n* ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements.\n* ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts.\n* NO_AGGREGATION: A source that does not support aggregation.\n* GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation.\n* NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts.\n* NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups.\n* NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING.\n* NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING."
                    },
                    "example": [
                      "SYNC_PROVISIONING",
                      "MANAGER_LOOKUP",
                      "SEARCH",
                      "PROVISIONING",
                      "AUTHENTICATE",
                      "GROUP_PROVISIONING",
                      "PASSWORD"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "description": "Specifies the type of system being managed e.g. Active Directory, Workday, etc..",
                    "example": "OpenLDAP - Direct"
                  },
                  "connector": {
                    "type": "string",
                    "description": "Connector script name.",
                    "example": "active-directory"
                  },
                  "connectorClass": {
                    "type": "string",
                    "description": "The fully qualified name of the Java class that implements the connector interface.",
                    "example": "sailpoint.connector.LDAPConnector"
                  },
                  "connectorAttributes": {
                    "type": "object",
                    "description": "Connector specific configuration; will differ from type to type.",
                    "example": {
                      "healthCheckTimeout": 30,
                      "authSearchAttributes": [
                        "cn",
                        "uid",
                        "mail"
                      ]
                    }
                  },
                  "deleteThreshold": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number from 0 to 100 that specifies when to skip the delete phase.",
                    "example": 10
                  },
                  "authoritative": {
                    "type": "boolean",
                    "description": "When true indicates the source is referenced by an IdentityProfile.",
                    "example": false
                  },
                  "managementWorkgroup": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                    "description": "Reference to Management Workgroup for this Source"
                  },
                  "healthy": {
                    "type": "boolean",
                    "description": "When true indicates a healthy source",
                    "example": true
                  },
                  "status": {
                    "type": "string",
                    "description": "A status identifier, giving specific information on why a source is healthy or not",
                    "example": "SOURCE_STATE_HEALTHY"
                  },
                  "since": {
                    "type": "string",
                    "description": "Timestamp showing when a source health check was last performed",
                    "example": "2021-09-28T15:48:29.3801666300Z"
                  },
                  "connectorId": {
                    "type": "string",
                    "description": "The id of connector",
                    "example": "active-directory"
                  },
                  "connectorName": {
                    "type": "string",
                    "description": "The name of the connector that was chosen on source creation",
                    "example": "Active Directory"
                  },
                  "connectionType": {
                    "type": "string",
                    "description": "The type of connection (direct or file)",
                    "example": "file"
                  },
                  "connectorImplementstionId": {
                    "type": "string",
                    "description": "The connector implementstion id",
                    "example": "delimited-file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{id}": {
      "get": {
        "operationId": "getSource",
        "tags": [
          "Sources"
        ],
        "summary": "This API gets a specific source from IdentityNow.",
        "description": "This end-point gets a specific source in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Source object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "replaceSource",
        "tags": [
          "Sources"
        ],
        "summary": "Update Source (Full)",
        "description": "This API updates a source in IdentityNow, using a full object representation. In other words, the existing Source configuration is completely replaced.\nSome fields are immutable and cannot be changed, such as:\n* id * type * authoritative * connector * connectorClass * passwordPolicies\nAttempts to modify these fields will result in a 400 error.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateSource",
        "tags": [
          "Sources"
        ],
        "summary": "Update Source (Partial)",
        "description": "This API partially updates a source in IdentityNow, using a list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nSome fields are immutable and cannot be changed, such as:\n* id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies\nAttempts to modify these fields will result in a 400 error.\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in IdentityNow.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "description": "A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                "example": "{\n\t\"op\": \"replace\",\n\t\"path\": \"/description\",\n\t\"value\": \"A new description\"\n}",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSource",
        "tags": [
          "Sources"
        ],
        "summary": "This API deletes a source in IdentityNow.",
        "description": "This end-point deletes a specific source in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.\nAll of accounts on the source will be removed first, then the source will be deleted. Actual status of task execution can be retrieved via method GET `/task-status/{id}`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type",
                      "description": "DTO type"
                    },
                    "id": {
                      "type": "string",
                      "description": "ID of the object to which this reference applies",
                      "example": "2c91808568c529c60168cca6f90c1313"
                    },
                    "name": {
                      "type": "string",
                      "description": "Human-readable display name of the object to which this reference applies",
                      "example": "William Wilson"
                    }
                  }
                },
                "examples": {
                  "deleteSource": {
                    "summary": "Response returned when deleting a source",
                    "value": {
                      "type": "TASK_RESULT",
                      "id": "2c91808779ecf55b0179f720942f181a",
                      "name": null
                    }
                  }
                }
              }
            },
            "links": {
              "GetTaskStatusById": {
                "operationId": "getTaskStatus",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /task-status/{id}`.\n"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/check-connection": {
      "post": {
        "operationId": "checkConnection",
        "tags": [
          "Sources"
        ],
        "summary": "Check connection for the source connector.",
        "description": "This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:source-connector:write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Source.",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of checking connection to the source connector with response from it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1connector~1ping-cluster/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/peek-resource-objects": {
      "post": {
        "operationId": "peekResourceObjects",
        "tags": [
          "Sources"
        ],
        "summary": "Peek resource objects from the source connector",
        "description": "Retrieves a sample of data returned from account and group aggregation requests.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:source-connector:write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Source",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "objectType": "resource",
                  "maxCount": 50
                },
                "type": "object",
                "title": "Resource Objects Request",
                "description": "Request model for peek resource objects from source connectors.",
                "properties": {
                  "objectType": {
                    "type": "string",
                    "description": "The type of resource objects to iterate over.",
                    "default": "account",
                    "example": "group"
                  },
                  "maxCount": {
                    "type": "integer",
                    "description": "The maximum number of resource objects to iterate over and return.",
                    "default": 25,
                    "example": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of resource objects that was fetched from the source connector.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Resource Objects Response",
                  "description": "Response model for peek resource objects from source connectors.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the source",
                      "example": "2c91808568c529c60168cca6f90c1313",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the source",
                      "example": "ODS-AD-Test [source-999999]",
                      "readOnly": true
                    },
                    "objectCount": {
                      "type": "integer",
                      "description": "The number of objects that were fetched by the connector.",
                      "example": 25,
                      "readOnly": true
                    },
                    "elapsedMillis": {
                      "type": "integer",
                      "description": "The number of milliseconds spent on the entire request.",
                      "example": 1055,
                      "readOnly": true
                    },
                    "resourceObjects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Resource Object",
                        "description": "Representation of the object which is returned from source connectors.",
                        "properties": {
                          "instance": {
                            "description": "Identifier of the specific instance where this object resides.",
                            "type": "string",
                            "readOnly": true
                          },
                          "identity": {
                            "description": "Native identity of the object in the Source.",
                            "type": "string",
                            "example": "CN=Aaron Carr,OU=test1,DC=test2,DC=test",
                            "readOnly": true
                          },
                          "uuid": {
                            "description": "Universal unique identifier of the object in the Source.",
                            "type": "string",
                            "example": "{abf7bd9b-68b4-4d21-9b70-870c58ebf844}",
                            "readOnly": true
                          },
                          "previousIdentity": {
                            "description": "Native identity that the object has previously.",
                            "type": "string",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Display name for this object.",
                            "type": "string",
                            "example": "Aaron Carr",
                            "readOnly": true
                          },
                          "objectType": {
                            "description": "Type of object.",
                            "type": "string",
                            "example": "account",
                            "readOnly": true
                          },
                          "incomplete": {
                            "description": "A flag indicating that this is an incomplete object. Used in special cases where the connector has to return account information in several phases and the objects might not have a complete set of all account attributes. The attributes in this object will replace the corresponding attributes in the Link, but no other Link attributes will be changed.",
                            "type": "boolean",
                            "example": false,
                            "readOnly": true
                          },
                          "incremental": {
                            "description": "A flag indicating that this is an incremental change object. This is similar to incomplete but it also means that the values of any multi-valued attributes in this object should be merged with the existing values in the Link rather than replacing the existing Link value.",
                            "type": "boolean",
                            "example": false,
                            "readOnly": true
                          },
                          "delete": {
                            "description": "A flag indicating that this object has been deleted. This is set only when doing delta aggregation and the connector supports detection of native deletes.",
                            "type": "boolean",
                            "example": false,
                            "readOnly": true
                          },
                          "remove": {
                            "description": "A flag set indicating that the values in the attributes represent things to remove rather than things to add. Setting this implies incremental. The values which are always for multi-valued attributes are removed from the current values.",
                            "type": "boolean",
                            "example": false,
                            "readOnly": true
                          },
                          "missing": {
                            "description": "A list of attribute names that are not included in this object. This is only used with SMConnector and will only contain \"groups\".",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "missFieldOne",
                              "missFieldTwo"
                            ],
                            "readOnly": true
                          },
                          "attributes": {
                            "description": "Attributes of this ResourceObject.",
                            "type": "object",
                            "example": {
                              "telephoneNumber": "12-(345)678-9012",
                              "mail": "example@test.com",
                              "displayName": "Aaron Carr"
                            },
                            "readOnly": true
                          },
                          "finalUpdate": {
                            "description": "In Aggregation, for sparse object the count for total accounts scanned identities updated is not incremented.",
                            "type": "boolean",
                            "example": false,
                            "readOnly": true
                          }
                        }
                      },
                      "description": "Fetched objects from the source connector.",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/ping-cluster": {
      "post": {
        "operationId": "pingCluster",
        "tags": [
          "Sources"
        ],
        "summary": "Ping cluster for the source connector",
        "description": "This endpoint validates that the cluster being used by the source is reachable from IdentityNow.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:source-connector:write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Source",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of pinging connection with the source connector.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Status Response",
                  "description": "Response model for connection check, configuration test and ping of source connectors.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the source",
                      "example": "2c91808568c529c60168cca6f90c1313",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the source",
                      "example": "ODS-AD-Test [source-999999]",
                      "readOnly": true
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ],
                      "description": "The status of the health check.",
                      "example": "SUCCESS",
                      "readOnly": true
                    },
                    "elapsedMillis": {
                      "type": "integer",
                      "description": "The number of milliseconds spent on the entire request.",
                      "example": 1000,
                      "readOnly": true
                    },
                    "details": {
                      "type": "object",
                      "description": "The document contains the results of the health check.\nThe schema of this document depends on the type of source used.\n",
                      "readOnly": true,
                      "example": {
                        "useTLSForIQService": false,
                        "IQService": {
                          "TLS Port": 0,
                          ".NET CLR Version": "4.0.30319.42000",
                          "SecondaryServiceStatus": "Running",
                          "Port": 5050,
                          "Host": "AUTOMATION-AD",
                          "Name": "IQService",
                          "IQServiceStatus": "Running",
                          "SecondaryService": "IQService-Instance1-Secondary",
                          "Version": "IQService Sep-2020",
                          "secondaryPort": 5051,
                          "OS Architecture": "AMD64",
                          "Operating System": "Microsoft Windows Server 2012 R2 Standard",
                          "highestDotNetVersion": "4.8 or later",
                          "Build Time": "09/22/2020 06:34 AM -0500"
                        },
                        "IQServiceClientAuthEnabled": false,
                        "requestProcessedOn": "1/19/2021 1:47:14 PM"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/test-configuration": {
      "post": {
        "operationId": "testConfiguration",
        "tags": [
          "Sources"
        ],
        "summary": "Test configuration for the source connector",
        "description": "This endpoint performs a more detailed validation of the source's configuration that can take longer than the lighter weight credential validation performed by the checkConnection API.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:source-connector:write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Source",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of testing source connector configuration with response from it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1connector~1ping-cluster/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connectors/source-config": {
      "get": {
        "operationId": "getSourceConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Gets source config with language translations",
        "description": "Looks up and returns the source config for the requested source id after populating the source config values and applying language translations.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Source id"
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "no",
                "fi",
                "sv",
                "ru",
                "pt",
                "ko",
                "zh-TW",
                "en",
                "it",
                "fr",
                "zh-CN",
                "hu",
                "es",
                "cs",
                "ja",
                "pl",
                "da",
                "nl"
              ]
            },
            "description": "The locale to apply to the config. If no viable locale is given, it will default to \"en\""
          }
        ],
        "responses": {
          "200": {
            "description": "A Connector Detail object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The connector name",
                      "example": "JDBC"
                    },
                    "sourceConfigXml": {
                      "type": "string",
                      "description": "XML representation of the source config data",
                      "example": "<Form connectorName='Active Directory - Direct' directConnect='true' name='Active Directory' status='released' type='SourceConfig' xmlns='http://www.sailpoint.com/xsd/sailpoint_form_1_0.xsd'>\n\t<Field defaultValue='true' hidden='true' name='cloudAuthEnabled' type='boolean' value='true'> </Field> </Form>"
                    },
                    "sourceConfig": {
                      "type": "string",
                      "description": "JSON representation of the source config data",
                      "example": {
                        "Form": {
                          "Field": {
                            "_defaultValue": "true",
                            "_hidden": "true",
                            "_name": "cloudAuthEnabled",
                            "_type": "boolean",
                            "_value": "true"
                          },
                          "_xmlns": "http://www.sailpoint.com/xsd/sailpoint_form_1_0.xsd",
                          "_connectorName": "Active Directory - Direct",
                          "_directConnect": "true",
                          "_name": "Active Directory",
                          "_status": "released",
                          "_type": "SourceConfig",
                          "__text": "\\n\\t"
                        }
                      }
                    },
                    "directConnect": {
                      "type": "boolean",
                      "description": "true if the source is a direct connect source",
                      "example": true
                    },
                    "fileUpload": {
                      "type": "boolean",
                      "description": "Connector config's file upload attribute, false if not there",
                      "example": false
                    },
                    "uploadedFiles": {
                      "type": "string",
                      "description": "List of uploaded file strings for the connector",
                      "example": []
                    },
                    "connectorMetadata": {
                      "type": "object",
                      "description": "Object containing metadata pertinent to the UI to be used",
                      "example": {
                        "supportedUI": "EXTJS"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies": {
      "get": {
        "operationId": "listProvisioningPolicies",
        "tags": [
          "Sources"
        ],
        "summary": "Lists ProvisioningPolicies",
        "description": "This end-point lists all the ProvisioningPolicies in IdentityNow.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy-list:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ProvisioningPolicyDto objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Create Provisioning Policy",
        "description": "This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:create"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "usageType": {
                    "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies~1%7BusageType%7D/put/parameters/1/schema"
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the attribute.",
                          "example": "userName"
                        },
                        "transform": {
                          "type": "object"
                        },
                        "attributes": {
                          "type": "object"
                        },
                        "isRequired": {
                          "type": "boolean",
                          "readOnly": true,
                          "description": "Flag indicating whether or not the attribute is required.",
                          "default": false
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of the attribute.",
                          "example": "string"
                        },
                        "isMultiValued": {
                          "type": "boolean",
                          "description": "Flag indicating whether or not the attribute is multi-valued.",
                          "default": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created ProvisioningPolicyDto object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies/{usageType}": {
      "get": {
        "operationId": "getProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Retrieves Provisioning Policy by Use Type",
        "description": "This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow.\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies~1%7BusageType%7D/put/parameters/1/schema"
            },
            "description": "The type of ProvisioningPolicy usage.",
            "example": "REGISTER"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ProvisioningPolicyDto was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "replaceProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Update Provisioning Policy by Use Type",
        "description": "This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow.\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": false,
              "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "ASSIGN",
                "UNASSIGN",
                "CREATE_GROUP",
                "UPDATE_GROUP",
                "DELETE_GROUP",
                "REGISTER",
                "CREATE_IDENTITY",
                "UPDATE_IDENTITY",
                "EDIT_GROUP",
                "ENABLE",
                "DISABLE",
                "UNLOCK",
                "CHANGE_PASSWORD"
              ]
            },
            "description": "The type of ProvisioningPolicy usage."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ProvisioningPolicyDto was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Partial update of Provisioning Policy",
        "description": "This API selectively updates an existing Provisioning Policy using a JSONPatch payload.\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies~1%7BusageType%7D/put/parameters/1/schema"
            },
            "description": "The type of ProvisioningPolicy usage."
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the schema.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "description": "A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                "example": "{\n\t\"op\": \"replace\",\n\t\"path\": \"/description\",\n\t\"value\": \"A new description\"\n}",
                "items": {
                  "type": "object",
                  "description": "A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                  "required": [
                    "op",
                    "path"
                  ],
                  "properties": {
                    "op": {
                      "type": "string",
                      "description": "The operation to be performed",
                      "enum": [
                        "add",
                        "remove",
                        "replace",
                        "move",
                        "copy",
                        "test"
                      ],
                      "example": "replace"
                    },
                    "path": {
                      "type": "string",
                      "description": "A string JSON Pointer representing the target path to an element to be affected by the operation",
                      "example": "/description"
                    },
                    "value": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "object"
                              }
                            ]
                          }
                        }
                      ],
                      "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
                      "example": "New description"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ProvisioningPolicyDto was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Delete Provisioning Policy by Usage Type",
        "description": "Deletes the provisioning policy with the specified usage on an application.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "schema": {
              "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies~1%7BusageType%7D/put/parameters/1/schema"
            },
            "description": "The type of ProvisioningPolicy usage."
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "The ProvisioningPolicyDto was successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies/bulk-update": {
      "post": {
        "operationId": "bulkUpdateProvisioningPolicies",
        "tags": [
          "Sources"
        ],
        "summary": "Bulk Update Provisioning Policies",
        "description": "This end-point updates a list of provisioning policies on the specified source in IdentityNow.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "bearerAuth": [
              "idn:provisioning-policy-bulk:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of the ProvisioningPolicyDto was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1sources~1%7BsourceId%7D~1provisioning-policies/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/schemas": {
      "get": {
        "operationId": "listSchemas",
        "tags": [
          "Sources"
        ],
        "summary": "Lists the Schemas that exist on the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "query",
            "name": "include-types",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized.",
            "example": "group"
          }
        ],
        "responses": {
          "200": {
            "description": "The Schemas were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Creates a new Schema on the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the Schema.",
                    "example": "2c9180835d191a86015d28455b4a2329"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Schema.",
                    "example": "account"
                  },
                  "nativeObjectType": {
                    "type": "string",
                    "description": "The name of the object type on the native system that the schema represents.",
                    "example": "User"
                  },
                  "identityAttribute": {
                    "type": "string",
                    "description": "The name of the attribute used to calculate the unique identifier for an object in the schema.",
                    "example": "sAMAccountName"
                  },
                  "displayAttribute": {
                    "type": "string",
                    "description": "The name of the attribute used to calculate the display value for an object in the schema.",
                    "example": "distinguishedName"
                  },
                  "hierarchyAttribute": {
                    "type": "string",
                    "description": "The name of the attribute whose values represent other objects in a hierarchy. Only relevant to group schemas.",
                    "example": "memberOf"
                  },
                  "includePermissions": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the include permissions with the object data when aggregating the schema.",
                    "example": false
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema/properties/features/items"
                    },
                    "description": "The features that the schema supports.",
                    "example": [
                      "PROVISIONING",
                      "NO_PERMISSIONS_PROVISIONING",
                      "GROUPS_HAVE_MEMBERS"
                    ]
                  },
                  "configuration": {
                    "type": "object",
                    "description": "Holds any extra configuration data that the schema may require.",
                    "example": {
                      "groupMemberAttribute": "member"
                    }
                  },
                  "attributes": {
                    "type": "array",
                    "description": "The attribute definitions which form the schema.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the attribute.",
                          "example": "sAMAccountName"
                        },
                        "type": {
                          "description": "The type of the attribute.",
                          "example": "string",
                          "type": "string",
                          "enum": [
                            "STRING",
                            "LONG",
                            "INT",
                            "BOOLEAN"
                          ]
                        },
                        "schema": {
                          "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema",
                          "description": "A reference to the schema on the source to which the values of the attribute map.",
                          "example": {
                            "type": "CONNECTOR_SCHEMA",
                            "id": "2c9180866166b5b0016167c32ef31a66",
                            "name": "group"
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "A human-readable description of the attribute."
                        },
                        "isMulti": {
                          "type": "boolean",
                          "description": "Flag indicating whether or not the attribute is multi-valued.",
                          "example": false
                        },
                        "isEntitlement": {
                          "type": "boolean",
                          "description": "Flag indicating whether or not the attribute is an entitlement.",
                          "example": false
                        },
                        "isGroup": {
                          "type": "boolean",
                          "description": "Unmodifiable flag indicating whether or not the attribute represents a group.",
                          "example": false,
                          "readOnly": true
                        }
                      }
                    },
                    "example": [
                      {
                        "name": "sAMAccountName",
                        "type": "string",
                        "isMultiValued": false,
                        "isEntitlement": false,
                        "isGroup": false
                      },
                      {
                        "name": "memberOf",
                        "type": "string",
                        "description": "Group membership",
                        "isMultiValued": true,
                        "isEntitlement": true,
                        "isGroup": true
                      }
                    ]
                  },
                  "created": {
                    "type": "string",
                    "description": "The date the Schema was created.",
                    "format": "date-time",
                    "example": "2019-12-24T22:32:58.104Z"
                  },
                  "modified": {
                    "type": "string",
                    "description": "The date the Schema was last modified.",
                    "format": "date-time",
                    "example": "2019-12-31T20:22:28.104Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Schema was successfully created on the specified Source.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/schemas/{schemaId}": {
      "get": {
        "operationId": "getSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Retrieves the Schema by id from the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Schema was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "replaceSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Performs a full update on a Schema on the specified Source.",
        "description": "This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.\n* id\n* name\n* created\n* modified\nAny attempt to modify these fields will result in an error response with a status code of 400.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Schema was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Performs a partial update to the Schema on the specified Source using the JSONPatch specification.",
        "description": "This API can be used to selectively update an existing Schema using a JSONPatch payload. Some fields of the Schema cannot be updated. These fields are listed below.\n* id\n* name\n* created\n* modified",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the schema.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/displayAttribute",
                  "value": {
                    "new-display-attribute": null
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Schema was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Deletes a Schema by id on the specified Source in IdentityNow.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "The Schema was successfully deleted."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sources/{id}/schemas/accounts": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Downloads source accounts schema template",
        "operationId": "downloadSourceAccountsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the file",
            "content": {
              "text/csv": {
                "example": "id,name,givenName,familyName,e-mail,location,manager,groups,startDate,endDate"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:source-schema:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Uploads source accounts schema template",
        "description": "This API uploads a source schema template file to configure a source's account attributes.",
        "operationId": "uploadSourceAccountsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:source-schema:update"
            ]
          }
        ]
      }
    },
    "/sources/{id}/schemas/entitlements": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Downloads source entitlements schema template",
        "operationId": "downloadSourceEntitlementsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "schemaName",
            "schema": {
              "type": "string"
            },
            "description": "Name of entitlement schema",
            "example": "?schemaName=group"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the file",
            "content": {
              "text/csv": {
                "example": "id,name,displayName,created,description,modified,entitlements,groups,permissions"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:source-schema:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Uploads source entitlements schema template",
        "description": "This API uploads a source schema template file to configure a source's entitlement attributes.",
        "operationId": "uploadSourceEntitlementsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "schemaName",
            "schema": {
              "type": "string"
            },
            "description": "Name of entitlement schema",
            "example": "?schemaName=group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources~1%7BsourceId%7D~1schemas/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:source-schema:update"
            ]
          }
        ]
      }
    },
    "/sources/{sourceId}/upload-connector-file": {
      "post": {
        "operationId": "uploadConnectorFile",
        "tags": [
          "Sources"
        ],
        "summary": "This API uploads a connector file to a source's S3 bucket",
        "description": "This uploads a supplemental source connector file (like jdbc driver jars) to a source's S3 bucket. This also sends ETS and Audit events.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Uploaded the file successfully and sent all post-upload events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sources/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/tagged-objects": {
      "get": {
        "operationId": "listTaggedObjects",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "List Tagged Objects",
        "description": "This API returns a list of all tagged objects.\n\nAny authenticated token may be used to call this API.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**objectRef.id**: *eq, in*\n\n**objectRef.type**: *eq, in*\n\n**tagName**: *eq, in*",
            "example": "tagName eq \"BU_FINANCE\"",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all tagged objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1tagged-objects/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "addTagToObject",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Add Tag to Object",
        "description": "This adds a tag to an object.\n\nAny authenticated token may be used to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "objectRef": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Labels to be applied to an Object",
                    "example": [
                      "BU_FINANCE",
                      "PCI"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1tagged-objects/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "201": {
            "description": "Created."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/tagged-objects/{type}": {
      "get": {
        "operationId": "listTaggedObjectsByType",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "List Tagged Objects",
        "description": "This API returns a list of all tagged objects by type.\n\nAny authenticated token may be used to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ROLE",
                "IDENTITY",
                "SOD_POLICY"
              ]
            },
            "required": true,
            "description": "The type of tagged object to retrieve.",
            "example": "ROLE"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**objectRef.id**: *eq*\n\n**objectRef.type**: *eq*",
            "example": "objectRef.id eq \"2c91808568c529c60168cca6f90c1313\"",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all tagged objects for specified type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1tagged-objects/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/tagged-objects/{type}/{id}": {
      "get": {
        "operationId": "getTaggedObjectByTypeAndId",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Get Tagged Object",
        "description": "This gets a tagged object for the specified type.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ROLE",
                "IDENTITY",
                "SOD_POLICY"
              ]
            },
            "required": true,
            "description": "The type of tagged object to retrieve.",
            "example": "ROLE"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Tagged object by type and ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1tagged-objects/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updateTaggedObjectByTypeAndId",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Update Tagged Object",
        "description": "This updates a tagged object for the specified type.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ROLE",
                "IDENTITY",
                "SOD_POLICY"
              ]
            },
            "required": true,
            "description": "The type of tagged object to update."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the object reference to update.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1tagged-objects/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tagged object by type and ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1tagged-objects/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteTaggedObjectByTypeAndId",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Delete Tagged Object",
        "description": "This deletes a tagged object for the specified type.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ROLE",
                "IDENTITY",
                "SOD_POLICY"
              ]
            },
            "required": true,
            "description": "The type of tagged object to delete."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the object reference to delete.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/tagged-objects/bulk-add": {
      "post": {
        "operationId": "addTagsToManyObjects",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Tag Multiple Objects",
        "description": "This API adds tags to multiple objects.\n\nA token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "Supported object types are ROLE, IDENTITY and SOD_POLICY.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "objectRefs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Label to be applied to an Object",
                    "example": [
                      "BU_FINANCE",
                      "PCI"
                    ]
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "APPEND",
                      "MERGE"
                    ],
                    "default": "APPEND",
                    "description": "If APPEND, tags are appended to the list of tags for the object. A 400 error is returned if this would add duplicate tags to the object.\n\nIf MERGE, tags are merged with the existing tags. Duplicate tags are silently ignored.",
                    "example": "MERGE"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1tagged-objects~1bulk-add/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/tagged-objects/bulk-remove": {
      "post": {
        "operationId": "removeTagsToManyObject",
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Remove Tags from Multiple Objects",
        "description": "This API removes tags from multiple objects.\n\nA token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "requestBody": {
          "description": "Supported object types are ROLE, IDENTITY and SOD_POLICY.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1tagged-objects~1bulk-add/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/transforms": {
      "get": {
        "tags": [
          "Transforms"
        ],
        "summary": "List transforms",
        "description": "Gets a list of all saved transform objects.\nA token with transforms-list read authority is required to call this API.",
        "operationId": "getTransformsList",
        "parameters": [
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the transform to retrieve from the list.",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "example": "ExampleTransformName123"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\nFiltering is supported for the following fields and operators:\n**internal**: *eq*\n**name**: *eq*, *sw*",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transforms matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1transforms/post/requestBody/content/application~1json/schema"
                  }
                },
                "example": [
                  {
                    "id": "2cd78adghjkja34jh2b1hkjhasuecd",
                    "name": "Timestamp To Date",
                    "type": "dateFormat",
                    "attributes": {
                      "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                      "outputFormat": "yyyy/dd/MM"
                    },
                    "internal": false
                  },
                  {
                    "id": "2lkas8dhj4bkuakja77giih7l4ashh",
                    "name": "PrefixSubstring",
                    "type": "substring",
                    "attributes": {
                      "begin": 0,
                      "end": 3
                    },
                    "internal": true
                  }
                ]
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms-list:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Transforms"
        ],
        "summary": "Create transform",
        "description": "Creates a new transform object. Request body must include name, type, and attributes.\nA token with transform write authority is required to call this API.",
        "operationId": "createTransform",
        "requestBody": {
          "required": true,
          "description": "The transform to be created.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "DTO for representing an internally- or customer-defined transform.",
                "required": [
                  "name",
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Unique ID of this transform",
                    "example": "2cd78adghjkja34jh2b1hkjhasuecd"
                  },
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Unique name of this transform",
                    "example": "Timestamp To Date"
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The transform type (see [Transformations in IdentityNow Using Seaspray](https://community.sailpoint.com/docs/DOC-4629)).",
                    "example": "concat"
                  },
                  "attributes": {
                    "type": "object",
                    "description": "Meta-data about the transform. Values in this list are specific to the type of transform to be executed.",
                    "additionalProperties": true,
                    "example": {
                      "inputFormat": "MMM dd yyyy, HH:mm:ss.SSS",
                      "outputFormat": "yyyy/dd/MM"
                    }
                  },
                  "internal": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "Indicates whether this is an internal SailPoint-created transform or a customer-created transform",
                    "example": false
                  }
                }
              },
              "example": {
                "name": "Timestamp To Date",
                "type": "dateFormat",
                "attributes": {
                  "inputFormat": "MMM dd yyyy, HH:mm:ss.SSS",
                  "outputFormat": "yyyy/dd/MM"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates the transform was successfully created and returns its representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1transforms/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:write"
            ]
          }
        ]
      }
    },
    "/transforms/{id}": {
      "get": {
        "tags": [
          "Transforms"
        ],
        "summary": "Transform by ID",
        "description": "This API returns the transform specified by the given ID.\nA token with transform read authority is required to call this API.",
        "operationId": "getTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transform with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1transforms/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Transforms"
        ],
        "summary": "Update a transform",
        "description": "Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other attributes will result in an error.\nA token with transform write authority is required to call this API.",
        "operationId": "updateTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated transform object (must include \"name\", \"type\", and \"attributes\" fields).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1transforms/post/requestBody/content/application~1json/schema"
              },
              "example": {
                "name": "Timestamp To Date",
                "type": "dateFormat",
                "attributes": {
                  "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                  "outputFormat": "yyyy/dd/MM"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the transform was successfully updated and returns its new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1transforms/post/requestBody/content/application~1json/schema"
                },
                "example": {
                  "id": "2cd78adghjkja34jh2b1hkjhasuecd",
                  "name": "Timestamp To Date",
                  "type": "dateFormat",
                  "attributes": {
                    "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                    "outputFormat": "yyyy/dd/MM"
                  },
                  "internal": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Transforms"
        ],
        "summary": "Delete a transform",
        "description": "Deletes the transform specified by the given ID.\nA token with transform delete authority is required to call this API.",
        "operationId": "deleteTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "idn:transforms:delete"
            ]
          }
        ]
      }
    },
    "/translation-catalogs/{catalog-id}": {
      "get": {
        "operationId": "getMessageCatalogs",
        "summary": "Get Message catalogs",
        "tags": [
          "IAI Recommendations",
          "IAI Access Request Recommendations"
        ],
        "description": "The getMessageCatalogs API returns message catalog based on the language headers in the requested object.",
        "parameters": [
          {
            "in": "path",
            "name": "catalog-id",
            "schema": {
              "type": "string",
              "enum": [
                "recommender",
                "access-request-recommender"
              ]
            },
            "required": true,
            "description": "The ID of the message catalog."
          }
        ],
        "responses": {
          "200": {
            "description": "The message catalogs based on the request headers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageCatalogDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/triggers": {
      "get": {
        "operationId": "listTriggers",
        "tags": [
          "Triggers"
        ],
        "summary": "Retrieves a list of triggers",
        "description": "Gets a list of triggers.\nRequest will require a security scope of:  idn:trigger-service-subscriptions:read",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields:\n\n**id** **name**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of triggers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Trigger ID."
                      },
                      "name": {
                        "type": "string",
                        "description": "Trigger Name."
                      },
                      "type": {
                        "description": "Trigger Type.",
                        "type": "string",
                        "enum": [
                          "REQUEST_RESPONSE",
                          "FIRE_AND_FORGET"
                        ]
                      },
                      "description": {
                        "type": "string",
                        "description": "Trigger Description."
                      },
                      "inputSchema": {
                        "type": "string",
                        "description": "Trigger input Avro schema in JSON string format."
                      },
                      "exampleInput": {
                        "type": "object",
                        "description": "Example input derived from trigger input schema."
                      },
                      "outputSchema": {
                        "type": "string",
                        "description": "Trigger output Avro Schema in JSON string format."
                      },
                      "exampleOutput": {
                        "type": "object",
                        "description": "Example output derived from trigger output schema."
                      }
                    }
                  },
                  "example": [
                    {
                      "id": "idn:access-requested",
                      "name": "Access Requested",
                      "type": "REQUEST_RESPONSE",
                      "inputSchema": "{\"type\":\"record\",\"name\":\"AccessRequestedInput\",\"fields\":[{\"name\":\"identityId\",\"type\":\"string\"}]}",
                      "exampleInput": {
                        "identityId": "201327fda1c44704ac01181e963d463c"
                      },
                      "outputSchema": "{\"type\":\"record\",\"name\":\"AccessRequestedOutput\",\"fields\":[{\"name\":\"approved\",\"type\":\"boolean\"}]}",
                      "exampleOutput": {
                        "approved": true
                      }
                    },
                    {
                      "id": "idn:access-approval",
                      "name": "Access Approval",
                      "type": "FIRE_AND_FORGET",
                      "inputSchema": "{\"type\":\"record\",\"name\":\"AccessRequestedInput\",\"fields\":[{\"name\":\"identityId\",\"type\":\"string\"},{\"name\":\"approved\",\"type\":\"boolean\"}]}",
                      "exampleInput": {
                        "approved": true,
                        "identityId": "201327fda1c44704ac01181e963d463c"
                      },
                      "outputSchema": null,
                      "exampleOutput": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/trigger-subscriptions": {
      "get": {
        "operationId": "listSubscriptions",
        "tags": [
          "Triggers"
        ],
        "summary": "Retrieves a list of subscriptions",
        "description": "Gets a list of all trigger subscriptions.\nRequest will require a security scope of:  idn:trigger-service-subscriptions:read",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*\n\n**triggerId**: *eq*\n\n**type**: *eq*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields:\n\n**triggerId** **triggerName**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1trigger-subscriptions~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Create a Subscription",
        "description": "This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required:\n* HTTP subscriptions require httpConfig\n* EventBridge subscriptions require eventBridgeConfig\n\nA token with trigger service subscriptions:create authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Subscription ID.",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "name": {
                    "type": "string",
                    "description": "Subscription name.",
                    "example": "Access request subscription"
                  },
                  "description": {
                    "type": "string",
                    "description": "Subscription description.",
                    "example": "Access requested to site xyz"
                  },
                  "triggerId": {
                    "type": "string",
                    "description": "ID of trigger subscribed to.",
                    "example": "idn:access-requested"
                  },
                  "triggerName": {
                    "type": "string",
                    "description": "Trigger name of trigger subscribed to.",
                    "example": "Access Requested"
                  },
                  "type": {
                    "description": "Subscription type. **NOTE** If type is EVENTBRIDGE, then eventBridgeConfig is required. If type is HTTP, then httpConfig is required.",
                    "type": "string",
                    "enum": [
                      "HTTP",
                      "EVENTBRIDGE"
                    ]
                  },
                  "responseDeadline": {
                    "type": "string",
                    "description": "Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.",
                    "example": "PT1H",
                    "default": "PT1H"
                  },
                  "httpConfig": {
                    "description": "Config required if HTTP subscription type is used.",
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL of the external/custom integration.",
                        "example": "https://www.example.com"
                      },
                      "httpDispatchMode": {
                        "type": "string",
                        "description": "HTTP response modes, i.e. SYNC, ASYNC, or DYNAMIC.",
                        "enum": [
                          "SYNC",
                          "ASYNC",
                          "DYNAMIC"
                        ],
                        "example": "SYNC"
                      },
                      "httpAuthenticationType": {
                        "type": "string",
                        "description": "Defines the HTTP Authentication type. Additional values may be added in the future.\n\nIf *NO_AUTH* is selected, no extra information will be in HttpConfig.\n\nIf *BASIC_AUTH* is selected, HttpConfig will include BasicAuthConfig with Username and Password as strings.\n\nIf *BEARER_TOKEN* is selected, HttpConfig will include BearerTokenAuthConfig with Token as string.",
                        "enum": [
                          "NO_AUTH",
                          "BASIC_AUTH",
                          "BEARER_TOKEN"
                        ],
                        "default": "NO_AUTH",
                        "example": "BASIC_AUTH"
                      },
                      "basicAuthConfig": {
                        "type": "object",
                        "properties": {
                          "userName": {
                            "type": "string",
                            "example": "user@example.com"
                          },
                          "password": {
                            "type": "string",
                            "example": "eRtg4%6yuI!"
                          }
                        },
                        "description": "Config required if BASIC_AUTH is used."
                      },
                      "bearerTokenAuthConfig": {
                        "type": "object",
                        "properties": {
                          "bearerToken": {
                            "type": "string",
                            "description": "Bearer token",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIzNTkwNWQ4Mi01NTgzLTRjZjAtYTBiZi0wYTJ"
                          }
                        },
                        "description": "Config required if BEARER_TOKEN authentication is used."
                      }
                    },
                    "required": [
                      "url",
                      "httpDispatchMode"
                    ]
                  },
                  "eventBridgeConfig": {
                    "description": "Config required if EVENTBRIDGE subscription type is used.",
                    "type": "object",
                    "properties": {
                      "awsAccount": {
                        "type": "string",
                        "description": "AWS Account Number (12-digit number) that has the EventBridge Partner Event Source Resource.",
                        "example": "123456789012"
                      },
                      "awsRegion": {
                        "type": "string",
                        "description": "AWS Region that has the EventBridge Partner Event Source Resource. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a full list of available values.",
                        "example": "us-west-1"
                      }
                    },
                    "required": [
                      "awsAccount",
                      "awsRegion"
                    ]
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether subscription should receive REAL_TIME trigger invocations or not.\n\nTEST trigger invocations are always enabled regardless of this option.",
                    "default": true
                  },
                  "filter": {
                    "type": "string",
                    "description": "JsonPath filter to conditionally invoke trigger when expression evaluates to true.",
                    "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                },
                "required": [
                  "triggerId",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New subscription to a trigger. The trigger can now be invoked by the method defined in the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1trigger-subscriptions~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/trigger-subscriptions/{id}": {
      "put": {
        "operationId": "updateSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Update a Subscription",
        "description": "Updates an existing subscription to a trigger.\nRequest will require a security scope of:  idn:trigger-service-subscriptions:update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Subscription ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "requestBody": {
          "description": "This API updates a subscription in IdentityNow, using a full object representation. In other words, the existing Subscription is completely replaced. Following fields are immutable:\n\n* id\n* triggerId\n\nAttempts to modify these fields result in 400.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Subscription ID.",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "name": {
                    "type": "string",
                    "description": "Subscription name.",
                    "example": "Access request subscription"
                  },
                  "description": {
                    "type": "string",
                    "description": "Subscription description.",
                    "example": "Access requested to site xyz"
                  },
                  "triggerId": {
                    "type": "string",
                    "description": "ID of trigger subscribed to.",
                    "example": "idn:access-requested"
                  },
                  "triggerName": {
                    "type": "string",
                    "description": "Trigger name of trigger subscribed to.",
                    "example": "Access Requested"
                  },
                  "type": {
                    "$ref": "#/paths/~1trigger-subscriptions/post/requestBody/content/application~1json/schema/properties/type",
                    "description": "Subscription type. **NOTE** If type is EVENTBRIDGE, then eventBridgeConfig is required. If type is HTTP, then httpConfig is required."
                  },
                  "responseDeadline": {
                    "type": "string",
                    "description": "Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.",
                    "example": "PT1H",
                    "default": "PT1H"
                  },
                  "httpConfig": {
                    "description": "Config required if HTTP subscription type is used.",
                    "$ref": "#/paths/~1trigger-subscriptions/post/requestBody/content/application~1json/schema/properties/httpConfig"
                  },
                  "eventBridgeConfig": {
                    "description": "Config required if EVENTBRIDGE subscription type is used.",
                    "$ref": "#/paths/~1trigger-subscriptions/post/requestBody/content/application~1json/schema/properties/eventBridgeConfig"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether subscription should receive REAL_TIME trigger invocations or not.\n\nTEST trigger invocations are always enabled regardless of this option.",
                    "default": true
                  },
                  "filter": {
                    "type": "string",
                    "description": "JsonPath filter to conditionally invoke trigger when expression evaluates to true.",
                    "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                },
                "required": [
                  "id",
                  "triggerId",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1trigger-subscriptions~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Delete a Subscription",
        "description": "Deletes an existing subscription to a trigger.\nRequest will require a security scope of:  idn:trigger-service-subscriptions:delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Subscription ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "Subscription is deleted successfully."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/trigger-subscriptions/validate-filter": {
      "post": {
        "operationId": "validateFilter",
        "tags": [
          "Triggers"
        ],
        "summary": "Validate a Subscription Filter",
        "description": "Validates a JsonPath filter expression against a provided mock input.\nRequest requires a security scope of: \nidn:trigger-service-subscriptions-validate-filter:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "input",
                  "filter"
                ],
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "Mock input to evaluate filter expression against.",
                    "example": {
                      "identityId": "201327fda1c44704ac01181e963d463c"
                    }
                  },
                  "filter": {
                    "type": "string",
                    "description": "JsonPath filter to conditionally invoke trigger when expression evaluates to true.",
                    "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                }
              },
              "example": {
                "input": {
                  "identityId": "201327fda1c44704ac01181e963d463c"
                },
                "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean whether specified filter expression is valid against the input.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean",
                      "description": "True if specified filter expression is valid against the input, false otherwise."
                    }
                  }
                },
                "example": {
                  "isValid": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/trigger-invocations/status": {
      "get": {
        "operationId": "listInvocationStatus",
        "tags": [
          "Triggers"
        ],
        "summary": "List latest Invocation Statuses",
        "description": "Gets a list of latest invocation statuses.\nStatuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours.\nRequest will require a security scope of:  idn:trigger-service-invocation-status:read",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**triggerId**: *eq* **subscriptionId**: *eq*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields:\n\n**triggerId** **subscriptionName** **created** **completed**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of latest invocation statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Invocation ID",
                        "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                      },
                      "triggerId": {
                        "type": "string",
                        "description": "Trigger ID",
                        "example": "idn:access-requested"
                      },
                      "subscriptionId": {
                        "type": "string",
                        "description": "Subscription ID",
                        "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                      },
                      "type": {
                        "type": "string",
                        "description": "Defines the Invocation type.\n\n*TEST* Invocation with Test type. User executed simulated event.\n\n*REAL_TIME* Invocation with Real Time type. IDN service executed runtime event.",
                        "enum": [
                          "TEST",
                          "REAL_TIME"
                        ]
                      },
                      "created": {
                        "type": "string",
                        "description": "Invocation created timestamp. ISO-8601 in UTC.",
                        "example": "2020-03-27T20:40:10.738Z"
                      },
                      "completed": {
                        "type": "string",
                        "description": "Invocation completed timestamp; empty fields imply invocation is in-flight or not completed. ISO-8601 in UTC.",
                        "example": "2020-03-27T20:42:14.738Z"
                      },
                      "startInvocationInput": {
                        "description": "Data related to start of trigger invocation.",
                        "type": "object",
                        "properties": {
                          "triggerId": {
                            "type": "string",
                            "description": "Trigger ID",
                            "example": "idn:access-requested"
                          },
                          "input": {
                            "type": "object",
                            "example": {
                              "identityId": "201327fda1c44704ac01181e963d463c"
                            },
                            "description": "Trigger input payload. Its schema is defined in the trigger definition."
                          },
                          "contentJson": {
                            "type": "object",
                            "example": {
                              "workflowId": 1234
                            },
                            "description": "JSON map of invocation metadata"
                          }
                        }
                      },
                      "completeInvocationInput": {
                        "description": "Data related to end of trigger invocation.",
                        "type": "object",
                        "properties": {
                          "localizedError": {
                            "type": "object",
                            "description": "Localized error message to indicate a failed invocation or error if any.",
                            "required": [
                              "locale",
                              "message"
                            ],
                            "properties": {
                              "locale": {
                                "description": "Message locale",
                                "type": "string"
                              },
                              "message": {
                                "description": "Message text",
                                "type": "string",
                                "example": "Error has occurred!"
                              }
                            }
                          },
                          "output": {
                            "type": "object",
                            "example": {
                              "approved": false
                            },
                            "description": "Trigger output that completed the invocation. Its schema is defined in the trigger definition."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/trigger-invocations/{id}/complete": {
      "post": {
        "operationId": "completeInvocation",
        "tags": [
          "Triggers"
        ],
        "summary": "Complete Trigger Invocation",
        "description": "Completes an invocation to REQUEST_RESPONSE trigger.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Invocation ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "Unique invocation secret that was generated when the invocation was created. Required to authenticate to the endpoint.",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "error": {
                    "type": "string",
                    "description": "The error message to indicate a failed invocation or error if any.",
                    "example": "Access request is denied."
                  },
                  "output": {
                    "type": "object",
                    "example": {
                      "approved": false
                    },
                    "description": "Trigger output to complete the invocation. Its schema is defined in the trigger definition."
                  }
                },
                "required": [
                  "secret",
                  "output"
                ]
              },
              "example": {
                "secret": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                "output": {
                  "approved": false
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/trigger-invocations/test": {
      "post": {
        "operationId": "startTestInvocation",
        "tags": [
          "Triggers"
        ],
        "summary": "Start a Test Invocation",
        "description": "Starts a test trigger invocation. Tenant must be subscribed to the trigger before it can be invoked.\nRequest requires a security scope of: \nidn:trigger-service-invocation-test:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "triggerId": {
                    "type": "string",
                    "example": "idn:access-requested",
                    "description": "Trigger ID"
                  },
                  "input": {
                    "type": "object",
                    "example": {
                      "identityId": "201327fda1c44704ac01181e963d463c"
                    },
                    "description": "Optional mock input to use for test invocation (must adhere to the input schema defined in the trigger).\n\nExample input defined in trigger definition is used instead of mock input is not provided."
                  },
                  "contentJson": {
                    "type": "object",
                    "example": {
                      "workflowId": 1234
                    },
                    "description": "JSON map of invocation metadata."
                  },
                  "subscriptionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                    ],
                    "description": "Optional IDs of subscriptions to invoke as part of this test invocation.\n\nTest invocation does not occur if subscription ID is not provided."
                  }
                },
                "required": [
                  "triggerId",
                  "contentJson"
                ]
              },
              "example": {
                "triggerId": "idn:access-requested",
                "input": {
                  "identityId": "201327fda1c44704ac01181e963d463c"
                },
                "contentJson": {
                  "workflowId": 1234
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test trigger invocations that have been started for specified subscription(s).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Invocation ID",
                        "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                      },
                      "triggerId": {
                        "type": "string",
                        "description": "Trigger ID",
                        "example": "idn:access-requested"
                      },
                      "secret": {
                        "type": "string",
                        "description": "Unique invocation secret.",
                        "example": "0f979022-08be-44f2-b6f9-7393ec73ed9b"
                      },
                      "contentJson": {
                        "type": "object",
                        "example": {
                          "workflowId": 1234
                        },
                        "description": "JSON map of invocation metadata."
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204",
            "description": "Trigger invocation is skipped, because tenant has not subscribed to the specified trigger."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/verified-from-addresses": {
      "get": {
        "operationId": "listFromAddresses",
        "tags": [
          "Notifications"
        ],
        "summary": "List From Addresses",
        "description": "Retrieve a list of sender email addresses and their verification statuses",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**email**: *eq*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nSorting is supported for the following fields:\n\n**email**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Email Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1verified-from-addresses/post/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createVerifiedFromAddress",
        "tags": [
          "Notifications"
        ],
        "summary": "Create Verified From Address",
        "description": "Create a new sender email address and initiate verification process.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "example": "sender@example.com"
                  },
                  "verificationStatus": {
                    "type": "string",
                    "enum": [
                      "PENDING",
                      "SUCCESS",
                      "FAILED"
                    ]
                  }
                }
              },
              "example": {
                "email": "sender@example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New Verified Email Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1verified-from-addresses/post/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/verified-from-addresses/{id}": {
      "delete": {
        "operationId": "deleteVerifiedFromAddress",
        "tags": [
          "Notifications"
        ],
        "summary": "Delete Verified From Address",
        "description": "Delete a verified sender email address",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-policies": {
      "post": {
        "operationId": "createSodPolicy",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Create SOD Policy",
        "description": "This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy\nRequires role of ORG_ADMIN",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Policy id",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "name": {
                    "type": "string",
                    "description": "Policy Business Name",
                    "example": "policy-xyz"
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this SOD policy is created.",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this SOD policy is modified.",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of the SOD policy",
                    "example": "This policy ensures compliance of xyz"
                  },
                  "ownerRef": {
                    "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                  },
                  "externalPolicyReference": {
                    "type": "string",
                    "description": "Optional External Policy Reference",
                    "example": "XYZ policy"
                  },
                  "policyQuery": {
                    "type": "string",
                    "description": "Search query of the SOD policy",
                    "example": "@access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdg) AND @access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdf)"
                  },
                  "compensatingControls": {
                    "type": "string",
                    "description": "Optional compensating controls(Mitigating Controls)",
                    "example": "Have a manager review the transaction decisions for their \"out of compliance\" employee"
                  },
                  "correctionAdvice": {
                    "type": "string",
                    "description": "Optional correction advice",
                    "example": "Based on the role of the employee, managers should remove access that is not required for their job function."
                  },
                  "state": {
                    "type": "string",
                    "description": "whether the policy is enforced or not",
                    "enum": [
                      "ENFORCED",
                      "NOT_ENFORCED"
                    ],
                    "example": "ENFORCED"
                  },
                  "tags": {
                    "type": "array",
                    "description": "tags for this policy object",
                    "example": [
                      "TAG1",
                      "TAG2"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "creatorId": {
                    "type": "string",
                    "description": "Policy's creator ID",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "modifierId": {
                    "type": "string",
                    "description": "Policy's modifier ID",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "nullable": true
                  },
                  "violationOwnerAssignmentConfig": {
                    "nullable": true,
                    "type": "object",
                    "properties": {
                      "assignmentRule": {
                        "type": "string",
                        "enum": [
                          "MANAGER",
                          "STATIC"
                        ],
                        "description": "Details about the violations owner.\nMANAGER - identity's manager\nSTATIC - Governance Group or Identity",
                        "example": "MANAGER"
                      },
                      "ownerRef": {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                      }
                    }
                  },
                  "scheduled": {
                    "type": "boolean",
                    "description": "defines whether a policy has been scheduled or not",
                    "example": true
                  },
                  "type": {
                    "type": "string",
                    "description": "whether a policy is query based or conflicting access based",
                    "default": "CONFLICTING_ACCESS_BASED",
                    "enum": [
                      "GENERAL",
                      "CONFLICTING_ACCESS_BASED"
                    ],
                    "example": "GENERAL"
                  },
                  "conflictingAccessCriteria": {
                    "nullable": true,
                    "type": "object",
                    "properties": {
                      "leftCriteria": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Business name for the access construct list",
                            "example": "money-in"
                          },
                          "criteriaList": {
                            "type": "array",
                            "description": "List of criteria.  There is a min of 1 and max of 50 items in the list.",
                            "items": {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                            },
                            "example": [
                              {
                                "type": "ENTITLEMENT",
                                "id": "2c9180866166b5b0016167c32ef31a66",
                                "name": "Administrator"
                              },
                              {
                                "type": "ENTITLEMENT",
                                "id": "2c9180866166b5b0016167c32ef31a67",
                                "name": "Administrator"
                              }
                            ]
                          }
                        }
                      },
                      "rightCriteria": {
                        "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema/properties/conflictingAccessCriteria/properties/leftCriteria"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Conflicting Access Based Policy": {
                  "value": {
                    "name": "Conflicting-Policy-Name",
                    "description": "This policy ensures compliance of xyz",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "XYZ policy",
                    "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                    "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                    "state": "ENFORCED",
                    "tags": [
                      "string"
                    ],
                    "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "violationOwnerAssignmentConfig": {
                      "assignmentRule": "MANAGER",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Violation Owner Name"
                      }
                    },
                    "scheduled": true,
                    "type": "CONFLICTING_ACCESS_BASED",
                    "conflictingAccessCriteria": {
                      "leftCriteria": {
                        "name": "money-in",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a66"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a67"
                          }
                        ]
                      },
                      "rightCriteria": {
                        "name": "money-out",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a68"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a69"
                          }
                        ]
                      }
                    }
                  }
                },
                "General Policy": {
                  "value": {
                    "description": "Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c918087682f9a86016839c05e8f1aff",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "New policy",
                    "policyQuery": "policy query implementation",
                    "compensatingControls": "Compensating controls",
                    "correctionAdvice": "Correction advice",
                    "tags": [],
                    "state": "ENFORCED",
                    "scheduled": false,
                    "creatorId": "2c918087682f9a86016839c05e8f1aff",
                    "modifierId": null,
                    "violationOwnerAssignmentConfig": null,
                    "name": "General-Policy-Name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SOD policy created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "This policy ensures compliance of xyz",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a68"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a69"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listSodPolicies",
        "tags": [
          "SOD Policy"
        ],
        "summary": "List SOD Policies",
        "description": "This gets list of all SOD Policies.\nRequires role of ORG_ADMIN",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq* <br/> **name**: *eq* <br/> **state**: *eq*",
            "example": "id eq \"bc693f07e7b645539626c25954c58554\"",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all SOD Policies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema"
                  }
                },
                "example": [
                  {
                    "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "name": "Conflicting-Policy-Name",
                    "created": "2020-01-01T00:00:00.000000Z",
                    "modified": "2020-01-01T00:00:00.000000Z",
                    "description": "This policy ensures compliance of xyz",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "XYZ policy",
                    "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                    "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                    "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                    "state": "ENFORCED",
                    "tags": [
                      "string"
                    ],
                    "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "violationOwnerAssignmentConfig": {
                      "assignmentRule": "MANAGER",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Violation Owner Name"
                      }
                    },
                    "scheduled": true,
                    "type": "CONFLICTING_ACCESS_BASED",
                    "conflictingAccessCriteria": {
                      "leftCriteria": {
                        "name": "money-in",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a66"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a67"
                          }
                        ]
                      },
                      "rightCriteria": {
                        "name": "money-out",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a68"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a69"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "description": "Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c918087682f9a86016839c05e8f1aff",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "New policy",
                    "policyQuery": "policy query implementation",
                    "compensatingControls": "Compensating controls",
                    "correctionAdvice": "Correction advice",
                    "tags": [],
                    "state": "ENFORCED",
                    "scheduled": false,
                    "creatorId": "2c918087682f9a86016839c05e8f1aff",
                    "modifierId": null,
                    "violationOwnerAssignmentConfig": null,
                    "type": "GENERAL",
                    "conflictingAccessCriteria": null,
                    "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                    "name": "General-Policy-Name",
                    "created": "2020-05-12T19:47:38Z",
                    "modified": "2020-05-12T19:47:38Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}": {
      "get": {
        "operationId": "getSodPolicyById",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Get SOD Policy By ID",
        "description": "This gets specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "SOD policy ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "This policy ensures compliance of xyz",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a68"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a69"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePolicyById",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Update SOD Policy By ID",
        "description": "This updates a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the SOD policy to update.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema"
              },
              "examples": {
                "Conflicting Access Based Policy": {
                  "value": {
                    "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "name": "Conflicting-Policy-Name",
                    "created": "2020-01-01T00:00:00.000000Z",
                    "modified": "2020-01-01T00:00:00.000000Z",
                    "description": "Modified Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "XYZ policy",
                    "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                    "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                    "state": "ENFORCED",
                    "tags": [
                      "string"
                    ],
                    "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "violationOwnerAssignmentConfig": {
                      "assignmentRule": "MANAGER",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Violation Owner Name"
                      }
                    },
                    "scheduled": true,
                    "type": "CONFLICTING_ACCESS_BASED",
                    "conflictingAccessCriteria": {
                      "leftCriteria": {
                        "name": "money-in",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a66"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a67"
                          }
                        ]
                      },
                      "rightCriteria": {
                        "name": "money-out",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a68"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a69"
                          }
                        ]
                      }
                    }
                  }
                },
                "General Policy": {
                  "value": {
                    "description": "Modified Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c918087682f9a86016839c05e8f1aff",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "New policy",
                    "policyQuery": "policy query implementation",
                    "compensatingControls": "Compensating controls",
                    "correctionAdvice": "Correction advice",
                    "tags": [],
                    "state": "ENFORCED",
                    "scheduled": false,
                    "creatorId": "2c918087682f9a86016839c05e8f1aff",
                    "modifierId": null,
                    "violationOwnerAssignmentConfig": null,
                    "type": "GENERAL",
                    "conflictingAccessCriteria": null,
                    "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                    "name": "General-Policy-Name",
                    "created": "2020-05-12T19:47:38Z",
                    "modified": "2020-05-12T19:47:38Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SOD Policy by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "Modified description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a68"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a69"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Modified Description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSodPolicyById",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Delete SOD Policy by ID",
        "description": "This deletes a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the SOD Policy to delete.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "query",
            "name": "logical",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "whether this is soft delete i.e. logical true or hard delete",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSodPolicy",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Update a SOD Policy",
        "description": "Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the SOD Policy being modified.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* name\n* description\n* ownerRef\n* externalPolicyReference\n* compensatingControls\n* correctionAdvice\n* state\n* tags\n* violationOwnerAssignmentConfig\n* scheduled\n* conflictingAccessCriteria\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "examples": {
                "Conflicting Access Based Policy": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Modified description"
                    },
                    {
                      "op": "replace",
                      "path": "/conflictingAccessCriteria/leftCriteria/name",
                      "value": "money-in-modified"
                    },
                    {
                      "op": "replace",
                      "path": "/conflictingAccessCriteria/rightCriteria",
                      "value": {
                        "name": "money-out-modified",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c918087682f9a86016839c0509c1ab2"
                          }
                        ]
                      }
                    }
                  ]
                },
                "General Policy": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Modified description"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the SOD policy's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-policies/post/requestBody/content/application~1json/schema"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "Modified description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c918087682f9a86016839c0509c1ab2)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in-modified",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out-modified",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c918087682f9a86016839c0509c1ab2"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Modified description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}/schedule": {
      "get": {
        "operationId": "getSodPolicyScheduleById",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Get SOD Policy Schedule",
        "description": "This gets schedule for a specified SOD policy.\nRequires a role of ORG_ADMIN",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "SOD policy ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-policies~1%7Bid%7D~1schedule/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePolicyScheduleById",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Update SOD Policy schedule",
        "description": "This updates schedule for a specified SOD policy.\nRequires role of ORG_ADMIN",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the SOD policy to update its schedule.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "SOD Policy schedule name",
                    "example": "SCH-1584312283015"
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this SOD policy schedule is created.",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time when this SOD policy schedule is modified.",
                    "example": "2020-01-01T00:00:00.000000Z"
                  },
                  "description": {
                    "type": "string",
                    "description": "SOD Policy schedule description",
                    "example": "Schedule for policy xyz"
                  },
                  "schedule": {
                    "type": "object",
                    "description": "The schedule information.\n",
                    "properties": {
                      "type": {
                        "description": "Enum representing the currently supported schedule types.\n\nAdditional values may be added in the future without notice.\n",
                        "type": "string",
                        "enum": [
                          "DAILY",
                          "WEEKLY",
                          "MONTHLY",
                          "CALENDAR"
                        ],
                        "example": "WEEKLY"
                      },
                      "months": {
                        "$ref": "#/paths/~1sod-policies~1%7Bid%7D~1schedule/put/requestBody/content/application~1json/schema/properties/schedule/properties/days",
                        "description": "The months selected."
                      },
                      "days": {
                        "description": "The days selected.\n",
                        "example": {
                          "type": "LIST",
                          "values": [
                            "MON",
                            "WED",
                            "FRI"
                          ]
                        },
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "type": {
                            "description": "Enum representing the currently supported selector types.\n\nLIST - the *values* array contains one or more distinct values.\n\nRANGE - the *values* array contains two values: the start and end of the range, inclusive.\n\nAdditional values may be added in the future without notice.\n",
                            "type": "string",
                            "enum": [
                              "LIST",
                              "RANGE"
                            ],
                            "example": "LIST"
                          },
                          "values": {
                            "description": "The selected values.\n",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "MON",
                              "WED"
                            ]
                          },
                          "interval": {
                            "nullable": true,
                            "description": "The selected interval for RANGE selectors.\n",
                            "type": "integer",
                            "format": "int32",
                            "example": 3
                          }
                        },
                        "required": [
                          "type",
                          "values"
                        ]
                      },
                      "hours": {
                        "description": "The hours selected.\n",
                        "example": {
                          "type": "RANGE",
                          "values": [
                            "9",
                            "18"
                          ],
                          "interval": 3
                        },
                        "$ref": "#/paths/~1sod-policies~1%7Bid%7D~1schedule/put/requestBody/content/application~1json/schema/properties/schedule/properties/days"
                      },
                      "expiration": {
                        "description": "The schedule expiration date. Latest possible expiration date is '2038-01-19T03:14:07+0000'\n",
                        "type": "string",
                        "nullable": true,
                        "format": "date-time",
                        "example": "2018-06-25T20:22:28.104Z"
                      },
                      "timeZoneId": {
                        "description": "The ID of the time zone for the schedule.\n",
                        "type": "string",
                        "example": "GMT-06:00"
                      }
                    },
                    "required": [
                      "type",
                      "hours"
                    ]
                  },
                  "recipients": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    }
                  },
                  "emailEmptyResults": {
                    "type": "boolean",
                    "description": "Indicates if empty results need to be emailed",
                    "example": false
                  },
                  "creatorId": {
                    "type": "string",
                    "description": "Policy's creator ID",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  },
                  "modifierId": {
                    "type": "string",
                    "description": "Policy's modifier ID",
                    "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SOD Policy by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-policies~1%7Bid%7D~1schedule/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSodPolicyScheduleById",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Delete SOD Policy Schedule",
        "description": "This deletes schedule for a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the SOD Policy for which the schedule needs to be deleted.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}/violation-report/run": {
      "post": {
        "operationId": "runSodPolicy",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Runs SOD Policy Violation Report",
        "description": "This invokes processing of violation report for given SOD Policy. If policy reports more than 5000 violations, the report returns with violation limit exceeded message.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the SOD Policy to run.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-violation-report/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "status": "PENDING",
                  "type": "REPORT_RESULT",
                  "id": "2e8d8180-24bc-4d21-91c6-7affdb473b0d",
                  "name": "policy-xyz"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}/violation-report": {
      "get": {
        "operationId": "getSodViolationReportStatus",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Get SOD violation report status",
        "description": "This gets status for a violation report run task invoked already.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-violation-report/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "status": "SUCCESS",
                  "type": "REPORT_RESULT",
                  "id": "2e8d8180-24bc-4d21-91c6-7affdb473b0d",
                  "name": "policy-xyz"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-violations/predict": {
      "post": {
        "operationId": "predictViolations",
        "tags": [
          "SOD Violations"
        ],
        "summary": "Predict SOD violations for the given identity if they were granted the given access.",
        "description": "This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An identity with a set of access to be added",
                "required": [
                  "identityId",
                  "accessRefs"
                ],
                "type": "object",
                "properties": {
                  "identityId": {
                    "description": "Identity id to be checked.",
                    "type": "string",
                    "example": "2c91808568c529c60168cca6f90c1313"
                  },
                  "accessRefs": {
                    "description": "The list of ENTITLEMENTs to consider for calculating possible violations in a preventive check.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                        }
                      ],
                      "description": "The types of objects supported for SOD violations",
                      "properties": {
                        "type": {
                          "enum": [
                            "ENTITLEMENT"
                          ],
                          "example": "ENTITLEMENT",
                          "description": "The type of object that is referenced"
                        }
                      }
                    },
                    "example": [
                      {
                        "type": "ENTITLEMENT",
                        "id": "2c918087682f9a86016839c050861ab1",
                        "name": "CN=Information Access,OU=test,OU=test-service,DC=TestAD,DC=local"
                      },
                      {
                        "type": "ENTITLEMENT",
                        "id": "2c918087682f9a86016839c0509c1ab2",
                        "name": "CN=Information Technology,OU=test,OU=test-service,DC=TestAD,DC=local"
                      }
                    ]
                  }
                }
              },
              "example": {
                "identityId": "2c91808568c529c60168cca6f90c1313",
                "accessRefs": [
                  {
                    "type": "ENTITLEMENT",
                    "id": "2c918087682f9a86016839c050861ab1",
                    "name": "CN=Information Access,OU=test,OU=test-service,DC=TestAD,DC=local"
                  },
                  {
                    "type": "ENTITLEMENT",
                    "id": "2c918087682f9a86016839c0509c1ab2",
                    "name": "CN=Information Technology,OU=test,OU=test-service,DC=TestAD,DC=local"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Violation Contexts",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An object containing a listing of the SOD violation reasons detected by this check.",
                  "required": [
                    "requestId"
                  ],
                  "type": "object",
                  "properties": {
                    "violationContexts": {
                      "type": "array",
                      "description": "List of Violation Contexts",
                      "items": {
                        "type": "object",
                        "properties": {
                          "policy": {
                            "allOf": [
                              {
                                "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "SOD_POLICY"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "A very cool policy name"
                                  }
                                }
                              }
                            ],
                            "description": "The types of objects supported for SOD violations",
                            "properties": {
                              "type": {
                                "enum": [
                                  "ENTITLEMENT"
                                ],
                                "example": "ENTITLEMENT",
                                "description": "The type of object that is referenced"
                              }
                            }
                          },
                          "conflictingAccessCriteria": {
                            "nullable": false,
                            "type": "object",
                            "properties": {
                              "leftCriteria": {
                                "type": "object",
                                "properties": {
                                  "criteriaList": {
                                    "type": "array",
                                    "description": "List of exception criteria. There is a min of 1 and max of 50 items in the list.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "$ref": "#/paths/~1access-request-status/get/responses/200/content/application~1json/schema/items/properties/requesterComment/properties/author/properties/type",
                                              "description": "DTO type"
                                            },
                                            "id": {
                                              "type": "string",
                                              "description": "ID of the object to which this reference applies",
                                              "example": "2c91808568c529c60168cca6f90c1313"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "Human-readable display name of the object to which this reference applies",
                                              "example": "CN=HelpDesk,OU=test,OU=test-service,DC=TestAD,DC=local"
                                            },
                                            "existing": {
                                              "type": "boolean",
                                              "description": "Whether the subject identity already had that access or not",
                                              "example": true
                                            }
                                          },
                                          "description": "Access reference with addition of boolean existing flag to indicate whether the access was extant"
                                        }
                                      ],
                                      "description": "The types of objects supported for SOD violations",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "ENTITLEMENT"
                                          ],
                                          "example": "ENTITLEMENT",
                                          "description": "The type of object that is referenced"
                                        }
                                      }
                                    },
                                    "example": [
                                      {
                                        "type": "ENTITLEMENT",
                                        "id": "2c9180866166b5b0016167c32ef31a66",
                                        "existing": true
                                      },
                                      {
                                        "type": "ENTITLEMENT",
                                        "id": "2c9180866166b5b0016167c32ef31a67",
                                        "existing": false
                                      }
                                    ]
                                  }
                                }
                              },
                              "rightCriteria": {
                                "$ref": "#/paths/~1sod-violations~1predict/post/responses/200/content/application~1json/schema/properties/violationContexts/items/properties/conflictingAccessCriteria/properties/leftCriteria"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-violation-report-status/{reportResultId}": {
      "get": {
        "operationId": "getSodViolationReportRunStatus",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Get violation report run status",
        "description": "This gets status for a violation report run task invoked already.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "reportResultId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the report reference to retrieve.",
            "example": "2e8d8180-24bc-4d21-91c6-7affdb473b0d"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-violation-report/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "status": "SUCCESS",
                  "type": "REPORT_RESULT",
                  "id": "2e8d8180-24bc-4d21-91c6-7affdb473b0d",
                  "name": "policy-xyz"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-violation-report/run": {
      "post": {
        "operationId": "runAllPoliciesForOrg",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Runs all policies for Org.",
        "description": "Runs multi policy report for the Org. If a policy reports more than 5000 violation, the report mentions Violation limit exceeded for that policy. If the request is empty, report will run for all policies. Otherwise, report will run only for the filtered policy list provided.\nRequires role of ORG_ADMIN.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filteredPolicyList": {
                    "type": "array",
                    "description": "Multi-policy report will be run for this list of ids",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "filteredPolicyList": [
                  "b868cd40-ffa4-4337-9c07-1a51846cfa94",
                  "63a07a7b-39a4-48aa-956d-50c827deba2a"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1sod-violation-report/get/responses/200/content/application~1json/schema"
                },
                "example": {
                  "status": "PENDING",
                  "type": "REPORT_RESULT",
                  "id": "37b3b32a-f394-46f8-acad-b5223969fa68",
                  "name": "Multi Query Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-violation-report": {
      "get": {
        "operationId": "getSodAllReportRunStatus",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Get multi-report run task status",
        "description": "This gets status for a violation report for all policy run.\nRequires role of ORG_ADMIN.",
        "responses": {
          "200": {
            "description": "Status of the violation report run task for all policy run",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "SUCCESS",
                            "WARNING",
                            "ERROR",
                            "TERMINATED",
                            "TEMP_ERROR",
                            "PENDING"
                          ]
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "status": "SUCCESS",
                  "type": "REPORT_RESULT",
                  "id": "37b3b32a-f394-46f8-acad-b5223969fa68",
                  "name": "Multi Query Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-violation-report/{reportResultId}/download": {
      "get": {
        "operationId": "downloadDefaultViolationReport",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Download violation report",
        "description": "This allows to download a violation report for given report reference.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "reportResultId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the report reference to download.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns PolicyReport.zip that contains the violation report file",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/sod-violation-report/{reportResultId}/download/{fileName}": {
      "get": {
        "operationId": "downloadCustomViolationReport",
        "tags": [
          "SOD Policy"
        ],
        "summary": "Download custom violation report",
        "description": "This allows to download a specified named violation report  for given report reference.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "reportResultId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the report reference to download.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "fileName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Custom Name for the  file.",
            "example": "custom-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns zip file with given custom name that contains the violation report file",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/work-items": {
      "get": {
        "operationId": "listWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "List Work Items",
        "description": "This gets a collection of work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          },
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/completed": {
      "get": {
        "operationId": "completedWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Completed Work Items",
        "description": "This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.",
            "required": false
          },
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/3"
          }
        ],
        "responses": {
          "200": {
            "description": "List of completed work items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/count": {
      "get": {
        "operationId": "countWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Count Work Items",
        "description": "This gets a count of work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemsCount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/count/completed": {
      "get": {
        "operationId": "countCompletedWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Count Completed Work Items",
        "description": "This gets a count of completed work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemsCount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/summary": {
      "get": {
        "operationId": "summaryWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Work Items Summary",
        "description": "This gets a summary of work items belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemsSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/{id}": {
      "get": {
        "operationId": "getWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Get a Work Item",
        "description": "This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the work item."
          }
        ],
        "responses": {
          "200": {
            "description": "The work item with the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      },
      "post": {
        "operationId": "completeWorkItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Complete a Work Item",
        "description": "This API completes a work item. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A WorkItems object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/{id}/approve/{approvalItemId}": {
      "post": {
        "operationId": "approveApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Approve an Approval Item",
        "description": "This API approves an Approval Item. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "approvalItemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the approval item.",
            "example": "1211bcaa32112bcef6122adb21cef1ac"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/{id}/reject/{approvalItemId}": {
      "post": {
        "operationId": "rejectApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Reject an Approval Item",
        "description": "This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "approvalItemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the approval item.",
            "example": "1211bcaa32112bcef6122adb21cef1ac"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/bulk-approve/{id}": {
      "post": {
        "operationId": "bulkApproveApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Bulk approve Approval Items",
        "description": "This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/bulk-reject/{id}": {
      "post": {
        "operationId": "bulkRejectApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Bulk reject Approval Items",
        "description": "This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/work-items/{id}/submit-account-selection": {
      "post": {
        "operationId": "submitAccountSelection",
        "tags": [
          "Work Items"
        ],
        "summary": "Submit Account Selections",
        "description": "This API submits account selections. Either an admin, or the owning/current user must make this request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              },
              "example": {
                "fieldName": "fieldValue"
              }
            }
          },
          "description": "Account Selection Data map, keyed on fieldName"
        },
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          }
        }
      }
    },
    "/workflows": {
      "post": {
        "operationId": "createWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Create Workflow",
        "description": "Create a new workflow with the desired trigger and steps specified in the request body.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:create"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "required": [
                      "name",
                      "owner"
                    ]
                  },
                  {
                    "$ref": "#/paths/~1workflows~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                ]
              },
              "examples": {
                "Event Trigger": {
                  "description": "Workflow initiated by an event trigger",
                  "value": {
                    "name": "Send Email",
                    "owner": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "William Wilson"
                    },
                    "description": "Send an email to the identity who's attributes changed.",
                    "definition": {
                      "start": "Send Email Test",
                      "steps": {
                        "Send Email": {
                          "actionId": "sp:send-email",
                          "attributes": {
                            "body": "This is a test",
                            "from": "sailpoint@sailpoint.com",
                            "recipientId.$": "$.identity.id",
                            "subject": "test"
                          },
                          "nextStep": "success",
                          "selectResult": null,
                          "type": "action"
                        },
                        "success": {
                          "type": "success"
                        }
                      }
                    },
                    "enabled": false,
                    "trigger": {
                      "type": "EVENT",
                      "attributes": {
                        "id": "idn:identity-attributes-changed",
                        "filter": "$.changes[?(@.attribute == 'manager')]"
                      }
                    }
                  }
                },
                "Scheduled Trigger": {
                  "description": "Workflow initiated by a scheduled trigger",
                  "value": {
                    "name": "Send Email",
                    "owner": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "William Wilson"
                    },
                    "description": "Send an email to the identity who's attributes changed.",
                    "definition": {
                      "start": "Send Email Test",
                      "steps": {
                        "Send Email": {
                          "actionId": "sp:send-email",
                          "attributes": {
                            "body": "This is a test",
                            "from": "sailpoint@sailpoint.com",
                            "recipientId.$": "$.identity.id",
                            "subject": "test"
                          },
                          "nextStep": "success",
                          "selectResult": null,
                          "type": "action"
                        },
                        "success": {
                          "type": "success"
                        }
                      }
                    },
                    "enabled": false,
                    "trigger": {
                      "type": "SCHEDULED",
                      "attributes": {
                        "cronString": "0 * */3 */5 *"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Workflow ID. This is a UUID generated upon creation.",
                          "example": "d201c5e9-d37b-4aff-af14-66414f39d569"
                        },
                        "executionCount": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of times this workflow has been executed",
                          "example": 2
                        },
                        "failureCount": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of times this workflow has failed during execution",
                          "example": 0
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date and time the workflow was created",
                          "example": "2022-01-10T16:06:16.636381447Z"
                        },
                        "creator": {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The identity that created the workflow.",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "IDENTITY"
                                  ],
                                  "example": "IDENTITY",
                                  "description": "The type of object that is referenced to"
                                }
                              }
                            },
                            {
                              "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "$ref": "#/paths/~1workflows~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listWorkflows",
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflows",
        "description": "List all workflows in the tenant.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1workflows/post/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflows/{id}": {
      "get": {
        "operationId": "getWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow By Id",
        "description": "Get a single workflow by id.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1workflows/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updateWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Update Workflow",
        "description": "Perform a full update of a workflow.  The updated workflow object is returned in the response.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:update"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the workflow",
                    "example": "Send Email"
                  },
                  "owner": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1sources~1%7Bid%7D/delete/responses/202/content/application~1json/schema"
                      }
                    ],
                    "description": "The identity that owns the workflow.  The owner's permissions in IDN will determine what actions the workflow is allowed to perform.  Ownership can be changed by updating the owner in a PUT or PATCH request.",
                    "properties": {
                      "type": {
                        "enum": [
                          "IDENTITY"
                        ],
                        "example": "IDENTITY",
                        "description": "The type of object that is referenced"
                      }
                    },
                    "example": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "William Wilson"
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of what the workflow accomplishes",
                    "example": "Send an email to the identity who's attributes changed."
                  },
                  "definition": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "description": "The name of the starting step.",
                        "example": "Send Email Test"
                      },
                      "steps": {
                        "type": "object",
                        "description": "One or more step objects that comprise this workflow.  Please see the Workflow documentation to see the JSON schema for each step type.",
                        "additionalProperties": true,
                        "example": {
                          "Send Email": {
                            "actionId": "sp:send-email",
                            "attributes": {
                              "body": "This is a test",
                              "from": "sailpoint@sailpoint.com",
                              "recipientId.$": "$.identity.id",
                              "subject": "test"
                            },
                            "nextStep": "success",
                            "selectResult": null,
                            "type": "action"
                          },
                          "success": {
                            "type": "success"
                          }
                        }
                      }
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the workflow.  Workflows cannot be created in an enabled state.",
                    "default": false,
                    "example": false
                  },
                  "trigger": {
                    "type": "object",
                    "description": "The trigger that starts the workflow",
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "type": {
                        "enum": [
                          "EVENT",
                          "EXTERNAL",
                          "SCHEDULED"
                        ],
                        "example": "EVENT",
                        "description": "The trigger type"
                      },
                      "attributes": {
                        "description": "Workflow Trigger Attributes.",
                        "oneOf": [
                          {
                            "title": "Event Trigger Attributes",
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The unique ID of the trigger",
                                "example": "idn:identity-attributes-changed"
                              },
                              "filter": {
                                "type": "string",
                                "description": "JSON path expression that will limit which events the trigger will fire on",
                                "example": "$.changes[?(@.attribute == 'manager')]"
                              }
                            }
                          },
                          {
                            "title": "Scheduled Trigger Attributes",
                            "type": "object",
                            "required": [
                              "cronString"
                            ],
                            "properties": {
                              "cronString": {
                                "type": "string",
                                "description": "A valid CRON expression",
                                "externalDocs": {
                                  "description": "CRON expression editor",
                                  "url": "https://crontab.guru/"
                                },
                                "example": "0 * */3 */5 *"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1workflows/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Patch Workflow",
        "description": "Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:update"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/paths/~1entitlements/patch/requestBody/content/application~1json-patch%2Bjson/schema/items"
                }
              },
              "examples": {
                "Update all patchable fields": {
                  "description": "Demonstrate how to update each patchable field in one PATCH request.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/name",
                      "value": "Send Email"
                    },
                    {
                      "op": "replace",
                      "path": "/owner",
                      "value": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "William Wilson"
                      }
                    },
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Send an email to the identity who's attributes changed."
                    },
                    {
                      "op": "replace",
                      "path": "/enabled",
                      "value": false
                    },
                    {
                      "op": "replace",
                      "path": "/definition",
                      "value": {
                        "start": "Send Email Test",
                        "steps": {
                          "Send Email": {
                            "actionId": "sp:send-email",
                            "attributes": {
                              "body": "This is a test",
                              "from": "sailpoint@sailpoint.com",
                              "recipientId.$": "$.identity.id",
                              "subject": "test"
                            },
                            "nextStep": "success",
                            "selectResult": null,
                            "type": "action"
                          },
                          "success": {
                            "type": "success"
                          }
                        }
                      }
                    },
                    {
                      "op": "replace",
                      "path": "/trigger",
                      "value": {
                        "type": "EVENT",
                        "attributes": {
                          "id": "idn:identity-attributes-changed"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1workflows/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Delete Workflow By Id",
        "description": "Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:delete"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/paths/~1outliers~1ignore/post/responses/204"
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflows/{id}/test": {
      "post": {
        "operationId": "testWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Test Workflow By Id",
        "description": "Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/triggers/available_event_triggers.html) for an example input for the trigger that initiates this workflow.\nThis endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint.\n**This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:execute"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "input"
                ],
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "The test input for the workflow."
                  }
                }
              },
              "examples": {
                "Identity Attributes Changed": {
                  "description": "Identity Attributes Changed Trigger Input",
                  "value": {
                    "input": {
                      "identity": {
                        "id": "ee769173319b41d19ccec6cea52f237b",
                        "name": "john.doe",
                        "type": "IDENTITY"
                      },
                      "changes": [
                        {
                          "attribute": "department",
                          "oldValue": "sales",
                          "newValue": "marketing"
                        },
                        {
                          "attribute": "manager",
                          "oldValue": {
                            "id": "ee769173319b41d19ccec6c235423237b",
                            "name": "nice.guy",
                            "type": "IDENTITY"
                          },
                          "newValue": {
                            "id": "ee769173319b41d19ccec6c235423236c",
                            "name": "mean.guy",
                            "type": "IDENTITY"
                          }
                        },
                        {
                          "attribute": "email",
                          "oldValue": "john.doe@hotmail.com",
                          "newValue": "john.doe@gmail.com"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowExecutionId": {
                      "type": "string",
                      "description": "The workflow execution id",
                      "example": "0e11cefa-96e7-4b67-90d0-065bc1da5753"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflows/{id}/executions": {
      "get": {
        "operationId": "listWorkflowExecutions",
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflow Executions",
        "description": "This lists the executions for a given workflow",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow executions for the given workflow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1workflow-executions~1%7Bid%7D/get/responses/200/content/application~1json/schema/items"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflow-executions/{id}": {
      "get": {
        "operationId": "getWorkflowExecution",
        "tags": [
          "Workflows"
        ],
        "summary": "Get a Workflow Execution",
        "description": "Get a single workflow execution.  Workflow executions are available for up to 2 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow execution",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow execution",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Workflow execution id",
                        "example": "b393f4e2-4785-4d7f-ab27-3a6b8ded4c81"
                      },
                      "workflowId": {
                        "type": "string",
                        "description": "Workflow id",
                        "example": "d201c5d9-d37b-4a2f-af14-66414f39d568"
                      },
                      "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date/time when the workflow started",
                        "example": "2022-02-07T20:13:29.356648026Z"
                      },
                      "closeTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date/time when the workflow ended",
                        "example": "2022-02-07T20:13:31.682410165Z"
                      },
                      "status": {
                        "description": "Workflow execution status",
                        "enum": [
                          "Completed",
                          "Failed"
                        ],
                        "example": "Completed"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflow-executions/{id}/history": {
      "get": {
        "operationId": "getWorkflowExecutionHistory",
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow Execution History",
        "description": "Get a detailed history of a single workflow execution.  Workflow executions are available for up to 2 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow execution",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow execution events for the given workflow execution",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "The type of event",
                        "enum": [
                          "WorkflowExecutionScheduled",
                          "WorkflowExecutionStarted",
                          "WorkflowExecutionCompleted",
                          "WorkflowExecutionFailed",
                          "WorkflowTaskScheduled",
                          "WorkflowTaskStarted",
                          "WorkflowTaskCompleted",
                          "WorkflowTaskFailed",
                          "ActivityTaskScheduled",
                          "ActivityTaskStarted",
                          "ActivityTaskCompleted",
                          "ActivityTaskFailed"
                        ],
                        "example": "WorkflowTaskScheduled"
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date-time when the event occurred",
                        "example": "2022-02-07T20:13:31.640618296Z"
                      },
                      "attributes": {
                        "type": "object",
                        "description": "Additional attributes associated with the event",
                        "example": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1sources/get/responses/404"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflow-library": {
      "get": {
        "operationId": "listCompleteWorkflowLibrary",
        "tags": [
          "Workflows"
        ],
        "summary": "List Complete Workflow Library",
        "description": "This lists all triggers, actions, and operators in the library",
        "externalDocs": {
          "description": "Additional documentation for workflows",
          "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-steps.html"
        },
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          }
        ],
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow steps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/paths/~1workflow-library~1actions/get/responses/200/content/application~1json/schema/items"
                      },
                      {
                        "$ref": "#/paths/~1workflow-library~1triggers/get/responses/200/content/application~1json/schema/items"
                      },
                      {
                        "$ref": "#/paths/~1workflow-library~1operators/get/responses/200/content/application~1json/schema/items"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflow-library/actions": {
      "get": {
        "operationId": "listWorkflowLibraryActions",
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflow Library Actions",
        "description": "This lists the workflow actions available to you.",
        "externalDocs": {
          "description": "Additional documentation for each action",
          "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-steps.html#actions"
        },
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*",
            "example": "id eq \"sp:create-campaign\""
          }
        ],
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Workflow Action",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Action ID. This is a static namespaced ID for the action",
                        "example": "sp:create-campaign"
                      },
                      "name": {
                        "type": "string",
                        "description": "Action Name",
                        "example": "Create Certification Campaign"
                      },
                      "description": {
                        "type": "string",
                        "description": "Action Description",
                        "example": "Generates a certification campaign."
                      },
                      "formFields": {
                        "type": "array",
                        "description": "One or more inputs that the action accepts",
                        "items": {
                          "type": "object",
                          "properties": {
                            "helpText": {
                              "type": "string",
                              "description": "Describes the form field in the UI",
                              "example": "The name to give to this certification campaign."
                            },
                            "label": {
                              "type": "string",
                              "description": "A human readable name for this form field in the UI",
                              "example": "Campaign Name"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the input attribute",
                              "example": "name"
                            },
                            "required": {
                              "type": "boolean",
                              "description": "Denotes if this field is a required attribute",
                              "example": false
                            },
                            "type": {
                              "description": "The type of the form field",
                              "enum": [
                                "text",
                                "textarea",
                                "boolean",
                                "email",
                                "url",
                                "number",
                                "json",
                                "checkbox"
                              ],
                              "example": "text"
                            }
                          }
                        }
                      },
                      "outputSchema": {
                        "type": "object",
                        "description": "Defines the output schema, if any, that this action produces.",
                        "example": {
                          "definitions": {},
                          "properties": {
                            "autoRevokeAllowed": {
                              "$id": "#sp:create-campaign/autoRevokeAllowed",
                              "default": true,
                              "examples": [
                                false
                              ],
                              "title": "autoRevokeAllowed",
                              "type": "boolean"
                            },
                            "deadline": {
                              "$id": "#sp:create-campaign/deadline",
                              "default": "",
                              "examples": [
                                "2020-12-25T06:00:00.468Z"
                              ],
                              "format": "date-time",
                              "pattern": "^.*$",
                              "title": "deadline",
                              "type": "string"
                            },
                            "description": {
                              "$id": "#sp:create-campaign/description",
                              "default": "",
                              "examples": [
                                "A review of everyone's access by their manager."
                              ],
                              "pattern": "^.*$",
                              "title": "description",
                              "type": "string"
                            },
                            "emailNotificationEnabled": {
                              "$id": "#sp:create-campaign/emailNotificationEnabled",
                              "default": true,
                              "examples": [
                                false
                              ],
                              "title": "emailNotificationEnabled",
                              "type": "boolean"
                            },
                            "filter": {
                              "$id": "#sp:create-campaign/filter",
                              "properties": {
                                "id": {
                                  "$id": "#sp:create-campaign/filter/id",
                                  "default": "",
                                  "examples": [
                                    "e0adaae69852e8fe8b8a3d48e5ce757c"
                                  ],
                                  "pattern": "^.*$",
                                  "title": "id",
                                  "type": "string"
                                },
                                "type": {
                                  "$id": "#sp:create-campaign/filter/type",
                                  "default": "",
                                  "examples": [
                                    "CAMPAIGN_FILTER"
                                  ],
                                  "pattern": "^.*$",
                                  "title": "type",
                                  "type": "string"
                                }
                              },
                              "title": "filter",
                              "type": "object"
                            },
                            "id": {
                              "$id": "#sp:create-campaign/id",
                              "default": "",
                              "examples": [
                                "2c918086719eec070171a7e3355a360a"
                              ],
                              "pattern": "^.*$",
                              "title": "id",
                              "type": "string"
                            },
                            "name": {
                              "$id": "#sp:create-campaign/name",
                              "default": "",
                              "examples": [
                                "Manager Review"
                              ],
                              "pattern": "^.*$",
                              "title": "name",
                              "type": "string"
                            },
                            "recommendationsEnabled": {
                              "$id": "#sp:create-campaign/recommendationsEnabled",
                              "default": true,
                              "examples": [
                                false
                              ],
                              "title": "recommendationEnabled",
                              "type": "boolean"
                            },
                            "type": {
                              "$id": "#sp:create-campaign/type",
                              "default": "",
                              "examples": [
                                "MANAGER"
                              ],
                              "pattern": "^.*$",
                              "title": "type",
                              "type": "string"
                            }
                          },
                          "title": "sp:create-campaign",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflow-library/triggers": {
      "get": {
        "operationId": "listWorkflowLibraryTriggers",
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflow Library Triggers",
        "description": "This lists the workflow triggers available to you",
        "externalDocs": {
          "description": "Additional documentation for each trigger",
          "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-steps.html#triggers"
        },
        "parameters": [
          {
            "$ref": "#/paths/~1accounts/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1roles/get/parameters/2"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/docs/standard_collection_parameters.html#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*",
            "example": "id eq \"idn:identity-attributes-changed\""
          }
        ],
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow triggers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Workflow Trigger",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Trigger ID. This is a static namespaced ID for the trigger.",
                        "example": "idn:identity-attributes-changed"
                      },
                      "type": {
                        "description": "Trigger type",
                        "enum": [
                          "EVENT",
                          "SCHEDULED",
                          "EXTERNAL"
                        ],
                        "example": "EVENT"
                      },
                      "name": {
                        "type": "string",
                        "description": "Trigger Name",
                        "example": "Identity Attributes Changed"
                      },
                      "description": {
                        "type": "string",
                        "description": "Trigger Description",
                        "example": "One or more identity attributes changed."
                      },
                      "inputExample": {
                        "type": "object",
                        "description": "Example trigger payload if applicable",
                        "externalDocs": {
                          "description": "List of triggers and their input schemas",
                          "url": "https://developer.sailpoint.com/triggers/available_event_triggers.html#request"
                        },
                        "example": {
                          "changes": [
                            {
                              "attribute": "department",
                              "newValue": "marketing",
                              "oldValue": "sales"
                            },
                            {
                              "attribute": "manager",
                              "newValue": {
                                "id": "ee769173319b41d19ccec6c235423236c",
                                "name": "mean.guy",
                                "type": "IDENTITY"
                              },
                              "oldValue": {
                                "id": "ee769173319b41d19ccec6c235423237b",
                                "name": "nice.guy",
                                "type": "IDENTITY"
                              }
                            },
                            {
                              "attribute": "email",
                              "newValue": "john.doe@gmail.com",
                              "oldValue": "john.doe@hotmail.com"
                            }
                          ],
                          "identity": {
                            "id": "ee769173319b41d19ccec6cea52f237b",
                            "name": "john.doe",
                            "type": "IDENTITY"
                          }
                        }
                      },
                      "formFields": {
                        "type": "array",
                        "description": "One or more inputs that the trigger accepts",
                        "example": [],
                        "items": {
                          "$ref": "#/paths/~1workflow-library~1actions/get/responses/200/content/application~1json/schema/items/properties/formFields/items"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflow-library/operators": {
      "get": {
        "operationId": "listWorkflowLibraryOperators",
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflow Library Operators",
        "description": "This lists the workflow operators available to you",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Workflow Operator",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Operator ID.",
                        "example": "sp:compare-boolean"
                      },
                      "name": {
                        "type": "string",
                        "description": "Operator friendly name",
                        "example": "Compare Boolean Values"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the operator",
                        "example": "Compare two boolean values and decide what happens based on the result."
                      },
                      "formFields": {
                        "type": "array",
                        "description": "One or more inputs that the operator accepts",
                        "items": {
                          "$ref": "#/paths/~1workflow-library~1actions/get/responses/200/content/application~1json/schema/items/properties/formFields/items"
                        },
                        "example": [
                          {
                            "description": "Enter the JSONPath to a value from the input to compare to Variable B.",
                            "helpText": "",
                            "label": "Variable A",
                            "name": "variableA.$",
                            "required": true,
                            "type": "text"
                          },
                          {
                            "helpText": "Select an operation.",
                            "label": "Operation",
                            "name": "operator",
                            "options": [
                              {
                                "label": "Equals",
                                "value": "BooleanEquals"
                              }
                            ],
                            "required": true,
                            "type": "select"
                          },
                          {
                            "description": "Enter the JSONPath to a value from the input to compare to Variable A.",
                            "helpText": "",
                            "label": "Variable B",
                            "name": "variableB.$",
                            "required": false,
                            "type": "text"
                          },
                          {
                            "description": "Enter True or False.",
                            "helpText": "",
                            "label": "Variable B",
                            "name": "variableB",
                            "required": false,
                            "type": "text"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflows/{id}/external/oauth-clients": {
      "post": {
        "operationId": "postWorkflowExternalTrigger",
        "tags": [
          "Workflows"
        ],
        "summary": "Generate External Trigger OAuth Client",
        "description": "Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:update"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The OAuth Client object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "OAuth client ID for the trigger. This is a UUID generated upon creation.",
                      "example": "1a58c03a6bf64dc2876f6988c6e2c7b7"
                    },
                    "secret": {
                      "type": "string",
                      "description": "OAuthClient secret.",
                      "example": "00cc24a7fe810fe06a7cb38bc168ae104d703c7abb296f9944dc68e69ddb578b"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL for the external trigger to invoke",
                      "example": "https://{tenant}.api.identitynow.com/beta/workflows/execute/external/c17bea3a-574d-453c-9e04-4365fbf5af0b"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflows/execute/external/{id}": {
      "post": {
        "operationId": "postExternalExecuteWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Execute Workflow via External Trigger",
        "description": "This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:external-execute"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "The input for the workflow",
                    "example": {
                      "customAttribute1": "value1",
                      "customAttribute2": "value2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowExecutionId": {
                      "type": "string",
                      "description": "The workflow execution id",
                      "example": "0e11cefa-96e7-4b67-90d0-065bc1da5753"
                    },
                    "message": {
                      "type": "string",
                      "description": "An error message if any errors occurred",
                      "example": "Workflow was not executed externally. Check enabled flag on workflow definition"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    },
    "/workflows/execute/external/{id}/test": {
      "post": {
        "operationId": "testExternalExecuteWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Test Workflow via External Trigger",
        "description": "Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.",
        "security": [
          {
            "bearerAuth": [
              "sp:workflow:external-execute"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "The test input for the workflow",
                    "example": {
                      "test": "hello world"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the test input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payload": {
                      "type": "object",
                      "description": "The input that was received",
                      "example": {
                        "test": "hello world"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1roles/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1roles/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1roles/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1roles/get/responses/429"
          },
          "500": {
            "$ref": "#/paths/~1roles/get/responses/500"
          }
        }
      }
    }
  }
}